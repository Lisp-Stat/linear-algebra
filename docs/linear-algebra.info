This is linear-algebra.info, produced by makeinfo version 6.8 from
linear-algebra.texi.

     Copyright © 2019-2023 Steve Nunez Copyright © 2019-2023 Thomas M.
     Hermann

     Permission is granted to make and distribute verbatim copies of
     this manual provided the copyright notice and this permission
     notice are preserved on all copies.

     Permission is granted to copy and distribute modified versions of
     this manual under the conditions for verbatim copying, provided
     also that the section entitled “Copying” is included exactly as in
     the original.

     Permission is granted to copy and distribute translations of this
     manual into another language, under the above conditions for
     modified versions, except that this permission notice may be
     translated as well.
INFO-DIR-SECTION Common Lisp
START-INFO-DIR-ENTRY
* LINEAR-ALGEBRA Reference Manual: (linear-algebra). The LINEAR-ALGEBRA Reference Manual.
END-INFO-DIR-ENTRY


File: linear-algebra.info,  Node: Top,  Next: Copying,  Prev: (dir),  Up: (dir)

The LINEAR-ALGEBRA Reference Manual
***********************************

This is the LINEAR-ALGEBRA Reference Manual, version 0.1.1, generated
automatically by Declt version 4.0b2.

* Menu:

* Copying:: The Microsoft Public License
* Systems:: The systems documentation
* Modules:: The modules documentation
* Files:: The files documentation
* Packages:: The packages documentation
* Definitions:: The symbols documentation
* Indexes:: Concepts, functions, variables and data types

     Copyright © 2019-2023 Steve Nunez Copyright © 2019-2023 Thomas M.
     Hermann

     Permission is granted to make and distribute verbatim copies of
     this manual provided the copyright notice and this permission
     notice are preserved on all copies.

     Permission is granted to copy and distribute modified versions of
     this manual under the conditions for verbatim copying, provided
     also that the section entitled “Copying” is included exactly as in
     the original.

     Permission is granted to copy and distribute translations of this
     manual into another language, under the above conditions for
     modified versions, except that this permission notice may be
     translated as well.


File: linear-algebra.info,  Node: Copying,  Next: Systems,  Prev: Top,  Up: Top

Copying
*******

     This program is distributed under the terms of the Microsoft Public
     License.


File: linear-algebra.info,  Node: Systems,  Next: Modules,  Prev: Copying,  Up: Top

1 Systems
*********

The main system appears first, followed by any subsystem dependency.

* Menu:

* The linear-algebra system::


File: linear-algebra.info,  Node: The linear-algebra system,  Prev: Systems,  Up: Systems

1.1 linear-algebra
==================

Linear Algebra for Common Lisp
*Long Name*
     Linear Algebra for Common Lisp
*Maintainer*
     Steve Nunez <<steve@symbolics.tech>>
*Author*
     Thomas M. Hermann <<thomas.m.hermann@odonata-research.com>>
*Home Page*
     <https://lisp-stat.dev/docs/manuals/lla>
*Source Control*
     (GIT https://github.com/Lisp-Stat/linear-algebra.git)
*Bug Tracker*
     <https://github.com/Lisp-Stat/linear-algebra/issues>
*License*
     MS-PL
*Long Description*
     This system is a high level interface for linear algebra and matrix
     manipulation.  It was forked from Thomas Hermann’s linear-algebra
     library (https://github.com/OdonataResearchLLC/linear-algebra) and
     currently maintained by Brian Eberman and Steve Nunez.

     Current goals are to implement backends that use BLAS/LAPACK and
     CUDA.
*Version*
     0.1.1
*Dependencies*
        • closer-mop (system).
        • floating-point (system).
*Source*
     *note linear-algebra.asd: ❨5❩.
*Child Components*
        • *note pkgdcl.lisp: ❨6❩. (file).
        • *note kernel: ❨2❩. (module).
        • *note interface: ❨3❩. (module).
        • *note sequence: ❨4❩. (module).
        • *note data-vector.lisp: ❨25❩. (file).
        • *note dense-matrix.lisp: ❨26❩. (file).
        • *note square-matrix.lisp: ❨27❩. (file).
        • *note hermitian-matrix.lisp: ❨28❩. (file).
        • *note symmetric-matrix.lisp: ❨29❩. (file).


File: linear-algebra.info,  Node: Modules,  Next: Files,  Prev: Systems,  Up: Top

2 Modules
*********

Modules are listed depth-first from the system components tree.

* Menu:

* The linear-algebra/kernel module::
* The linear-algebra/interface module::
* The linear-algebra/sequence module::


File: linear-algebra.info,  Node: The linear-algebra/kernel module,  Next: The linear-algebra/interface module,  Prev: Modules,  Up: Modules

2.1 linear-algebra/kernel
=========================

*Source*
     *note linear-algebra.asd: ❨5❩.
*Parent Component*
     *note linear-algebra: ❨1❩. (system).
*Child Components*
        • *note pkgdcl.lisp: ❨7❩. (file).
        • *note utility.lisp: ❨8❩. (file).
        • *note permute.lisp: ❨9❩. (file).
        • *note unary-operations.lisp: ❨10❩. (file).
        • *note binary-operations.lisp: ❨11❩. (file).
        • *note rotation.lisp: ❨12❩. (file).
        • *note gauss.lisp: ❨13❩. (file).
        • *note cholesky.lisp: ❨14❩. (file).
        • *note conjugate-gradient.lisp: ❨15❩. (file).
        • *note tridiagonal.lisp: ❨16❩. (file).


File: linear-algebra.info,  Node: The linear-algebra/interface module,  Next: The linear-algebra/sequence module,  Prev: The linear-algebra/kernel module,  Up: Modules

2.2 linear-algebra/interface
============================

*Dependency*
     *note kernel: ❨2❩. (module).
*Source*
     *note linear-algebra.asd: ❨5❩.
*Parent Component*
     *note linear-algebra: ❨1❩. (system).
*Child Components*
        • *note fundamental-ops.lisp: ❨17❩. (file).
        • *note vector.lisp: ❨18❩. (file).
        • *note matrix.lisp: ❨19❩. (file).
        • *note identity-matrix.lisp: ❨20❩. (file).
        • *note permutation-matrix.lisp: ❨21❩. (file).


File: linear-algebra.info,  Node: The linear-algebra/sequence module,  Prev: The linear-algebra/interface module,  Up: Modules

2.3 linear-algebra/sequence
===========================

*Dependency*
     *note interface: ❨3❩. (module).
*Source*
     *note linear-algebra.asd: ❨5❩.
*Parent Component*
     *note linear-algebra: ❨1❩. (system).
*Child Components*
        • *note list.lisp: ❨22❩. (file).
        • *note vector.lisp: ❨23❩. (file).
        • *note array.lisp: ❨24❩. (file).


File: linear-algebra.info,  Node: Files,  Next: Packages,  Prev: Modules,  Up: Top

3 Files
*******

Files are sorted by type and then listed depth-first from the systems
components trees.

* Menu:

* Lisp files::


File: linear-algebra.info,  Node: Lisp files,  Prev: Files,  Up: Files

3.1 Lisp
========

* Menu:

* The linear-algebra/linear-algebra․asd file::
* The linear-algebra/pkgdcl․lisp file::
* The linear-algebra/kernel/pkgdcl․lisp file::
* The linear-algebra/kernel/utility․lisp file::
* The linear-algebra/kernel/permute․lisp file::
* The linear-algebra/kernel/unary-operations․lisp file::
* The linear-algebra/kernel/binary-operations․lisp file::
* The linear-algebra/kernel/rotation․lisp file::
* The linear-algebra/kernel/gauss․lisp file::
* The linear-algebra/kernel/cholesky․lisp file::
* The linear-algebra/kernel/conjugate-gradient․lisp file::
* The linear-algebra/kernel/tridiagonal․lisp file::
* The linear-algebra/interface/fundamental-ops․lisp file::
* The linear-algebra/interface/vector․lisp file::
* The linear-algebra/interface/matrix․lisp file::
* The linear-algebra/interface/identity-matrix․lisp file::
* The linear-algebra/interface/permutation-matrix․lisp file::
* The linear-algebra/sequence/list․lisp file::
* The linear-algebra/sequence/vector․lisp file::
* The linear-algebra/sequence/array․lisp file::
* The linear-algebra/data-vector․lisp file::
* The linear-algebra/dense-matrix․lisp file::
* The linear-algebra/square-matrix․lisp file::
* The linear-algebra/hermitian-matrix․lisp file::
* The linear-algebra/symmetric-matrix․lisp file::


File: linear-algebra.info,  Node: The linear-algebra/linear-algebra․asd file,  Next: The linear-algebra/pkgdcl․lisp file,  Prev: Lisp files,  Up: Lisp files

3.1.1 linear-algebra/linear-algebra.asd
---------------------------------------

*Source*
     *note linear-algebra.asd: ❨5❩.
*Parent Component*
     *note linear-algebra: ❨1❩. (system).
*ASDF Systems*
     *note linear-algebra: ❨1❩.


File: linear-algebra.info,  Node: The linear-algebra/pkgdcl․lisp file,  Next: The linear-algebra/kernel/pkgdcl․lisp file,  Prev: The linear-algebra/linear-algebra․asd file,  Up: Lisp files

3.1.2 linear-algebra/pkgdcl.lisp
--------------------------------

*Dependency*
     *note kernel: ❨2❩. (module).
*Source*
     *note linear-algebra.asd: ❨5❩.
*Parent Component*
     *note linear-algebra: ❨1❩. (system).
*Packages*
     *note linear-algebra: ❨31❩.


File: linear-algebra.info,  Node: The linear-algebra/kernel/pkgdcl․lisp file,  Next: The linear-algebra/kernel/utility․lisp file,  Prev: The linear-algebra/pkgdcl․lisp file,  Up: Lisp files

3.1.3 linear-algebra/kernel/pkgdcl.lisp
---------------------------------------

*Source*
     *note linear-algebra.asd: ❨5❩.
*Parent Component*
     *note kernel: ❨2❩. (module).
*Packages*
     *note linear-algebra-kernel: ❨30❩.


File: linear-algebra.info,  Node: The linear-algebra/kernel/utility․lisp file,  Next: The linear-algebra/kernel/permute․lisp file,  Prev: The linear-algebra/kernel/pkgdcl․lisp file,  Up: Lisp files

3.1.4 linear-algebra/kernel/utility.lisp
----------------------------------------

*Dependency*
     *note pkgdcl.lisp: ❨7❩. (file).
*Source*
     *note linear-algebra.asd: ❨5❩.
*Parent Component*
     *note kernel: ❨2❩. (module).
*Public Interface*
        • *note common-array-element-type: ❨38❩. (function).
        • *note common-class-of: ❨46❩. (function).
        • *note complex-equal: ❨107❩. (function).
        • *note copy-array: ❨90❩. (generic function).
        • *note number-equal: ❨111❩. (function).
        • *note specific-array-element-type: ❨88❩. (function).
*Internals*
        • *note zero-array: ❨115❩. (function).
        • *note zero-vector: ❨139❩. (function).


File: linear-algebra.info,  Node: The linear-algebra/kernel/permute․lisp file,  Next: The linear-algebra/kernel/unary-operations․lisp file,  Prev: The linear-algebra/kernel/utility․lisp file,  Up: Lisp files

3.1.5 linear-algebra/kernel/permute.lisp
----------------------------------------

*Dependency*
     *note pkgdcl.lisp: ❨7❩. (file).
*Source*
     *note linear-algebra.asd: ❨5❩.
*Parent Component*
     *note kernel: ❨2❩. (module).
*Public Interface*
        • *note left-permute: ❨47❩. (generic function).
        • *note right-permute: ❨32❩. (generic function).


File: linear-algebra.info,  Node: The linear-algebra/kernel/unary-operations․lisp file,  Next: The linear-algebra/kernel/binary-operations․lisp file,  Prev: The linear-algebra/kernel/permute․lisp file,  Up: Lisp files

3.1.6 linear-algebra/kernel/unary-operations.lisp
-------------------------------------------------

*Dependency*
     *note pkgdcl.lisp: ❨7❩. (file).
*Source*
     *note linear-algebra.asd: ❨5❩.
*Parent Component*
     *note kernel: ❨2❩. (module).
*Public Interface*
        • *note norm-array: ❨78❩. (generic function).
        • *note norm-vector: ❨59❩. (generic function).
        • *note sump: ❨42❩. (generic function).
        • *note sumsq: ❨74❩. (generic function).
        • *note sumsq-column: ❨103❩. (function).
        • *note sumsq-row: ❨108❩. (function).
        • *note sumsq2: ❨72❩. (function).
        • *note sumsq3: ❨83❩. (function).
*Internals*
     *note %abs-vector: ❨133❩. (function).


File: linear-algebra.info,  Node: The linear-algebra/kernel/binary-operations․lisp file,  Next: The linear-algebra/kernel/rotation․lisp file,  Prev: The linear-algebra/kernel/unary-operations․lisp file,  Up: Lisp files

3.1.7 linear-algebra/kernel/binary-operations.lisp
--------------------------------------------------

*Dependency*
     *note pkgdcl.lisp: ❨7❩. (file).
*Source*
     *note linear-algebra.asd: ❨5❩.
*Parent Component*
     *note kernel: ❨2❩. (module).
*Public Interface*
        • *note add-array: ❨40❩. (function).
        • *note add-vector: ❨58❩. (function).
        • *note compatible-dimensions-p: ❨93❩. (generic function).
        • *note inner-product-vector: ❨41❩. (function).
        • *note nadd-array: ❨66❩. (function).
        • *note nadd-vector: ❨35❩. (function).
        • *note nsubtract-array: ❨37❩. (function).
        • *note nsubtract-vector: ❨67❩. (function).
        • *note product-array-array: ❨105❩. (function).
        • *note product-array-vector: ❨69❩. (function).
        • *note product-vector-array: ❨71❩. (function).
        • *note scaled-binary-op: ❨50❩. (generic function).
        • *note subtract-array: ❨70❩. (function).
        • *note subtract-vector: ❨84❩. (function).
*Internals*
        • *note %array1<-array1-op-array2: ❨120❩. (function).
        • *note %array<-array1-op-array2: ❨122❩. (function).
        • *note %product-array-array: ❨129❩. (function).
        • *note %product-array-vector: ❨138❩. (function).
        • *note %product-vector-array: ❨128❩. (function).
        • *note %scaled-product-array-array: ❨117❩. (function).
        • *note %scaled-product-array-vector: ❨135❩. (function).
        • *note %scaled-product-vector-array: ❨127❩. (function).
        • *note %vector1<-vector1-op-vector2: ❨113❩. (function).
        • *note %vector<-vector1-op-vector2: ❨118❩. (function).


File: linear-algebra.info,  Node: The linear-algebra/kernel/rotation․lisp file,  Next: The linear-algebra/kernel/gauss․lisp file,  Prev: The linear-algebra/kernel/binary-operations․lisp file,  Up: Lisp files

3.1.8 linear-algebra/kernel/rotation.lisp
-----------------------------------------

*Dependency*
     *note unary-operations.lisp: ❨10❩. (file).
*Source*
     *note linear-algebra.asd: ❨5❩.
*Parent Component*
     *note kernel: ❨2❩. (module).
*Public Interface*
        • *note givens-rotation: ❨64❩. (function).
        • *note householder-reflection: ❨85❩. (function).
        • *note jacobi-rotation: ❨104❩. (function).


File: linear-algebra.info,  Node: The linear-algebra/kernel/gauss․lisp file,  Next: The linear-algebra/kernel/cholesky․lisp file,  Prev: The linear-algebra/kernel/rotation․lisp file,  Up: Lisp files

3.1.9 linear-algebra/kernel/gauss.lisp
--------------------------------------

*Dependency*
     *note pkgdcl.lisp: ❨7❩. (file).
*Source*
     *note linear-algebra.asd: ❨5❩.
*Parent Component*
     *note kernel: ❨2❩. (module).
*Public Interface*
        • *note gauss-invert: ❨86❩. (function).
        • *note gauss-solver: ❨89❩. (function).
*Internals*
        • *note column-pivot: ❨131❩. (function).
        • *note column-pivot-search: ❨130❩. (function).
        • *note gauss-backsubstitution: ❨136❩. (function).
        • *note gauss-factorization: ❨134❩. (function).
        • *note gauss-update: ❨132❩. (function).
        • *note initialize-pivot-selection-vector: ❨116❩. (function).
        • *note swap-rows: ❨126❩. (function).
        • *note unit-pivot-value: ❨124❩. (function).


File: linear-algebra.info,  Node: The linear-algebra/kernel/cholesky․lisp file,  Next: The linear-algebra/kernel/conjugate-gradient․lisp file,  Prev: The linear-algebra/kernel/gauss․lisp file,  Up: Lisp files

3.1.10 linear-algebra/kernel/cholesky.lisp
------------------------------------------

*Dependency*
     *note unary-operations.lisp: ❨10❩. (file).
*Source*
     *note linear-algebra.asd: ❨5❩.
*Parent Component*
     *note kernel: ❨2❩. (module).
*Public Interface*
        • *note hermitian-cholesky-decomposition: ❨109❩. (function).
        • *note hermitian-cholesky-invert: ❨39❩. (function).
        • *note hermitian-cholesky-solver: ❨87❩. (function).
        • *note root-free-hermitian-cholesky-decomposition: ❨106❩.
          (function).
        • *note root-free-symmetric-cholesky-decomposition: ❨73❩.
          (function).
        • *note symmetric-cholesky-decomposition: ❨110❩. (function).
        • *note symmetric-cholesky-invert: ❨65❩. (function).
        • *note symmetric-cholesky-solver: ❨102❩. (function).


File: linear-algebra.info,  Node: The linear-algebra/kernel/conjugate-gradient․lisp file,  Next: The linear-algebra/kernel/tridiagonal․lisp file,  Prev: The linear-algebra/kernel/cholesky․lisp file,  Up: Lisp files

3.1.11 linear-algebra/kernel/conjugate-gradient.lisp
----------------------------------------------------

*Dependency*
     *note binary-operations.lisp: ❨11❩. (file).
*Source*
     *note linear-algebra.asd: ❨5❩.
*Parent Component*
     *note kernel: ❨2❩. (module).
*Public Interface*
     *note conjugate-gradient-solver: ❨68❩. (function).
*Internals*
        • *note %default-cg-epsilon: ❨123❩. (function).
        • *note %initialize-cg-residual: ❨125❩. (function).
        • *note %initialize-cg-solution: ❨119❩. (function).
        • *note %negative-residual: ❨137❩. (function).


File: linear-algebra.info,  Node: The linear-algebra/kernel/tridiagonal․lisp file,  Next: The linear-algebra/interface/fundamental-ops․lisp file,  Prev: The linear-algebra/kernel/conjugate-gradient․lisp file,  Up: Lisp files

3.1.12 linear-algebra/kernel/tridiagonal.lisp
---------------------------------------------

*Dependency*
     *note pkgdcl.lisp: ❨7❩. (file).
*Source*
     *note linear-algebra.asd: ❨5❩.
*Parent Component*
     *note kernel: ❨2❩. (module).
*Public Interface*
     *note tridiagonal-solver: ❨36❩. (function).
*Internals*
        • *note tridiagonal-backsubstitution: ❨112❩. (function).
        • *note tridiagonal-factorization: ❨114❩. (function).
        • *note tridiagonal-update: ❨121❩. (function).


File: linear-algebra.info,  Node: The linear-algebra/interface/fundamental-ops․lisp file,  Next: The linear-algebra/interface/vector․lisp file,  Prev: The linear-algebra/kernel/tridiagonal․lisp file,  Up: Lisp files

3.1.13 linear-algebra/interface/fundamental-ops.lisp
----------------------------------------------------

*Source*
     *note linear-algebra.asd: ❨5❩.
*Parent Component*
     *note interface: ❨3❩. (module).
*Public Interface*
        • *note add: ❨287❩. (generic function).
        • *note invert: ❨337❩. (generic function).
        • *note nadd: ❨159❩. (generic function).
        • *note ninvert: ❨274❩. (generic function).
        • *note norm: ❨320❩. (generic function).
        • *note nscale: ❨266❩. (generic function).
        • *note nsolve: ❨300❩. (generic function).
        • *note nsubtract: ❨352❩. (generic function).
        • *note ntranspose: ❨329❩. (generic function).
        • *note permute: ❨243❩. (generic function).
        • *note product: ❨364❩. (generic function).
        • *note scale: ❨185❩. (generic function).
        • *note solve: ❨200❩. (generic function).
        • *note subtract: ❨221❩. (generic function).
        • *note transpose: ❨146❩. (generic function).


File: linear-algebra.info,  Node: The linear-algebra/interface/vector․lisp file,  Next: The linear-algebra/interface/matrix․lisp file,  Prev: The linear-algebra/interface/fundamental-ops․lisp file,  Up: Lisp files

3.1.14 linear-algebra/interface/vector.lisp
-------------------------------------------

*Dependency*
     *note fundamental-ops.lisp: ❨17❩. (file).
*Source*
     *note linear-algebra.asd: ❨5❩.
*Parent Component*
     *note interface: ❨3❩. (module).
*Public Interface*
        • *note apply-rotation: ❨261❩. (generic function).
        • *note copy-vector: ❨219❩. (generic function).
        • *note dovector: ❨319❩. (macro).
        • *note make-vector: ❨351❩. (function).
        • *note map-into-vector: ❨311❩. (generic function).
        • *note map-vector: ❨197❩. (generic function).
        • *note napply-rotation: ❨326❩. (generic function).
        • *note replace-vector: ❨298❩. (generic function).
        • *note subvector: ❨236❩. (generic function).
        • *note (setf subvector): ❨238❩. (generic function).
        • *note vector-element-type: ❨264❩. (generic function).
        • *note vector-in-bounds-p: ❨230❩. (generic function).
        • *note vector-length: ❨296❩. (generic function).
        • *note vref: ❨170❩. (generic function).
        • *note (setf vref): ❨172❩. (generic function).


File: linear-algebra.info,  Node: The linear-algebra/interface/matrix․lisp file,  Next: The linear-algebra/interface/identity-matrix․lisp file,  Prev: The linear-algebra/interface/vector․lisp file,  Up: Lisp files

3.1.15 linear-algebra/interface/matrix.lisp
-------------------------------------------

*Dependency*
     *note fundamental-ops.lisp: ❨17❩. (file).
*Source*
     *note linear-algebra.asd: ❨5❩.
*Parent Component*
     *note interface: ❨3❩. (module).
*Public Interface*
        • *note copy-matrix: ❨280❩. (generic function).
        • *note make-matrix: ❨284❩. (function).
        • *note matrix-column-dimension: ❨343❩. (generic function).
        • *note matrix-dimensions: ❨155❩. (generic function).
        • *note matrix-element-type: ❨347❩. (generic function).
        • *note matrix-in-bounds-p: ❨307❩. (generic function).
        • *note matrix-object: ❨242❩. (class).
        • *note matrix-row-dimension: ❨232❩. (generic function).
        • *note matrix-validated-range: ❨258❩. (function).
        • *note matrixp: ❨306❩. (function).
        • *note mref: ❨174❩. (generic function).
        • *note (setf mref): ❨178❩. (generic function).
        • *note replace-matrix: ❨140❩. (generic function).
        • *note submatrix: ❨208❩. (generic function).
        • *note (setf submatrix): ❨213❩. (generic function).
*Internals*
     *note initialize-matrix-contents: ❨398❩. (generic function).


File: linear-algebra.info,  Node: The linear-algebra/interface/identity-matrix․lisp file,  Next: The linear-algebra/interface/permutation-matrix․lisp file,  Prev: The linear-algebra/interface/matrix․lisp file,  Up: Lisp files

3.1.16 linear-algebra/interface/identity-matrix.lisp
----------------------------------------------------

*Dependency*
     *note matrix.lisp: ❨19❩. (file).
*Source*
     *note linear-algebra.asd: ❨5❩.
*Parent Component*
     *note interface: ❨3❩. (module).
*Public Interface*
        • *note copy-matrix: ❨283❩. (method).
        • *note identity-matrix: ❨191❩. (class).
        • *note identity-matrix-p: ❨194❩. (function).
        • *note initialize-instance: ❨441❩. (method).
        • *note matrix-column-dimension: ❨346❩. (reader method).
        • *note matrix-dimensions: ❨158❩. (method).
        • *note matrix-element-type: ❨350❩. (method).
        • *note matrix-in-bounds-p: ❨310❩. (method).
        • *note matrix-row-dimension: ❨235❩. (reader method).
        • *note mref: ❨177❩. (method).
*Internals*
        • *note contents: ❨386❩. (reader method).
        • *note size: ❨416❩. (reader method).


File: linear-algebra.info,  Node: The linear-algebra/interface/permutation-matrix․lisp file,  Next: The linear-algebra/sequence/list․lisp file,  Prev: The linear-algebra/interface/identity-matrix․lisp file,  Up: Lisp files

3.1.17 linear-algebra/interface/permutation-matrix.lisp
-------------------------------------------------------

*Dependency*
     *note matrix.lisp: ❨19❩. (file).
*Source*
     *note linear-algebra.asd: ❨5❩.
*Parent Component*
     *note interface: ❨3❩. (module).
*Public Interface*
        • *note copy-matrix: ❨282❩. (method).
        • *note initialize-instance: ❨452❩. (method).
        • *note matrix-column-dimension: ❨345❩. (method).
        • *note matrix-dimensions: ❨157❩. (method).
        • *note matrix-element-type: ❨349❩. (method).
        • *note matrix-in-bounds-p: ❨309❩. (method).
        • *note matrix-row-dimension: ❨234❩. (method).
        • *note mref: ❨176❩. (method).
        • *note (setf mref): ❨182❩. (method).
        • *note permutation-matrix: ❨317❩. (class).
        • *note permutation-matrix-p: ❨207❩. (function).
        • *note transpose: ❨154❩. (method).
*Internals*
        • *note %initialize-permutation-matrix-with-seq: ❨380❩.
          (function).
        • *note contents: ❨385❩. (reader method).
        • *note (setf contents): ❨390❩. (writer method).
        • *note initialize-matrix-contents: ❨411❩. (method).
        • *note initialize-matrix-contents: ❨412❩. (method).
        • *note initialize-matrix-contents: ❨413❩. (method).


File: linear-algebra.info,  Node: The linear-algebra/sequence/list․lisp file,  Next: The linear-algebra/sequence/vector․lisp file,  Prev: The linear-algebra/interface/permutation-matrix․lisp file,  Up: Lisp files

3.1.18 linear-algebra/sequence/list.lisp
----------------------------------------

*Source*
     *note linear-algebra.asd: ❨5❩.
*Parent Component*
     *note sequence: ❨4❩. (module).
*Public Interface*
        • *note add: ❨295❩. (method).
        • *note nadd: ❨169❩. (method).
        • *note norm: ❨325❩. (method).
        • *note nscale: ❨271❩. (method).
        • *note nsubtract: ❨362❩. (method).
        • *note ntranspose: ❨336❩. (method).
        • *note permute: ❨256❩. (method).
        • *note permute: ❨257❩. (method).
        • *note product: ❨377❩. (method).
        • *note scale: ❨190❩. (method).
        • *note subtract: ❨229❩. (method).
        • *note transpose: ❨153❩. (method).
*Internals*
        • *note %norm: ❨394❩. (method).
        • *note %norm: ❨395❩. (method).
        • *note %norm: ❨396❩. (method).
        • *note %norm: ❨397❩. (method).


File: linear-algebra.info,  Node: The linear-algebra/sequence/vector․lisp file,  Next: The linear-algebra/sequence/array․lisp file,  Prev: The linear-algebra/sequence/list․lisp file,  Up: Lisp files

3.1.19 linear-algebra/sequence/vector.lisp
------------------------------------------

*Source*
     *note linear-algebra.asd: ❨5❩.
*Parent Component*
     *note sequence: ❨4❩. (module).
*Public Interface*
        • *note add: ❨294❩. (method).
        • *note nadd: ❨168❩. (method).
        • *note norm: ❨324❩. (method).
        • *note nscale: ❨270❩. (method).
        • *note nsubtract: ❨361❩. (method).
        • *note ntranspose: ❨335❩. (method).
        • *note permute: ❨254❩. (method).
        • *note permute: ❨255❩. (method).
        • *note product: ❨376❩. (method).
        • *note scale: ❨189❩. (method).
        • *note subtract: ❨228❩. (method).
        • *note transpose: ❨152❩. (method).


File: linear-algebra.info,  Node: The linear-algebra/sequence/array․lisp file,  Next: The linear-algebra/data-vector․lisp file,  Prev: The linear-algebra/sequence/vector․lisp file,  Up: Lisp files

3.1.20 linear-algebra/sequence/array.lisp
-----------------------------------------

*Source*
     *note linear-algebra.asd: ❨5❩.
*Parent Component*
     *note sequence: ❨4❩. (module).
*Public Interface*
        • *note add: ❨293❩. (method).
        • *note compatible-dimensions-p: ❨96❩. (method).
        • *note invert: ❨342❩. (method).
        • *note nadd: ❨167❩. (method).
        • *note ninvert: ❨279❩. (method).
        • *note norm: ❨323❩. (method).
        • *note nscale: ❨269❩. (method).
        • *note nsolve: ❨305❩. (method).
        • *note nsubtract: ❨360❩. (method).
        • *note ntranspose: ❨334❩. (method).
        • *note permute: ❨252❩. (method).
        • *note permute: ❨253❩. (method).
        • *note product: ❨373❩. (method).
        • *note product: ❨374❩. (method).
        • *note product: ❨375❩. (method).
        • *note scale: ❨188❩. (method).
        • *note solve: ❨205❩. (method).
        • *note subtract: ❨227❩. (method).
        • *note transpose: ❨151❩. (method).


File: linear-algebra.info,  Node: The linear-algebra/data-vector․lisp file,  Next: The linear-algebra/dense-matrix․lisp file,  Prev: The linear-algebra/sequence/array․lisp file,  Up: Lisp files

3.1.21 linear-algebra/data-vector.lisp
--------------------------------------

*Dependency*
     *note interface: ❨3❩. (module).
*Source*
     *note linear-algebra.asd: ❨5❩.
*Parent Component*
     *note linear-algebra: ❨1❩. (system).
*Public Interface*
        • *note add: ❨290❩. (method).
        • *note add: ❨291❩. (method).
        • *note add: ❨292❩. (method).
        • *note apply-rotation: ❨262❩. (method).
        • *note apply-rotation: ❨263❩. (method).
        • *note column-vector: ❨195❩. (function).
        • *note column-vector: ❨196❩. (class).
        • *note column-vector-p: ❨285❩. (function).
        • *note copy-vector: ❨220❩. (method).
        • *note data-vector: ❨183❩. (class).
        • *note initialize-instance: ❨436❩. (method).
        • *note map-into-vector: ❨312❩. (method).
        • *note map-into-vector: ❨313❩. (method).
        • *note map-vector: ❨198❩. (method).
        • *note map-vector: ❨199❩. (method).
        • *note nadd: ❨164❩. (method).
        • *note nadd: ❨165❩. (method).
        • *note nadd: ❨166❩. (method).
        • *note napply-rotation: ❨327❩. (method).
        • *note napply-rotation: ❨328❩. (method).
        • *note norm: ❨322❩. (method).
        • *note nscale: ❨268❩. (method).
        • *note nsubtract: ❨357❩. (method).
        • *note nsubtract: ❨358❩. (method).
        • *note nsubtract: ❨359❩. (method).
        • *note ntranspose: ❨332❩. (method).
        • *note ntranspose: ❨333❩. (method).
        • *note permute: ❨248❩. (method).
        • *note permute: ❨249❩. (method).
        • *note permute: ❨250❩. (method).
        • *note permute: ❨251❩. (method).
        • *note product: ❨371❩. (method).
        • *note product: ❨372❩. (method).
        • *note replace-vector: ❨299❩. (method).
        • *note row-vector: ❨272❩. (function).
        • *note row-vector: ❨273❩. (class).
        • *note row-vector-p: ❨206❩. (function).
        • *note scale: ❨187❩. (method).
        • *note subtract: ❨224❩. (method).
        • *note subtract: ❨225❩. (method).
        • *note subtract: ❨226❩. (method).
        • *note subvector: ❨237❩. (method).
        • *note (setf subvector): ❨239❩. (method).
        • *note transpose: ❨149❩. (method).
        • *note transpose: ❨150❩. (method).
        • *note vector-element-type: ❨265❩. (method).
        • *note vector-in-bounds-p: ❨231❩. (method).
        • *note vector-length: ❨297❩. (method).
        • *note vref: ❨171❩. (method).
        • *note (setf vref): ❨173❩. (method).
*Internals*
        • *note %map-data-vector: ❨379❩. (function).
        • *note %map-into-data-vector: ❨421❩. (function).
        • *note contents: ❨384❩. (reader method).
        • *note (setf contents): ❨389❩. (writer method).


File: linear-algebra.info,  Node: The linear-algebra/dense-matrix․lisp file,  Next: The linear-algebra/square-matrix․lisp file,  Prev: The linear-algebra/data-vector․lisp file,  Up: Lisp files

3.1.22 linear-algebra/dense-matrix.lisp
---------------------------------------

*Dependency*
     *note data-vector.lisp: ❨25❩. (file).
*Source*
     *note linear-algebra.asd: ❨5❩.
*Parent Component*
     *note linear-algebra: ❨1❩. (system).
*Public Interface*
        • *note add: ❨288❩. (method).
        • *note add: ❨289❩. (method).
        • *note compatible-dimensions-p: ❨95❩. (method).
        • *note copy-matrix: ❨281❩. (method).
        • *note dense-matrix: ❨315❩. (class).
        • *note dense-matrix-p: ❨241❩. (function).
        • *note initialize-instance: ❨443❩. (method).
        • *note invert: ❨341❩. (method).
        • *note matrix-column-dimension: ❨344❩. (method).
        • *note matrix-dimensions: ❨156❩. (method).
        • *note matrix-element-type: ❨348❩. (method).
        • *note matrix-in-bounds-p: ❨308❩. (method).
        • *note matrix-row-dimension: ❨233❩. (method).
        • *note mref: ❨175❩. (method).
        • *note (setf mref): ❨181❩. (method).
        • *note nadd: ❨162❩. (method).
        • *note nadd: ❨163❩. (method).
        • *note ninvert: ❨278❩. (method).
        • *note norm: ❨321❩. (method).
        • *note nscale: ❨267❩. (method).
        • *note nsolve: ❨303❩. (method).
        • *note nsolve: ❨304❩. (method).
        • *note nsubtract: ❨355❩. (method).
        • *note nsubtract: ❨356❩. (method).
        • *note ntranspose: ❨331❩. (method).
        • *note permute: ❨246❩. (method).
        • *note permute: ❨247❩. (method).
        • *note product: ❨365❩. (method).
        • *note product: ❨366❩. (method).
        • *note product: ❨367❩. (method).
        • *note product: ❨368❩. (method).
        • *note product: ❨369❩. (method).
        • *note product: ❨370❩. (method).
        • *note replace-matrix: ❨145❩. (method).
        • *note scale: ❨186❩. (method).
        • *note solve: ❨203❩. (method).
        • *note solve: ❨204❩. (method).
        • *note submatrix: ❨212❩. (method).
        • *note (setf submatrix): ❨218❩. (method).
        • *note subtract: ❨222❩. (method).
        • *note subtract: ❨223❩. (method).
        • *note transpose: ❨148❩. (method).
*Internals*
        • *note contents: ❨383❩. (reader method).
        • *note (setf contents): ❨388❩. (writer method).
        • *note initialize-matrix-contents: ❨407❩. (method).
        • *note initialize-matrix-contents: ❨408❩. (method).
        • *note initialize-matrix-contents: ❨409❩. (method).
        • *note initialize-matrix-contents: ❨410❩. (method).


File: linear-algebra.info,  Node: The linear-algebra/square-matrix․lisp file,  Next: The linear-algebra/hermitian-matrix․lisp file,  Prev: The linear-algebra/dense-matrix․lisp file,  Up: Lisp files

3.1.23 linear-algebra/square-matrix.lisp
----------------------------------------

*Dependency*
     *note dense-matrix.lisp: ❨26❩. (file).
*Source*
     *note linear-algebra.asd: ❨5❩.
*Parent Component*
     *note linear-algebra: ❨1❩. (system).
*Public Interface*
        • *note compatible-dimensions-p: ❨94❩. (method).
        • *note invert: ❨340❩. (method).
        • *note ninvert: ❨277❩. (method).
        • *note square-matrix: ❨240❩. (class).
        • *note square-matrix-p: ❨260❩. (function).
        • *note submatrix: ❨211❩. (method).
*Internals*
     *note initialize-matrix-contents: ❨406❩. (method).


File: linear-algebra.info,  Node: The linear-algebra/hermitian-matrix․lisp file,  Next: The linear-algebra/symmetric-matrix․lisp file,  Prev: The linear-algebra/square-matrix․lisp file,  Up: Lisp files

3.1.24 linear-algebra/hermitian-matrix.lisp
-------------------------------------------

*Dependency*
     *note square-matrix.lisp: ❨27❩. (file).
*Source*
     *note linear-algebra.asd: ❨5❩.
*Parent Component*
     *note linear-algebra: ❨1❩. (system).
*Public Interface*
        • *note hermitian-matrix: ❨363❩. (class).
        • *note hermitian-matrix-p: ❨259❩. (function).
        • *note invert: ❨339❩. (method).
        • *note (setf mref): ❨180❩. (method).
        • *note ninvert: ❨276❩. (method).
        • *note nsolve: ❨302❩. (method).
        • *note ntranspose: ❨330❩. (method).
        • *note permute: ❨244❩. (method).
        • *note permute: ❨245❩. (method).
        • *note replace-matrix: ❨143❩. (method).
        • *note replace-matrix: ❨144❩. (method).
        • *note solve: ❨202❩. (method).
        • *note submatrix: ❨210❩. (method).
        • *note (setf submatrix): ❨216❩. (method).
        • *note (setf submatrix): ❨217❩. (method).
        • *note transpose: ❨147❩. (method).
*Internals*
        • *note %initialize-hermitian-matrix-with-seq: ❨422❩.
          (function).
        • *note %replace-hermitian-matrix-off-diagonal: ❨391❩.
          (function).
        • *note %replace-hermitian-matrix-on-diagonal: ❨378❩.
          (function).
        • *note %setf-hermitian-submatrix-off-diagonal: ❨419❩.
          (function).
        • *note %setf-hermitian-submatrix-on-diagonal: ❨392❩.
          (function).
        • *note initialize-matrix-contents: ❨402❩. (method).
        • *note initialize-matrix-contents: ❨403❩. (method).
        • *note initialize-matrix-contents: ❨404❩. (method).
        • *note initialize-matrix-contents: ❨405❩. (method).


File: linear-algebra.info,  Node: The linear-algebra/symmetric-matrix․lisp file,  Prev: The linear-algebra/hermitian-matrix․lisp file,  Up: Lisp files

3.1.25 linear-algebra/symmetric-matrix.lisp
-------------------------------------------

*Dependency*
     *note square-matrix.lisp: ❨27❩. (file).
*Source*
     *note linear-algebra.asd: ❨5❩.
*Parent Component*
     *note linear-algebra: ❨1❩. (system).
*Public Interface*
        • *note invert: ❨338❩. (method).
        • *note (setf mref): ❨179❩. (method).
        • *note nadd: ❨160❩. (method).
        • *note nadd: ❨161❩. (method).
        • *note ninvert: ❨275❩. (method).
        • *note nsolve: ❨301❩. (method).
        • *note nsubtract: ❨353❩. (method).
        • *note nsubtract: ❨354❩. (method).
        • *note replace-matrix: ❨141❩. (method).
        • *note replace-matrix: ❨142❩. (method).
        • *note solve: ❨201❩. (method).
        • *note submatrix: ❨209❩. (method).
        • *note (setf submatrix): ❨214❩. (method).
        • *note (setf submatrix): ❨215❩. (method).
        • *note symmetric-matrix: ❨314❩. (class).
        • *note symmetric-matrix-p: ❨286❩. (function).
*Internals*
        • *note %initialize-symmetric-matrix-with-seq: ❨417❩.
          (function).
        • *note %replace-symmetric-matrix-off-diagonal: ❨381❩.
          (function).
        • *note %replace-symmetric-matrix-on-diagonal: ❨414❩.
          (function).
        • *note %setf-symmetric-submatrix-off-diagonal: ❨418❩.
          (function).
        • *note %setf-symmetric-submatrix-on-diagonal: ❨420❩.
          (function).
        • *note initialize-matrix-contents: ❨399❩. (method).
        • *note initialize-matrix-contents: ❨400❩. (method).
        • *note initialize-matrix-contents: ❨401❩. (method).


File: linear-algebra.info,  Node: Packages,  Next: Definitions,  Prev: Files,  Up: Top

4 Packages
**********

Packages are listed by definition order.

* Menu:

* The linear-algebra-kernel package::
* The linear-algebra package::


File: linear-algebra.info,  Node: The linear-algebra-kernel package,  Next: The linear-algebra package,  Prev: Packages,  Up: Packages

4.1 linear-algebra-kernel
=========================

*Source*
     *note pkgdcl.lisp: ❨7❩.
*Use List*
        • common-lisp.
        • floating-point.
*Used By List*
     *note linear-algebra: ❨31❩.
*Public Interface*
        • *note add-array: ❨40❩. (function).
        • *note add-vector: ❨58❩. (function).
        • *note common-array-element-type: ❨38❩. (function).
        • *note common-class-of: ❨46❩. (function).
        • *note compatible-dimensions-p: ❨93❩. (generic function).
        • *note complex-equal: ❨107❩. (function).
        • *note conjugate-gradient-solver: ❨68❩. (function).
        • *note copy-array: ❨90❩. (generic function).
        • *note gauss-invert: ❨86❩. (function).
        • *note gauss-solver: ❨89❩. (function).
        • *note givens-rotation: ❨64❩. (function).
        • *note hermitian-cholesky-decomposition: ❨109❩. (function).
        • *note hermitian-cholesky-invert: ❨39❩. (function).
        • *note hermitian-cholesky-solver: ❨87❩. (function).
        • *note householder-reflection: ❨85❩. (function).
        • *note inner-product-vector: ❨41❩. (function).
        • *note jacobi-rotation: ❨104❩. (function).
        • *note left-permute: ❨47❩. (generic function).
        • *note nadd-array: ❨66❩. (function).
        • *note nadd-vector: ❨35❩. (function).
        • *note norm-array: ❨78❩. (generic function).
        • *note norm-vector: ❨59❩. (generic function).
        • *note nsubtract-array: ❨37❩. (function).
        • *note nsubtract-vector: ❨67❩. (function).
        • *note number-equal: ❨111❩. (function).
        • *note product-array-array: ❨105❩. (function).
        • *note product-array-vector: ❨69❩. (function).
        • *note product-vector-array: ❨71❩. (function).
        • *note right-permute: ❨32❩. (generic function).
        • *note root-free-hermitian-cholesky-decomposition: ❨106❩.
          (function).
        • *note root-free-symmetric-cholesky-decomposition: ❨73❩.
          (function).
        • *note scaled-binary-op: ❨50❩. (generic function).
        • *note specific-array-element-type: ❨88❩. (function).
        • *note subtract-array: ❨70❩. (function).
        • *note subtract-vector: ❨84❩. (function).
        • *note sump: ❨42❩. (generic function).
        • *note sumsq: ❨74❩. (generic function).
        • *note sumsq-column: ❨103❩. (function).
        • *note sumsq-row: ❨108❩. (function).
        • *note sumsq2: ❨72❩. (function).
        • *note sumsq3: ❨83❩. (function).
        • *note symmetric-cholesky-decomposition: ❨110❩. (function).
        • *note symmetric-cholesky-invert: ❨65❩. (function).
        • *note symmetric-cholesky-solver: ❨102❩. (function).
        • *note tridiagonal-solver: ❨36❩. (function).
*Internals*
        • *note %abs-vector: ❨133❩. (function).
        • *note %array1<-array1-op-array2: ❨120❩. (function).
        • *note %array<-array1-op-array2: ❨122❩. (function).
        • *note %default-cg-epsilon: ❨123❩. (function).
        • *note %initialize-cg-residual: ❨125❩. (function).
        • *note %initialize-cg-solution: ❨119❩. (function).
        • *note %negative-residual: ❨137❩. (function).
        • *note %product-array-array: ❨129❩. (function).
        • *note %product-array-vector: ❨138❩. (function).
        • *note %product-vector-array: ❨128❩. (function).
        • *note %scaled-product-array-array: ❨117❩. (function).
        • *note %scaled-product-array-vector: ❨135❩. (function).
        • *note %scaled-product-vector-array: ❨127❩. (function).
        • *note %vector1<-vector1-op-vector2: ❨113❩. (function).
        • *note %vector<-vector1-op-vector2: ❨118❩. (function).
        • *note column-pivot: ❨131❩. (function).
        • *note column-pivot-search: ❨130❩. (function).
        • *note gauss-backsubstitution: ❨136❩. (function).
        • *note gauss-factorization: ❨134❩. (function).
        • *note gauss-update: ❨132❩. (function).
        • *note initialize-pivot-selection-vector: ❨116❩. (function).
        • *note swap-rows: ❨126❩. (function).
        • *note tridiagonal-backsubstitution: ❨112❩. (function).
        • *note tridiagonal-factorization: ❨114❩. (function).
        • *note tridiagonal-update: ❨121❩. (function).
        • *note unit-pivot-value: ❨124❩. (function).
        • *note zero-array: ❨115❩. (function).
        • *note zero-vector: ❨139❩. (function).


File: linear-algebra.info,  Node: The linear-algebra package,  Prev: The linear-algebra-kernel package,  Up: Packages

4.2 linear-algebra
==================

*Source*
     *note pkgdcl.lisp: ❨6❩.
*Use List*
        • common-lisp.
        • floating-point.
        • *note linear-algebra-kernel: ❨30❩.
*Public Interface*
        • *note add: ❨287❩. (generic function).
        • *note apply-rotation: ❨261❩. (generic function).
        • *note column-vector: ❨195❩. (function).
        • *note column-vector: ❨196❩. (class).
        • *note column-vector-p: ❨285❩. (function).
        • *note copy-matrix: ❨280❩. (generic function).
        • *note copy-vector: ❨219❩. (generic function).
        • *note data-vector: ❨183❩. (class).
        • *note dense-matrix: ❨315❩. (class).
        • *note dense-matrix-p: ❨241❩. (function).
        • *note dovector: ❨319❩. (macro).
        • *note hermitian-matrix: ❨363❩. (class).
        • *note hermitian-matrix-p: ❨259❩. (function).
        • *note identity-matrix: ❨191❩. (class).
        • *note identity-matrix-p: ❨194❩. (function).
        • *note invert: ❨337❩. (generic function).
        • *note make-matrix: ❨284❩. (function).
        • *note make-vector: ❨351❩. (function).
        • *note map-into-vector: ❨311❩. (generic function).
        • *note map-vector: ❨197❩. (generic function).
        • *note matrix-column-dimension: ❨343❩. (generic function).
        • *note matrix-dimensions: ❨155❩. (generic function).
        • *note matrix-element-type: ❨347❩. (generic function).
        • *note matrix-in-bounds-p: ❨307❩. (generic function).
        • *note matrix-object: ❨242❩. (class).
        • *note matrix-row-dimension: ❨232❩. (generic function).
        • *note matrix-validated-range: ❨258❩. (function).
        • *note matrixp: ❨306❩. (function).
        • *note mref: ❨174❩. (generic function).
        • *note (setf mref): ❨178❩. (generic function).
        • *note nadd: ❨159❩. (generic function).
        • *note napply-rotation: ❨326❩. (generic function).
        • *note ninvert: ❨274❩. (generic function).
        • *note norm: ❨320❩. (generic function).
        • *note nscale: ❨266❩. (generic function).
        • *note nsolve: ❨300❩. (generic function).
        • *note nsubtract: ❨352❩. (generic function).
        • *note ntranspose: ❨329❩. (generic function).
        • *note permutation-matrix: ❨317❩. (class).
        • *note permutation-matrix-p: ❨207❩. (function).
        • *note permute: ❨243❩. (generic function).
        • *note product: ❨364❩. (generic function).
        • *note replace-matrix: ❨140❩. (generic function).
        • *note replace-vector: ❨298❩. (generic function).
        • *note row-vector: ❨272❩. (function).
        • *note row-vector: ❨273❩. (class).
        • *note row-vector-p: ❨206❩. (function).
        • *note scale: ❨185❩. (generic function).
        • *note solve: ❨200❩. (generic function).
        • *note square-matrix: ❨240❩. (class).
        • *note square-matrix-p: ❨260❩. (function).
        • *note submatrix: ❨208❩. (generic function).
        • *note (setf submatrix): ❨213❩. (generic function).
        • *note subtract: ❨221❩. (generic function).
        • *note subvector: ❨236❩. (generic function).
        • *note (setf subvector): ❨238❩. (generic function).
        • *note symmetric-matrix: ❨314❩. (class).
        • *note symmetric-matrix-p: ❨286❩. (function).
        • *note transpose: ❨146❩. (generic function).
        • *note vector-element-type: ❨264❩. (generic function).
        • *note vector-in-bounds-p: ❨230❩. (generic function).
        • *note vector-length: ❨296❩. (generic function).
        • *note vref: ❨170❩. (generic function).
        • *note (setf vref): ❨172❩. (generic function).
*Internals*
        • *note %initialize-hermitian-matrix-with-seq: ❨422❩.
          (function).
        • *note %initialize-permutation-matrix-with-seq: ❨380❩.
          (function).
        • *note %initialize-symmetric-matrix-with-seq: ❨417❩.
          (function).
        • *note %map-data-vector: ❨379❩. (function).
        • *note %map-into-data-vector: ❨421❩. (function).
        • *note %norm: ❨393❩. (generic function).
        • *note %replace-hermitian-matrix-off-diagonal: ❨391❩.
          (function).
        • *note %replace-hermitian-matrix-on-diagonal: ❨378❩.
          (function).
        • *note %replace-symmetric-matrix-off-diagonal: ❨381❩.
          (function).
        • *note %replace-symmetric-matrix-on-diagonal: ❨414❩.
          (function).
        • *note %setf-hermitian-submatrix-off-diagonal: ❨419❩.
          (function).
        • *note %setf-hermitian-submatrix-on-diagonal: ❨392❩.
          (function).
        • *note %setf-symmetric-submatrix-off-diagonal: ❨418❩.
          (function).
        • *note %setf-symmetric-submatrix-on-diagonal: ❨420❩.
          (function).
        • *note contents: ❨382❩. (generic reader).
        • *note (setf contents): ❨387❩. (generic writer).
        • *note initialize-matrix-contents: ❨398❩. (generic function).
        • *note size: ❨415❩. (generic reader).


File: linear-algebra.info,  Node: Definitions,  Next: Indexes,  Prev: Packages,  Up: Top

5 Definitions
*************

Definitions are sorted by export status, category, package, and then by
lexicographic order.

* Menu:

* Public Interface::
* Internals::


File: linear-algebra.info,  Node: Public Interface,  Next: Internals,  Prev: Definitions,  Up: Definitions

5.1 Public Interface
====================

* Menu:

* Public macros::
* Public ordinary functions::
* Public generic functions::
* Public standalone methods::
* Public classes::


File: linear-algebra.info,  Node: Public macros,  Next: Public ordinary functions,  Prev: Public Interface,  Up: Public Interface

5.1.1 Macros
------------

 -- Macro: dovector ((element vector &optional result) &body body)
     Iterate over vector returning result.
     *Package*
          *note linear-algebra: ❨31❩.
     *Source*
          *note vector.lisp: ❨18❩.


File: linear-algebra.info,  Node: Public ordinary functions,  Next: Public generic functions,  Prev: Public macros,  Up: Public Interface

5.1.2 Ordinary functions
------------------------

 -- Function: add-array (array1 array2 scalar1 scalar2)
     Array binary addition.
     *Package*
          *note linear-algebra-kernel: ❨30❩.
     *Source*
          *note binary-operations.lisp: ❨11❩.
 -- Function: add-vector (vector1 vector2 scalar1 scalar2)
     Vector binary addition.
     *Package*
          *note linear-algebra-kernel: ❨30❩.
     *Source*
          *note binary-operations.lisp: ❨11❩.
 -- Function: column-vector (&rest numbers)
     Create a column vector from the numbers.
     *Package*
          *note linear-algebra: ❨31❩.
     *Source*
          *note data-vector.lisp: ❨25❩.
 -- Function: column-vector-p (object)
     Return true if object is a column-vector, NIL otherwise.
     *Package*
          *note linear-algebra: ❨31❩.
     *Source*
          *note data-vector.lisp: ❨25❩.
 -- Function: common-array-element-type (array1 array2)
     Return the array type common to both arrays.
     *Package*
          *note linear-algebra-kernel: ❨30❩.
     *Source*
          *note utility.lisp: ❨8❩.
 -- Function: common-class-of (object1 object2)
     Return the common class of the 2 objects or default-class.
     *Package*
          *note linear-algebra-kernel: ❨30❩.
     *Source*
          *note utility.lisp: ❨8❩.
 -- Function: complex-equal (complex1 complex2 &optional epsilon)
     Return true if both numbers are complex and equal.
     *Package*
          *note linear-algebra-kernel: ❨30❩.
     *Source*
          *note utility.lisp: ❨8❩.
 -- Function: conjugate-gradient-solver (array vector &optional epsilon
          limit)
     Linear system solver using the conjugate gradient method.
     *Package*
          *note linear-algebra-kernel: ❨30❩.
     *Source*
          *note conjugate-gradient.lisp: ❨15❩.
 -- Function: dense-matrix-p (object)
     Return true if object is a dense matrix.
     *Package*
          *note linear-algebra: ❨31❩.
     *Source*
          *note dense-matrix.lisp: ❨26❩.
 -- Function: gauss-invert (array)
     Find A^-1 via Gauss algorithm with partial column pivot search.
     *Package*
          *note linear-algebra-kernel: ❨30❩.
     *Source*
          *note gauss.lisp: ❨13❩.
 -- Function: gauss-solver (array vector)
     Gauss algorithm with column pivot search.
     *Package*
          *note linear-algebra-kernel: ❨30❩.
     *Source*
          *note gauss.lisp: ❨13❩.
 -- Function: givens-rotation (f g)
     Return c,s,r defined from the Givens rotation.
     *Package*
          *note linear-algebra-kernel: ❨30❩.
     *Source*
          *note rotation.lisp: ❨12❩.
 -- Function: hermitian-cholesky-decomposition (array)
     Factor A = LL^T.
     *Package*
          *note linear-algebra-kernel: ❨30❩.
     *Source*
          *note cholesky.lisp: ❨14❩.
 -- Function: hermitian-cholesky-invert (array)
     Invert a positive definite matrices using the root-free Cholesky
     decomposition.
     *Package*
          *note linear-algebra-kernel: ❨30❩.
     *Source*
          *note cholesky.lisp: ❨14❩.
 -- Function: hermitian-cholesky-solver (array vector)
     Linear system solver for positive definite matrices using the
     root-free Cholesky decomposition.
     *Package*
          *note linear-algebra-kernel: ❨30❩.
     *Source*
          *note cholesky.lisp: ❨14❩.
 -- Function: hermitian-matrix-p (object)
     Return true if object is a hermitian-matrix, NIL otherwise.
     *Package*
          *note linear-algebra: ❨31❩.
     *Source*
          *note hermitian-matrix.lisp: ❨28❩.
 -- Function: householder-reflection (alpha vector)
     Return Beta, Tau and the Householder vector.
     *Package*
          *note linear-algebra-kernel: ❨30❩.
     *Source*
          *note rotation.lisp: ❨12❩.
 -- Function: identity-matrix-p (object)
     Return true if object is an identity-matrix.
     *Package*
          *note linear-algebra: ❨31❩.
     *Source*
          *note identity-matrix.lisp: ❨20❩.
 -- Function: inner-product-vector (vector1 vector2 scalar)
     Return the vector inner product.
     *Package*
          *note linear-algebra-kernel: ❨30❩.
     *Source*
          *note binary-operations.lisp: ❨11❩.
 -- Function: jacobi-rotation (x y z)
     Return a, b, cos(theta) and sin(theta) terms from the Jacobi
     rotation.
     *Package*
          *note linear-algebra-kernel: ❨30❩.
     *Source*
          *note rotation.lisp: ❨12❩.
 -- Function: make-matrix (rows columns &key matrix-type element-type
          initial-element initial-contents)
     Return a new matrix instance.
     *Package*
          *note linear-algebra: ❨31❩.
     *Source*
          *note matrix.lisp: ❨19❩.
 -- Function: make-vector (size &key vector-type element-type
          initial-element initial-contents)
     Create the data structure to represent a vector.
     *Package*
          *note linear-algebra: ❨31❩.
     *Source*
          *note vector.lisp: ❨18❩.
 -- Function: matrix-validated-range (matrix start-row start-column
          &optional end-row end-column)
     Returns a validated range of rows and columns for the matrix.
     *Package*
          *note linear-algebra: ❨31❩.
     *Source*
          *note matrix.lisp: ❨19❩.
 -- Function: matrixp (object)
     Return true if object is a matrix, NIL otherwise.
     *Package*
          *note linear-algebra: ❨31❩.
     *Source*
          *note matrix.lisp: ❨19❩.
 -- Function: nadd-array (array1 array2 scalar1 scalar2)
     Destructive array binary addition.
     *Package*
          *note linear-algebra-kernel: ❨30❩.
     *Source*
          *note binary-operations.lisp: ❨11❩.
 -- Function: nadd-vector (vector1 vector2 scalar1 scalar2)
     Destructive vector binary addition.
     *Package*
          *note linear-algebra-kernel: ❨30❩.
     *Source*
          *note binary-operations.lisp: ❨11❩.
 -- Function: nsubtract-array (array1 array2 scalar1 scalar2)
     Destructive array binary subtraction.
     *Package*
          *note linear-algebra-kernel: ❨30❩.
     *Source*
          *note binary-operations.lisp: ❨11❩.
 -- Function: nsubtract-vector (vector1 vector2 scalar1 scalar2)
     Destructive vector binary subtraction.
     *Package*
          *note linear-algebra-kernel: ❨30❩.
     *Source*
          *note binary-operations.lisp: ❨11❩.
 -- Function: number-equal (number1 number2 &optional epsilon)
     Return true if the numbers are equal using the appropriate
     comparison.
     *Package*
          *note linear-algebra-kernel: ❨30❩.
     *Source*
          *note utility.lisp: ❨8❩.
 -- Function: permutation-matrix-p (object)
     Return true if object is a permutation-matrix.
     *Package*
          *note linear-algebra: ❨31❩.
     *Source*
          *note permutation-matrix.lisp: ❨21❩.
 -- Function: product-array-array (array1 array2 &optional scalar
          result)
     Return the scaled result of the product of 2 arrays.
     *Package*
          *note linear-algebra-kernel: ❨30❩.
     *Source*
          *note binary-operations.lisp: ❨11❩.
 -- Function: product-array-vector (array vector &optional scalar
          result)
     Return the result of the array postmultiplied by the vector and
     scaled.
     *Package*
          *note linear-algebra-kernel: ❨30❩.
     *Source*
          *note binary-operations.lisp: ❨11❩.
 -- Function: product-vector-array (vector array &optional scalar
          result)
     Return the result of the array premultiplied by the vector and
     scaled.
     *Package*
          *note linear-algebra-kernel: ❨30❩.
     *Source*
          *note binary-operations.lisp: ❨11❩.
 -- Function: root-free-hermitian-cholesky-decomposition (array)
     Factor A = LDL^t.
     *Package*
          *note linear-algebra-kernel: ❨30❩.
     *Source*
          *note cholesky.lisp: ❨14❩.
 -- Function: root-free-symmetric-cholesky-decomposition (array)
     Factor A = LDL^t.
     *Package*
          *note linear-algebra-kernel: ❨30❩.
     *Source*
          *note cholesky.lisp: ❨14❩.
 -- Function: row-vector (&rest numbers)
     Create a row vector from the numbers.
     *Package*
          *note linear-algebra: ❨31❩.
     *Source*
          *note data-vector.lisp: ❨25❩.
 -- Function: row-vector-p (object)
     Return true if object is a row-vector, NIL otherwise.
     *Package*
          *note linear-algebra: ❨31❩.
     *Source*
          *note data-vector.lisp: ❨25❩.
 -- Function: specific-array-element-type (array &rest subscripts)
     Return the specific type of the element specified by subscripts.
     *Package*
          *note linear-algebra-kernel: ❨30❩.
     *Source*
          *note utility.lisp: ❨8❩.
 -- Function: square-matrix-p (object)
     Return true if OBJECT is a square matrix.
     *Package*
          *note linear-algebra: ❨31❩.
     *Source*
          *note square-matrix.lisp: ❨27❩.
 -- Function: subtract-array (array1 array2 scalar1 scalar2)
     Array binary subtraction.
     *Package*
          *note linear-algebra-kernel: ❨30❩.
     *Source*
          *note binary-operations.lisp: ❨11❩.
 -- Function: subtract-vector (vector1 vector2 scalar1 scalar2)
     Vector binary subtraction.
     *Package*
          *note linear-algebra-kernel: ❨30❩.
     *Source*
          *note binary-operations.lisp: ❨11❩.
 -- Function: sumsq-column (array column &key scale sumsq start end)
     Return the scaling parameter and the sum of the squares of the
     array column.
     *Package*
          *note linear-algebra-kernel: ❨30❩.
     *Source*
          *note unary-operations.lisp: ❨10❩.
 -- Function: sumsq-row (array row &key scale sumsq start end)
     Return the scaling parameter and the sum of the squares of the
     array row.
     *Package*
          *note linear-algebra-kernel: ❨30❩.
     *Source*
          *note unary-operations.lisp: ❨10❩.
 -- Function: sumsq2 (x y)
     Return the square root of |x|^2 + |y|^2.
     *Package*
          *note linear-algebra-kernel: ❨30❩.
     *Source*
          *note unary-operations.lisp: ❨10❩.
 -- Function: sumsq3 (x y z)
     Return the square root of |x|^2 + |y|^2 + |z|^2.
     *Package*
          *note linear-algebra-kernel: ❨30❩.
     *Source*
          *note unary-operations.lisp: ❨10❩.
 -- Function: symmetric-cholesky-decomposition (array)
     Factor A = LL^T.
     *Package*
          *note linear-algebra-kernel: ❨30❩.
     *Source*
          *note cholesky.lisp: ❨14❩.
 -- Function: symmetric-cholesky-invert (array)
     Invert a positive definite matrices using the root-free Cholesky
     decomposition.
     *Package*
          *note linear-algebra-kernel: ❨30❩.
     *Source*
          *note cholesky.lisp: ❨14❩.
 -- Function: symmetric-cholesky-solver (array vector)
     Linear system solver for positive definite matrices using the
     root-free Cholesky decomposition.
     *Package*
          *note linear-algebra-kernel: ❨30❩.
     *Source*
          *note cholesky.lisp: ❨14❩.
 -- Function: symmetric-matrix-p (object)
     Return true if object is a symmetric-matrix, NIL otherwise.
     *Package*
          *note linear-algebra: ❨31❩.
     *Source*
          *note symmetric-matrix.lisp: ❨29❩.
 -- Function: tridiagonal-solver (array vector)
     Linear equation solver for a tridiagonal matrix.
     *Package*
          *note linear-algebra-kernel: ❨30❩.
     *Source*
          *note tridiagonal.lisp: ❨16❩.


File: linear-algebra.info,  Node: Public generic functions,  Next: Public standalone methods,  Prev: Public ordinary functions,  Up: Public Interface

5.1.3 Generic functions
-----------------------

 -- Generic Function: add (vector-or-matrix-1 vector-or-matrix-2 &key
          scalar1 scalar2)
     Vector or matrix binary addition.
     *Package*
          *note linear-algebra: ❨31❩.
     *Source*
          *note fundamental-ops.lisp: ❨17❩.
     *Methods*
           -- Method: add ((matrix1 *note dense-matrix: ❨315❩.) (matrix2
                    *note dense-matrix: ❨315❩.) &key scalar1 scalar2)
               Return the addition of the 2 matrices.
               *Source*
                    *note dense-matrix.lisp: ❨26❩.
           -- Method: add :before ((matrix1 *note dense-matrix: ❨315❩.)
                    (matrix2 *note dense-matrix: ❨315❩.) &key scalar1
                    scalar2)
               Audit the input data.
               *Source*
                    *note dense-matrix.lisp: ❨26❩.
           -- Method: add ((vector1 *note row-vector: ❨273❩.) (vector2
                    *note row-vector: ❨273❩.) &key scalar1 scalar2)
               Return the addition of scalar1*vector1 with
               scalar2*vector2.
               *Source*
                    *note data-vector.lisp: ❨25❩.
           -- Method: add ((vector1 *note column-vector: ❨196❩.)
                    (vector2 *note column-vector: ❨196❩.) &key scalar1
                    scalar2)
               Return the addition of scalar1*vector1 with
               scalar2*vector2.
               *Source*
                    *note data-vector.lisp: ❨25❩.
           -- Method: add :before ((vector1 *note data-vector: ❨183❩.)
                    (vector2 *note data-vector: ❨183❩.) &key scalar1
                    scalar2)
               Verify that the dimensions are equal.
               *Source*
                    *note data-vector.lisp: ❨25❩.
           -- Method: add ((array1 array) (array2 array) &key scalar1
                    scalar2)
               Return the addition of the 2 arrays.
               *Source*
                    *note array.lisp: ❨24❩.
           -- Method: add ((vector1 vector) (vector2 vector) &key
                    scalar1 scalar2)
               Return the addition of scalar1*vector1 with
               scalar2*vector2
               *Source*
                    *note vector.lisp: ❨23❩.
           -- Method: add ((list1 list) (list2 list) &key scalar1
                    scalar2)
               Return the addition of scalar1*list1 with scalar2*list2
               *Source*
                    *note list.lisp: ❨22❩.
 -- Generic Function: apply-rotation (vector1 vector2 cc ss)
     Return the plane rotations of vector1 and vector2 by cc and ss.
     *Package*
          *note linear-algebra: ❨31❩.
     *Source*
          *note vector.lisp: ❨18❩.
     *Methods*
           -- Method: apply-rotation ((vector1 *note data-vector:
                    ❨183❩.) (vector2 *note data-vector: ❨183❩.) cc ss)
               Return the plane rotations of vector1 and vector2 by cc
               and ss.
               *Source*
                    *note data-vector.lisp: ❨25❩.
           -- Method: apply-rotation :before ((vector1 *note
                    data-vector: ❨183❩.) (vector2 *note data-vector:
                    ❨183❩.) cc ss)
               Verify the input to apply-rotation.
               *Source*
                    *note data-vector.lisp: ❨25❩.
 -- Generic Function: compatible-dimensions-p (operation
          vector-or-matrix-1 vector-or-matrix-2)
     Return true if the vector and matrix dimensions are compatible for
     the operation.
     *Package*
          *note linear-algebra-kernel: ❨30❩.
     *Source*
          *note binary-operations.lisp: ❨11❩.
     *Methods*
           -- Method: compatible-dimensions-p ((operation (eql :solve))
                    (matrix *note square-matrix: ❨240❩.) (vector *note
                    column-vector: ❨196❩.))
               Return true if the array dimensions are compatible for
               product.
               *Source*
                    *note square-matrix.lisp: ❨27❩.
           -- Method: compatible-dimensions-p ((operation (eql :solve))
                    (matrix *note dense-matrix: ❨315❩.) (vector *note
                    column-vector: ❨196❩.))
               Return true if the array dimensions are compatible for
               product.
               *Source*
                    *note dense-matrix.lisp: ❨26❩.
           -- Method: compatible-dimensions-p ((operation (eql :solve))
                    (array array) (vector vector))
               Return true if the array dimensions are compatible for
               product.
               *Source*
                    *note array.lisp: ❨24❩.
           -- Method: compatible-dimensions-p ((operation (eql
                    :product)) (array1 array) (array2 array))
               Return true if the array dimensions are compatible for
               product.
           -- Method: compatible-dimensions-p ((operation (eql :add))
                    (array1 array) (array2 array))
               Return true if the array dimensions are compatible for an
               addition.
           -- Method: compatible-dimensions-p ((operation (eql
                    :product)) (array array) (vector vector))
               Return true if the array dimensions are compatible for
               product.
           -- Method: compatible-dimensions-p ((operation (eql
                    :product)) (vector vector) (array array))
               Return true if the array dimensions are compatible for
               product.
           -- Method: compatible-dimensions-p ((operation (eql :add))
                    (vector1 vector) (vector2 vector))
               Return true if the vector dimensions are compatible for
               an addition.
 -- Generic Function: copy-array (array)
     Return an element-wise copy of the original array.
     *Package*
          *note linear-algebra-kernel: ❨30❩.
     *Source*
          *note utility.lisp: ❨8❩.
     *Methods*
           -- Method: copy-array ((original array))
               Return an element-wise copy of the original array.
           -- Method: copy-array ((original vector))
               Return an element-wise copy of the original vector.
 -- Generic Function: copy-matrix (matrix)
     Return a copy of the matrix.
     *Package*
          *note linear-algebra: ❨31❩.
     *Source*
          *note matrix.lisp: ❨19❩.
     *Methods*
           -- Method: copy-matrix ((matrix *note dense-matrix: ❨315❩.))
               Return a copy of the dense matrix.
               *Source*
                    *note dense-matrix.lisp: ❨26❩.
           -- Method: copy-matrix ((matrix *note permutation-matrix:
                    ❨317❩.))
               Return a copy of the permutation matrix.
               *Source*
                    *note permutation-matrix.lisp: ❨21❩.
           -- Method: copy-matrix ((matrix *note identity-matrix:
                    ❨191❩.))
               Return a copy of the matrix.
               *Source*
                    *note identity-matrix.lisp: ❨20❩.
 -- Generic Function: copy-vector (vector)
     Return a copy of the vector.
     *Package*
          *note linear-algebra: ❨31❩.
     *Source*
          *note vector.lisp: ❨18❩.
     *Methods*
           -- Method: copy-vector ((vector *note data-vector: ❨183❩.))
               Return a copy of the vector.
               *Source*
                    *note data-vector.lisp: ❨25❩.
 -- Generic Function: invert (matrix)
     Return the invert of the matrix.
     *Package*
          *note linear-algebra: ❨31❩.
     *Source*
          *note fundamental-ops.lisp: ❨17❩.
     *Methods*
           -- Method: invert ((matrix *note symmetric-matrix: ❨314❩.))
               Return the invert of the symmetric matrix.
               *Source*
                    *note symmetric-matrix.lisp: ❨29❩.
           -- Method: invert ((matrix *note hermitian-matrix: ❨363❩.))
               Return the invert of the hermitian matrix.
               *Source*
                    *note hermitian-matrix.lisp: ❨28❩.
           -- Method: invert ((matrix *note square-matrix: ❨240❩.))
               Return the invert of the square matrix.
               *Source*
                    *note square-matrix.lisp: ❨27❩.
           -- Method: invert ((matrix *note dense-matrix: ❨315❩.))
               Return the invert of the dense matrix.
               *Source*
                    *note dense-matrix.lisp: ❨26❩.
           -- Method: invert ((array array))
               Return the invert of the array.
               *Source*
                    *note array.lisp: ❨24❩.
 -- Generic Function: left-permute (permutation vector-or-array)
     Permute the column vector or rows of the array.
     *Package*
          *note linear-algebra-kernel: ❨30❩.
     *Source*
          *note permute.lisp: ❨9❩.
     *Methods*
           -- Method: left-permute ((permutation vector) (data array))
               Permute the rows of the array.
           -- Method: left-permute ((permutation vector) (data vector))
               Permute the column vector to create a row vector.
 -- Generic Function: map-into-vector (result-vector function &rest
          vectors)
     Destructively modifies the result vector with the result of
     applying the function to each element of the vectors.
     *Package*
          *note linear-algebra: ❨31❩.
     *Source*
          *note vector.lisp: ❨18❩.
     *Methods*
           -- Method: map-into-vector ((result-vector *note data-vector:
                    ❨183❩.) (function function) &rest vectors)
               Destructively modifies the result vector with the result
               of applying the function to each element of the vectors.
               *Source*
                    *note data-vector.lisp: ❨25❩.
           -- Method: map-into-vector :before ((result-vector *note
                    data-vector: ❨183❩.) (function function) &rest
                    vectors)
               Verify the arguments to map-into-vector.
               *Source*
                    *note data-vector.lisp: ❨25❩.
 -- Generic Function: map-vector (result-type function first-vector
          &rest more-vectors)
     Calls function on successive sets of vector objects.
     *Package*
          *note linear-algebra: ❨31❩.
     *Source*
          *note vector.lisp: ❨18❩.
     *Methods*
           -- Method: map-vector (result-type (function function)
                    (first-vector *note data-vector: ❨183❩.) &rest
                    more-vectors)
               Calls function on successive sets of data vectors.
               *Source*
                    *note data-vector.lisp: ❨25❩.
           -- Method: map-vector :before (result-type (function
                    function) (first-vector *note data-vector: ❨183❩.)
                    &rest more-vectors)
               Verify the arguments to map-vector.
               *Source*
                    *note data-vector.lisp: ❨25❩.
 -- Generic Function: matrix-column-dimension (matrix)
     Return the number of columns in MATRIX.
     *Package*
          *note linear-algebra: ❨31❩.
     *Source*
          *note matrix.lisp: ❨19❩.
     *Methods*
           -- Method: matrix-column-dimension ((matrix *note
                    dense-matrix: ❨315❩.))
               Return the number of columns in matrix.
               *Source*
                    *note dense-matrix.lisp: ❨26❩.
           -- Method: matrix-column-dimension ((matrix *note
                    permutation-matrix: ❨317❩.))
               Return the number of columns in matrix.
               *Source*
                    *note permutation-matrix.lisp: ❨21❩.
           -- Reader Method: matrix-column-dimension ((identity-matrix
                    *note identity-matrix: ❨191❩.))
               automatically generated reader method
               *Source*
                    *note identity-matrix.lisp: ❨20❩.
               *Target Slot*
                    *note size: ❨192❩.
 -- Generic Function: matrix-dimensions (matrix)
     Return the number of rows and columns in MATRIX.
     *Package*
          *note linear-algebra: ❨31❩.
     *Source*
          *note matrix.lisp: ❨19❩.
     *Methods*
           -- Method: matrix-dimensions ((matrix *note dense-matrix:
                    ❨315❩.))
               Return the number of rows and columns in matrix.
               *Source*
                    *note dense-matrix.lisp: ❨26❩.
           -- Method: matrix-dimensions ((matrix *note
                    permutation-matrix: ❨317❩.))
               Return the number of rows and columns in matrix.
               *Source*
                    *note permutation-matrix.lisp: ❨21❩.
           -- Method: matrix-dimensions ((matrix *note identity-matrix:
                    ❨191❩.))
               Return the number of rows and columns in matrix.
               *Source*
                    *note identity-matrix.lisp: ❨20❩.
 -- Generic Function: matrix-element-type (matrix)
     Return the element type of MATRIX.
     *Package*
          *note linear-algebra: ❨31❩.
     *Source*
          *note matrix.lisp: ❨19❩.
     *Methods*
           -- Method: matrix-element-type ((matrix *note dense-matrix:
                    ❨315❩.))
               Return the element type of the matrix.
               *Source*
                    *note dense-matrix.lisp: ❨26❩.
           -- Method: matrix-element-type ((matrix *note
                    permutation-matrix: ❨317❩.))
               Element type of the permutation matrix.
               *Source*
                    *note permutation-matrix.lisp: ❨21❩.
           -- Method: matrix-element-type ((matrix *note
                    identity-matrix: ❨191❩.))
               Return the element type of the identity matrix.
               *Source*
                    *note identity-matrix.lisp: ❨20❩.
 -- Generic Function: matrix-in-bounds-p (matrix row column)
     Return true if ROW and COLUMN do not exceed the dimensions of
     MATRIX.
     *Package*
          *note linear-algebra: ❨31❩.
     *Source*
          *note matrix.lisp: ❨19❩.
     *Methods*
           -- Method: matrix-in-bounds-p ((matrix *note dense-matrix:
                    ❨315❩.) (row integer) (column integer))
               Return true if row and column do not exceed the
               dimensions of matrix.
               *Source*
                    *note dense-matrix.lisp: ❨26❩.
           -- Method: matrix-in-bounds-p ((matrix *note
                    permutation-matrix: ❨317❩.) (row integer) (column
                    integer))
               Return true if row and column do not exceed the
               dimensions of matrix.
               *Source*
                    *note permutation-matrix.lisp: ❨21❩.
           -- Method: matrix-in-bounds-p ((matrix *note identity-matrix:
                    ❨191❩.) (row integer) (column integer))
               Return true if row and column do not exceed the
               dimensions of matrix.
               *Source*
                    *note identity-matrix.lisp: ❨20❩.
 -- Generic Function: matrix-row-dimension (matrix)
     Return the number of rows in MATRIX.
     *Package*
          *note linear-algebra: ❨31❩.
     *Source*
          *note matrix.lisp: ❨19❩.
     *Methods*
           -- Method: matrix-row-dimension ((matrix *note dense-matrix:
                    ❨315❩.))
               Return the number of rows in matrix.
               *Source*
                    *note dense-matrix.lisp: ❨26❩.
           -- Method: matrix-row-dimension ((matrix *note
                    permutation-matrix: ❨317❩.))
               Return the number of rows in matrix.
               *Source*
                    *note permutation-matrix.lisp: ❨21❩.
           -- Reader Method: matrix-row-dimension ((identity-matrix
                    *note identity-matrix: ❨191❩.))
               automatically generated reader method
               *Source*
                    *note identity-matrix.lisp: ❨20❩.
               *Target Slot*
                    *note size: ❨192❩.
 -- Generic Function: mref (matrix row column)
     Return the matrix element at ROW,COLUMN.
     *Package*
          *note linear-algebra: ❨31❩.
     *Source*
          *note matrix.lisp: ❨19❩.
     *Methods*
           -- Method: mref ((matrix *note dense-matrix: ❨315❩.) (row
                    integer) (column integer))
               Return the element of matrix at row,column.
               *Source*
                    *note dense-matrix.lisp: ❨26❩.
           -- Method: mref ((matrix *note permutation-matrix: ❨317❩.)
                    (row integer) (column integer))
               Return 1 if a permutation and 0 otherwise.
               *Source*
                    *note permutation-matrix.lisp: ❨21❩.
           -- Method: mref ((matrix *note identity-matrix: ❨191❩.) (row
                    integer) (column integer))
               Return the element of the matrix at row,column.
               *Source*
                    *note identity-matrix.lisp: ❨20❩.
 -- Generic Function: (setf mref) (matrix row column)
     Set the element at row,column of matrix to data.
     *Package*
          *note linear-algebra: ❨31❩.
     *Source*
          *note matrix.lisp: ❨19❩.
     *Methods*
           -- Method: (setf mref) ((matrix *note symmetric-matrix:
                    ❨314❩.) (row integer) (column integer))
               Set the element of matrix at row,column.
               *Source*
                    *note symmetric-matrix.lisp: ❨29❩.
           -- Method: (setf mref) ((matrix *note hermitian-matrix:
                    ❨363❩.) (row integer) (column integer))
               Set the element at row,column of matrix to data.
               *Source*
                    *note hermitian-matrix.lisp: ❨28❩.
           -- Method: (setf mref) ((matrix *note dense-matrix: ❨315❩.)
                    (row integer) (column integer))
               Set the element of matrix at row,column.
               *Source*
                    *note dense-matrix.lisp: ❨26❩.
           -- Method: (setf mref) ((matrix *note permutation-matrix:
                    ❨317❩.) (row integer) (column integer))
               Swap rows of the permutation matrix.
               *Source*
                    *note permutation-matrix.lisp: ❨21❩.
 -- Generic Function: nadd (vector-or-matrix-1 vector-or-matrix-2 &key
          scalar1 scalar2)
     Destructive vector or matrix addition.
     *Package*
          *note linear-algebra: ❨31❩.
     *Source*
          *note fundamental-ops.lisp: ❨17❩.
     *Methods*
           -- Method: nadd ((matrix1 *note symmetric-matrix: ❨314❩.)
                    (matrix2 *note symmetric-matrix: ❨314❩.) &key
                    scalar1 scalar2)
               *Source*
                    *note symmetric-matrix.lisp: ❨29❩.
           -- Method: nadd ((matrix1 *note symmetric-matrix: ❨314❩.)
                    (matrix2 *note dense-matrix: ❨315❩.) &key scalar1
                    scalar2)
               Generate an error if a non-symmetric matrix is
               destructively added to a symmetric matrix.
               *Source*
                    *note symmetric-matrix.lisp: ❨29❩.
           -- Method: nadd ((matrix1 *note dense-matrix: ❨315❩.)
                    (matrix2 *note dense-matrix: ❨315❩.) &key scalar1
                    scalar2)
               Return the addition of the 2 matrices.
               *Source*
                    *note dense-matrix.lisp: ❨26❩.
           -- Method: nadd :before ((matrix1 *note dense-matrix: ❨315❩.)
                    (matrix2 *note dense-matrix: ❨315❩.) &key scalar1
                    scalar2)
               Audit the input data.
               *Source*
                    *note dense-matrix.lisp: ❨26❩.
           -- Method: nadd ((vector1 *note row-vector: ❨273❩.) (vector2
                    *note row-vector: ❨273❩.) &key scalar1 scalar2)
               Return the addition of scalar2*vector2 to
               scalar1*vector1.
               *Source*
                    *note data-vector.lisp: ❨25❩.
           -- Method: nadd ((vector1 *note column-vector: ❨196❩.)
                    (vector2 *note column-vector: ❨196❩.) &key scalar1
                    scalar2)
               Return the addition of scalar2*vector2 to
               scalar1*vector1.
               *Source*
                    *note data-vector.lisp: ❨25❩.
           -- Method: nadd :before ((vector1 *note data-vector: ❨183❩.)
                    (vector2 *note data-vector: ❨183❩.) &key scalar1
                    scalar2)
               Verify that the dimensions are equal.
               *Source*
                    *note data-vector.lisp: ❨25❩.
           -- Method: nadd ((array1 array) (array2 array) &key scalar1
                    scalar2)
               Destructively add array2 to array1.
               *Source*
                    *note array.lisp: ❨24❩.
           -- Method: nadd ((vector1 vector) (vector2 vector) &key
                    scalar1 scalar2)
               Return the addition of scalar2*vector2 to
               scalar1*vector1.
               *Source*
                    *note vector.lisp: ❨23❩.
           -- Method: nadd ((list1 list) (list2 list) &key scalar1
                    scalar2)
               Return the addition of scalar2*list2 to scalar1*list1.
               *Source*
                    *note list.lisp: ❨22❩.
 -- Generic Function: napply-rotation (vector1 vector2 cc ss)
     Return the plane rotations of vector1 and vector2 by cc and ss.
     *Package*
          *note linear-algebra: ❨31❩.
     *Source*
          *note vector.lisp: ❨18❩.
     *Methods*
           -- Method: napply-rotation ((vector1 *note data-vector:
                    ❨183❩.) (vector2 *note data-vector: ❨183❩.) cc ss)
               Return the plane rotations of vector1 and vector2 by cc
               and ss.
               *Source*
                    *note data-vector.lisp: ❨25❩.
           -- Method: napply-rotation :before ((vector1 *note
                    data-vector: ❨183❩.) (vector2 *note data-vector:
                    ❨183❩.) cc ss)
               Verify the input to napply-rotation.
               *Source*
                    *note data-vector.lisp: ❨25❩.
 -- Generic Function: ninvert (matrix)
     Return the invert of the matrix with in-place decomposition.
     *Package*
          *note linear-algebra: ❨31❩.
     *Source*
          *note fundamental-ops.lisp: ❨17❩.
     *Methods*
           -- Method: ninvert ((matrix *note symmetric-matrix: ❨314❩.))
               Return the invert of the symmetric matrix.
               *Source*
                    *note symmetric-matrix.lisp: ❨29❩.
           -- Method: ninvert ((matrix *note hermitian-matrix: ❨363❩.))
               Return the invert of the hermitian matrix.
               *Source*
                    *note hermitian-matrix.lisp: ❨28❩.
           -- Method: ninvert ((matrix *note square-matrix: ❨240❩.))
               Return the invert of the square matrix.
               *Source*
                    *note square-matrix.lisp: ❨27❩.
           -- Method: ninvert ((matrix *note dense-matrix: ❨315❩.))
               Return the invert of the dense matrix.
               *Source*
                    *note dense-matrix.lisp: ❨26❩.
           -- Method: ninvert ((array array))
               Return the invert of the array.
               *Source*
                    *note array.lisp: ❨24❩.
 -- Generic Function: norm (vector-or-matrix &optional measure)
     Return the norm according to measure.
     *Package*
          *note linear-algebra: ❨31❩.
     *Source*
          *note fundamental-ops.lisp: ❨17❩.
     *Methods*
           -- Method: norm ((matrix *note dense-matrix: ❨315❩.)
                    &optional measure)
               Return the norm of the matrix.
               *Source*
                    *note dense-matrix.lisp: ❨26❩.
           -- Method: norm ((vector *note data-vector: ❨183❩.) &optional
                    measure)
               Return the p-norm of the vector.
               *Source*
                    *note data-vector.lisp: ❨25❩.
           -- Method: norm ((data array) &optional measure)
               Return the norm of the array.
               *Source*
                    *note array.lisp: ❨24❩.
           -- Method: norm ((data vector) &optional measure)
               *Source*
                    *note vector.lisp: ❨23❩.
           -- Method: norm ((data list) &optional measure)
               *Source*
                    *note list.lisp: ❨22❩.
 -- Generic Function: norm-array (data measure)
     Return the norm of the array according to the measure.
     *Package*
          *note linear-algebra-kernel: ❨30❩.
     *Source*
          *note unary-operations.lisp: ❨10❩.
     *Methods*
           -- Method: norm-array ((data array) (measure (eql
                    :infinity)))
               Return the infinity norm of the array.
           -- Method: norm-array ((data array) (measure (eql
                    :frobenius)))
               Return the Frobenius norm of the array.
           -- Method: norm-array ((data array) (measure (eql :max)))
               Return the max norm of the array.
           -- Method: norm-array ((data array) (measure (eql 1)))
               Return the 1 norm of the array.
 -- Generic Function: norm-vector (data measure)
     Return the norm of the vector according to the measure.
     *Package*
          *note linear-algebra-kernel: ❨30❩.
     *Source*
          *note unary-operations.lisp: ❨10❩.
     *Methods*
           -- Method: norm-vector ((data vector) (measure (eql
                    :infinity)))
               Return the infinity, or maximum, norm of vector.
           -- Method: norm-vector ((data vector) (measure integer))
               Return the p-norm of the vector.
           -- Method: norm-vector ((data vector) (measure (eql 2)))
               Return the Euclidean norm of the vector.
           -- Method: norm-vector ((data vector) (measure (eql 1)))
               Return the Taxicab norm of the list.
 -- Generic Function: nscale (scalar vector-or-matrix)
     Destructively scale each element by the scalar.
     *Package*
          *note linear-algebra: ❨31❩.
     *Source*
          *note fundamental-ops.lisp: ❨17❩.
     *Methods*
           -- Method: nscale ((scalar number) (matrix *note
                    dense-matrix: ❨315❩.))
               Scale each element of the dense matrix.
               *Source*
                    *note dense-matrix.lisp: ❨26❩.
           -- Method: nscale ((scalar number) (vector *note data-vector:
                    ❨183❩.))
               Return the vector destructively scaled by scalar.
               *Source*
                    *note data-vector.lisp: ❨25❩.
           -- Method: nscale ((scalar number) (data array))
               Scale each element of the array.
               *Source*
                    *note array.lisp: ❨24❩.
           -- Method: nscale ((scalar number) (data vector))
               Return the vector destructively scaled by scalar.
               *Source*
                    *note vector.lisp: ❨23❩.
           -- Method: nscale ((scalar number) (data list))
               Return the list destructively scaled by scalar.
               *Source*
                    *note list.lisp: ❨22❩.
 -- Generic Function: nsolve (matrix vector)
     Return the solution to the system of equations in-place.
     *Package*
          *note linear-algebra: ❨31❩.
     *Source*
          *note fundamental-ops.lisp: ❨17❩.
     *Methods*
           -- Method: nsolve ((matrix *note symmetric-matrix: ❨314❩.)
                    (vector *note column-vector: ❨196❩.))
               Return the solution to the system of equations.
               *Source*
                    *note symmetric-matrix.lisp: ❨29❩.
           -- Method: nsolve ((matrix *note hermitian-matrix: ❨363❩.)
                    (vector *note column-vector: ❨196❩.))
               Return the solution to the system of equations.
               *Source*
                    *note hermitian-matrix.lisp: ❨28❩.
           -- Method: nsolve ((matrix *note dense-matrix: ❨315❩.)
                    (vector *note column-vector: ❨196❩.))
               Return the solution to the system of equations.
               *Source*
                    *note dense-matrix.lisp: ❨26❩.
           -- Method: nsolve :before ((matrix *note dense-matrix:
                    ❨315❩.) (vector *note column-vector: ❨196❩.))
               Return the solution to the system of equations.
               *Source*
                    *note dense-matrix.lisp: ❨26❩.
           -- Method: nsolve ((array array) (vector vector))
               Return the solution to the system of equations.
               *Source*
                    *note array.lisp: ❨24❩.
 -- Generic Function: nsubtract (vector-or-matrix-1 vector-or-matrix-2
          &key scalar1 scalar2)
     Destructive vector or matrix subtraction.
     *Package*
          *note linear-algebra: ❨31❩.
     *Source*
          *note fundamental-ops.lisp: ❨17❩.
     *Methods*
           -- Method: nsubtract ((matrix1 *note symmetric-matrix:
                    ❨314❩.) (matrix2 *note symmetric-matrix: ❨314❩.)
                    &key scalar1 scalar2)
               *Source*
                    *note symmetric-matrix.lisp: ❨29❩.
           -- Method: nsubtract ((matrix1 *note symmetric-matrix:
                    ❨314❩.) (matrix2 *note dense-matrix: ❨315❩.) &key
                    scalar1 scalar2)
               Generate an error if a non-symmetric matrix is
               destructively subtracted to a symmetric matrix.
               *Source*
                    *note symmetric-matrix.lisp: ❨29❩.
           -- Method: nsubtract ((matrix1 *note dense-matrix: ❨315❩.)
                    (matrix2 *note dense-matrix: ❨315❩.) &key scalar1
                    scalar2)
               Return the addition of the 2 matrices.
               *Source*
                    *note dense-matrix.lisp: ❨26❩.
           -- Method: nsubtract :before ((matrix1 *note dense-matrix:
                    ❨315❩.) (matrix2 *note dense-matrix: ❨315❩.) &key
                    scalar1 scalar2)
               Audit the input data.
               *Source*
                    *note dense-matrix.lisp: ❨26❩.
           -- Method: nsubtract ((vector1 *note row-vector: ❨273❩.)
                    (vector2 *note row-vector: ❨273❩.) &key scalar1
                    scalar2)
               Return the subraction of scalar2*vector2 from
               scalar1*vector1.
               *Source*
                    *note data-vector.lisp: ❨25❩.
           -- Method: nsubtract ((vector1 *note column-vector: ❨196❩.)
                    (vector2 *note column-vector: ❨196❩.) &key scalar1
                    scalar2)
               Return the subraction of scalar2*vector2 from
               scalar1*vector1.
               *Source*
                    *note data-vector.lisp: ❨25❩.
           -- Method: nsubtract :before ((vector1 *note data-vector:
                    ❨183❩.) (vector2 *note data-vector: ❨183❩.) &key
                    scalar1 scalar2)
               Verify that the dimensions are equal.
               *Source*
                    *note data-vector.lisp: ❨25❩.
           -- Method: nsubtract ((array1 array) (array2 array) &key
                    scalar1 scalar2)
               Destructively subtract array2 from array1.
               *Source*
                    *note array.lisp: ❨24❩.
           -- Method: nsubtract ((vector1 vector) (vector2 vector) &key
                    scalar1 scalar2)
               Return the subraction of scalar2*vector2 from
               scalar1*vector1.
               *Source*
                    *note vector.lisp: ❨23❩.
           -- Method: nsubtract ((list1 list) (list2 list) &key scalar1
                    scalar2)
               Return the subraction of scalar2*list2 from
               scalar1*list1.
               *Source*
                    *note list.lisp: ❨22❩.
 -- Generic Function: ntranspose (vector-or-matrix)
     Destructively transpose the vector or matrix.
     *Package*
          *note linear-algebra: ❨31❩.
     *Source*
          *note fundamental-ops.lisp: ❨17❩.
     *Methods*
           -- Method: ntranspose ((matrix *note hermitian-matrix:
                    ❨363❩.))
               The destructive transpose of a Hermitian matrix is
               itself.
               *Source*
                    *note hermitian-matrix.lisp: ❨28❩.
           -- Method: ntranspose ((matrix *note dense-matrix: ❨315❩.))
               Replace the contents of the dense matrix with the
               transpose.
               *Source*
                    *note dense-matrix.lisp: ❨26❩.
           -- Method: ntranspose ((vector *note row-vector: ❨273❩.))
               Return a column vector destructively.
               *Source*
                    *note data-vector.lisp: ❨25❩.
           -- Method: ntranspose ((vector *note column-vector: ❨196❩.))
               Return a row vector destructively.
               *Source*
                    *note data-vector.lisp: ❨25❩.
           -- Method: ntranspose ((data array))
               Replace the contents of the array with the transpose.
               *Source*
                    *note array.lisp: ❨24❩.
           -- Method: ntranspose ((data vector))
               Return a row vector destructively.
               *Source*
                    *note vector.lisp: ❨23❩.
           -- Method: ntranspose ((data list))
               Return a row vector destructively.
               *Source*
                    *note list.lisp: ❨22❩.
 -- Generic Function: permute (vector-or-matrix-1 vector-or-matrix-2)
     Permute the vector or matrix.
     *Package*
          *note linear-algebra: ❨31❩.
     *Source*
          *note fundamental-ops.lisp: ❨17❩.
     *Methods*
           -- Method: permute ((permutation *note permutation-matrix:
                    ❨317❩.) (matrix *note hermitian-matrix: ❨363❩.))
               *Source*
                    *note hermitian-matrix.lisp: ❨28❩.
           -- Method: permute ((matrix *note hermitian-matrix: ❨363❩.)
                    (permutation *note permutation-matrix: ❨317❩.))
               *Source*
                    *note hermitian-matrix.lisp: ❨28❩.
           -- Method: permute ((permutation *note permutation-matrix:
                    ❨317❩.) (matrix *note dense-matrix: ❨315❩.))
               *Source*
                    *note dense-matrix.lisp: ❨26❩.
           -- Method: permute ((matrix *note dense-matrix: ❨315❩.)
                    (permutation *note permutation-matrix: ❨317❩.))
               *Source*
                    *note dense-matrix.lisp: ❨26❩.
           -- Method: permute ((matrix *note permutation-matrix: ❨317❩.)
                    (vector *note column-vector: ❨196❩.))
               Return the permutation of the column vector.
               *Source*
                    *note data-vector.lisp: ❨25❩.
           -- Method: permute :before ((matrix *note permutation-matrix:
                    ❨317❩.) (vector *note column-vector: ❨196❩.))
               Verify that the dimensions are compatible.
               *Source*
                    *note data-vector.lisp: ❨25❩.
           -- Method: permute ((vector *note row-vector: ❨273❩.) (matrix
                    *note permutation-matrix: ❨317❩.))
               Return the permutation of the row vector.
               *Source*
                    *note data-vector.lisp: ❨25❩.
           -- Method: permute :before ((vector *note row-vector: ❨273❩.)
                    (matrix *note permutation-matrix: ❨317❩.))
               Verify that the dimensions are compatible.
               *Source*
                    *note data-vector.lisp: ❨25❩.
           -- Method: permute ((matrix *note permutation-matrix: ❨317❩.)
                    (data array))
               *Source*
                    *note array.lisp: ❨24❩.
           -- Method: permute ((data array) (matrix *note
                    permutation-matrix: ❨317❩.))
               *Source*
                    *note array.lisp: ❨24❩.
           -- Method: permute ((matrix *note permutation-matrix: ❨317❩.)
                    (data vector))
               Return the permutation of the list.
               *Source*
                    *note vector.lisp: ❨23❩.
           -- Method: permute ((data vector) (matrix *note
                    permutation-matrix: ❨317❩.))
               Return the permutation of the list.
               *Source*
                    *note vector.lisp: ❨23❩.
           -- Method: permute ((matrix *note permutation-matrix: ❨317❩.)
                    (data list))
               Return the permutation of the list.
               *Source*
                    *note list.lisp: ❨22❩.
           -- Method: permute ((data list) (matrix *note
                    permutation-matrix: ❨317❩.))
               Return the permutation of the list.
               *Source*
                    *note list.lisp: ❨22❩.
 -- Generic Function: product (vector-or-matrix-1 vector-or-matrix-2
          &optional scalar)
     Return the vector-vector, matrix-vector or matrix-matrix product.
     *Package*
          *note linear-algebra: ❨31❩.
     *Source*
          *note fundamental-ops.lisp: ❨17❩.
     *Methods*
           -- Method: product ((matrix1 *note dense-matrix: ❨315❩.)
                    (matrix2 *note dense-matrix: ❨315❩.) &optional
                    scalar)
               Return the product of the dense matrices.
               *Source*
                    *note dense-matrix.lisp: ❨26❩.
           -- Method: product :before ((matrix1 *note dense-matrix:
                    ❨315❩.) (matrix2 *note dense-matrix: ❨315❩.)
                    &optional scalar)
               Verify the input.
               *Source*
                    *note dense-matrix.lisp: ❨26❩.
           -- Method: product ((matrix *note dense-matrix: ❨315❩.)
                    (vector *note column-vector: ❨196❩.) &optional
                    scalar)
               Return a column vector generated by the multiplication of
               the dense matrix with a column vector.
               *Source*
                    *note dense-matrix.lisp: ❨26❩.
           -- Method: product :before ((matrix *note dense-matrix:
                    ❨315❩.) (vector *note column-vector: ❨196❩.)
                    &optional scalar)
               Verify the input.
               *Source*
                    *note dense-matrix.lisp: ❨26❩.
           -- Method: product ((vector *note row-vector: ❨273❩.) (matrix
                    *note dense-matrix: ❨315❩.) &optional scalar)
               Return a row vector generated by the pre-multiplication
               of a dense matrix by a row vector.
               *Source*
                    *note dense-matrix.lisp: ❨26❩.
           -- Method: product :before ((vector *note row-vector: ❨273❩.)
                    (matrix *note dense-matrix: ❨315❩.) &optional
                    scalar)
               Verify the inputs.
               *Source*
                    *note dense-matrix.lisp: ❨26❩.
           -- Method: product ((vector1 *note row-vector: ❨273❩.)
                    (vector2 *note column-vector: ❨196❩.) &optional
                    scalar)
               Return the dot product of vector1 and vector2.
               *Source*
                    *note data-vector.lisp: ❨25❩.
           -- Method: product :before ((vector1 *note row-vector:
                    ❨273❩.) (vector2 *note column-vector: ❨196❩.)
                    &optional scalar)
               Verify that the dimensions are equal.
               *Source*
                    *note data-vector.lisp: ❨25❩.
           -- Method: product ((array1 array) (array2 array) &optional
                    scalar)
               Return the product of the arrays.
               *Source*
                    *note array.lisp: ❨24❩.
           -- Method: product ((array array) (vector vector) &optional
                    scalar)
               Return a vector generated by the multiplication of the
               array with a vector.
               *Source*
                    *note array.lisp: ❨24❩.
           -- Method: product ((vector vector) (array array) &optional
                    scalar)
               Return a vector generated by the pre-multiplication of a
               array by a vector.
               *Source*
                    *note array.lisp: ❨24❩.
           -- Method: product ((vector1 vector) (vector2 vector)
                    &optional scalar)
               Return the dot product of vector1 and vector2.
               *Source*
                    *note vector.lisp: ❨23❩.
           -- Method: product ((list1 list) (list2 list) &optional
                    scalar)
               Return the dot product of list1 and list2.
               *Source*
                    *note list.lisp: ❨22❩.
 -- Generic Function: replace-matrix (matrix1 matrix2 &key start-row1
          end-row1 start-column1 end-column1 start-row2 end-row2
          start-column2 end-column2)
     Destructively replace elements of matrix1 with matrix2.
     *Package*
          *note linear-algebra: ❨31❩.
     *Source*
          *note matrix.lisp: ❨19❩.
     *Methods*
           -- Method: replace-matrix ((matrix1 *note symmetric-matrix:
                    ❨314❩.) (matrix2 *note dense-matrix: ❨315❩.) &key
                    start-row1 end-row1 start-column1 end-column1
                    start-row2 end-row2 start-column2 end-column2)
               Replace the elements of MATRIX1 with MATRIX2.
               *Source*
                    *note symmetric-matrix.lisp: ❨29❩.
           -- Method: replace-matrix ((matrix1 *note symmetric-matrix:
                    ❨314❩.) (matrix2 *note symmetric-matrix: ❨314❩.)
                    &key start-row1 end-row1 start-column1 end-column1
                    start-row2 end-row2 start-column2 end-column2)
               Replace the elements of MATRIX1 with MATRIX2.
               *Source*
                    *note symmetric-matrix.lisp: ❨29❩.
           -- Method: replace-matrix ((matrix1 *note hermitian-matrix:
                    ❨363❩.) (matrix2 *note dense-matrix: ❨315❩.) &key
                    start-row1 end-row1 start-column1 end-column1
                    start-row2 end-row2 start-column2 end-column2)
               Replace the elements of matrix1 with matrix2.
               *Source*
                    *note hermitian-matrix.lisp: ❨28❩.
           -- Method: replace-matrix ((matrix1 *note hermitian-matrix:
                    ❨363❩.) (matrix2 *note hermitian-matrix: ❨363❩.)
                    &key start-row1 end-row1 start-column1 end-column1
                    start-row2 end-row2 start-column2 end-column2)
               Replace the elements of matrix1 with matrix2.
               *Source*
                    *note hermitian-matrix.lisp: ❨28❩.
           -- Method: replace-matrix ((matrix1 *note dense-matrix:
                    ❨315❩.) (matrix2 *note dense-matrix: ❨315❩.) &key
                    start-row1 end-row1 start-column1 end-column1
                    start-row2 end-row2 start-column2 end-column2)
               Replace the elements of matrix1 with matrix2.
               *Source*
                    *note dense-matrix.lisp: ❨26❩.
 -- Generic Function: replace-vector (vector1 vector2 &key start1 end1
          start2 end2)
     Destructively replace the elements of vector1 with vector2.
     *Package*
          *note linear-algebra: ❨31❩.
     *Source*
          *note vector.lisp: ❨18❩.
     *Methods*
           -- Method: replace-vector ((vector1 *note data-vector:
                    ❨183❩.) (vector2 *note data-vector: ❨183❩.) &key
                    start1 end1 start2 end2)
               Destructively replace the elements of vector1 with
               vector2.
               *Source*
                    *note data-vector.lisp: ❨25❩.
 -- Generic Function: right-permute (vector-or-array permutation)
     Permute the row vector or columns of the array.
     *Package*
          *note linear-algebra-kernel: ❨30❩.
     *Source*
          *note permute.lisp: ❨9❩.
     *Methods*
           -- Method: right-permute ((data array) (permutation vector))
               Permute the columns of the array.
           -- Method: right-permute ((data vector) (permutation vector))
               Permute the row vector to create a column vector.
 -- Generic Function: scale (scalar vector-or-matrix)
     Scale each element by the scalar.
     *Package*
          *note linear-algebra: ❨31❩.
     *Source*
          *note fundamental-ops.lisp: ❨17❩.
     *Methods*
           -- Method: scale ((scalar number) (matrix *note dense-matrix:
                    ❨315❩.))
               Scale each element of the dense matrix.
               *Source*
                    *note dense-matrix.lisp: ❨26❩.
           -- Method: scale ((scalar number) (vector *note data-vector:
                    ❨183❩.))
               Return the vector scaled by scalar.
               *Source*
                    *note data-vector.lisp: ❨25❩.
           -- Method: scale ((scalar number) (data array))
               Scale each element of the array.
               *Source*
                    *note array.lisp: ❨24❩.
           -- Method: scale ((scalar number) (data vector))
               Return the vector scaled by scalar.
               *Source*
                    *note vector.lisp: ❨23❩.
           -- Method: scale ((scalar number) (data list))
               Return the list scaled by scalar.
               *Source*
                    *note list.lisp: ❨22❩.
 -- Generic Function: scaled-binary-op (op scalar1 scalar2)
     Compile and return a scaled binary operation.
     *Package*
          *note linear-algebra-kernel: ❨30❩.
     *Source*
          *note binary-operations.lisp: ❨11❩.
     *Methods*
           -- Method: scaled-binary-op ((op (eql #<function ->))
                    (scalar1 number) (scalar2 number))
               Return the scaled operation.
           -- Method: scaled-binary-op ((op (eql #<function +>))
                    (scalar1 number) (scalar2 number))
               Return the scaled operation.
           -- Method: scaled-binary-op ((op (eql #<function ->))
                    (scalar1 (eql nil)) (scalar2 number))
               Return the scaled operation.
           -- Method: scaled-binary-op ((op (eql #<function +>))
                    (scalar1 (eql nil)) (scalar2 number))
               Return the scaled operation.
           -- Method: scaled-binary-op ((op (eql #<function ->))
                    (scalar1 number) (scalar2 (eql nil)))
               Return the scaled operation.
           -- Method: scaled-binary-op ((op (eql #<function +>))
                    (scalar1 number) (scalar2 (eql nil)))
               Return the scaled operation.
           -- Method: scaled-binary-op (op (scalar1 (eql nil)) (scalar2
                    (eql nil)))
               Return the operation.
 -- Generic Function: solve (matrix vector)
     Return the solution to the system of equations.
     *Package*
          *note linear-algebra: ❨31❩.
     *Source*
          *note fundamental-ops.lisp: ❨17❩.
     *Methods*
           -- Method: solve ((matrix *note symmetric-matrix: ❨314❩.)
                    (vector *note column-vector: ❨196❩.))
               Return the solution to the system of equations.
               *Source*
                    *note symmetric-matrix.lisp: ❨29❩.
           -- Method: solve ((matrix *note hermitian-matrix: ❨363❩.)
                    (vector *note column-vector: ❨196❩.))
               Return the solution to the system of equations.
               *Source*
                    *note hermitian-matrix.lisp: ❨28❩.
           -- Method: solve ((matrix *note dense-matrix: ❨315❩.) (vector
                    *note column-vector: ❨196❩.))
               Return the solution to the system of equations.
               *Source*
                    *note dense-matrix.lisp: ❨26❩.
           -- Method: solve :before ((matrix *note dense-matrix: ❨315❩.)
                    (vector *note column-vector: ❨196❩.))
               Return the solution to the system of equations.
               *Source*
                    *note dense-matrix.lisp: ❨26❩.
           -- Method: solve ((array array) (vector vector))
               Return the solution to the system of equations.
               *Source*
                    *note array.lisp: ❨24❩.
 -- Generic Function: submatrix (matrix start-row start-column &key
          end-row end-column)
     Return a submatrix of the matrix.
     *Package*
          *note linear-algebra: ❨31❩.
     *Source*
          *note matrix.lisp: ❨19❩.
     *Methods*
           -- Method: submatrix ((matrix *note symmetric-matrix: ❨314❩.)
                    (start-row integer) (start-column integer) &key
                    end-row end-column)
               Return a matrix created from the submatrix of matrix.
               *Source*
                    *note symmetric-matrix.lisp: ❨29❩.
           -- Method: submatrix ((matrix *note hermitian-matrix: ❨363❩.)
                    (start-row integer) (start-column integer) &key
                    end-row end-column)
               Return a matrix created from the submatrix of matrix.
               *Source*
                    *note hermitian-matrix.lisp: ❨28❩.
           -- Method: submatrix ((matrix *note square-matrix: ❨240❩.)
                    (start-row integer) (start-column integer) &key
                    end-row end-column)
               Return a matrix created from the submatrix of matrix.
               *Source*
                    *note square-matrix.lisp: ❨27❩.
           -- Method: submatrix ((matrix *note dense-matrix: ❨315❩.)
                    (start-row integer) (start-column integer) &key
                    end-row end-column)
               Return a dense matrix created from the submatrix of a
               matrix.
               *Source*
                    *note dense-matrix.lisp: ❨26❩.
 -- Generic Function: (setf submatrix) (matrix start-row start-column
          &key end-row end-column)
     Set the submatrix of the matrix.
     *Package*
          *note linear-algebra: ❨31❩.
     *Source*
          *note matrix.lisp: ❨19❩.
     *Methods*
           -- Method: (setf submatrix) ((matrix *note symmetric-matrix:
                    ❨314❩.) (start-row integer) (start-column integer)
                    &key end-row end-column)
               Set a submatrix of MATRIX.
               *Source*
                    *note symmetric-matrix.lisp: ❨29❩.
           -- Method: (setf submatrix) ((matrix *note symmetric-matrix:
                    ❨314❩.) (start-row integer) (start-column integer)
                    &key end-row end-column)
               Set a submatrix of the matrix.
               *Source*
                    *note symmetric-matrix.lisp: ❨29❩.
           -- Method: (setf submatrix) ((matrix *note hermitian-matrix:
                    ❨363❩.) (start-row integer) (start-column integer)
                    &key end-row end-column)
               Set a submatrix of the matrix.
               *Source*
                    *note hermitian-matrix.lisp: ❨28❩.
           -- Method: (setf submatrix) ((matrix *note hermitian-matrix:
                    ❨363❩.) (start-row integer) (start-column integer)
                    &key end-row end-column)
               Set a submatrix of the matrix.
               *Source*
                    *note hermitian-matrix.lisp: ❨28❩.
           -- Method: (setf submatrix) ((matrix *note dense-matrix:
                    ❨315❩.) (start-row integer) (start-column integer)
                    &key end-row end-column)
               Set the submatrix of matrix.
               *Source*
                    *note dense-matrix.lisp: ❨26❩.
 -- Generic Function: subtract (vector-or-matrix-1 vector-or-matrix-2
          &key scalar1 scalar2)
     Vector or matrix binary subtraction.
     *Package*
          *note linear-algebra: ❨31❩.
     *Source*
          *note fundamental-ops.lisp: ❨17❩.
     *Methods*
           -- Method: subtract ((matrix1 *note dense-matrix: ❨315❩.)
                    (matrix2 *note dense-matrix: ❨315❩.) &key scalar1
                    scalar2)
               Return the addition of the 2 matrices.
               *Source*
                    *note dense-matrix.lisp: ❨26❩.
           -- Method: subtract :before ((matrix1 *note dense-matrix:
                    ❨315❩.) (matrix2 *note dense-matrix: ❨315❩.) &key
                    scalar1 scalar2)
               Audit the input data.
               *Source*
                    *note dense-matrix.lisp: ❨26❩.
           -- Method: subtract ((vector1 *note row-vector: ❨273❩.)
                    (vector2 *note row-vector: ❨273❩.) &key scalar1
                    scalar2)
               Return the subraction of scalar2*vector2 from
               scalar1*vector1.
               *Source*
                    *note data-vector.lisp: ❨25❩.
           -- Method: subtract ((vector1 *note column-vector: ❨196❩.)
                    (vector2 *note column-vector: ❨196❩.) &key scalar1
                    scalar2)
               Return the subraction of scalar2*vector2 from
               scalar1*vector1.
               *Source*
                    *note data-vector.lisp: ❨25❩.
           -- Method: subtract :before ((vector1 *note data-vector:
                    ❨183❩.) (vector2 *note data-vector: ❨183❩.) &key
                    scalar1 scalar2)
               Verify that the dimensions are equal.
               *Source*
                    *note data-vector.lisp: ❨25❩.
           -- Method: subtract ((array1 array) (array2 array) &key
                    scalar1 scalar2)
               Return the subtraction of the 2 arrays.
               *Source*
                    *note array.lisp: ❨24❩.
           -- Method: subtract ((vector1 vector) (vector2 vector) &key
                    scalar1 scalar2)
               Return the subraction of scalar2*vector2 from
               scalar1*vector1.
               *Source*
                    *note vector.lisp: ❨23❩.
           -- Method: subtract ((list1 list) (list2 list) &key scalar1
                    scalar2)
               Return the subraction of scalar2*list2 from
               scalar1*list1.
               *Source*
                    *note list.lisp: ❨22❩.
 -- Generic Function: subvector (vector start &optional end)
     Return a new vector that is a subvector of the vector.
     *Package*
          *note linear-algebra: ❨31❩.
     *Source*
          *note vector.lisp: ❨18❩.
     *Methods*
           -- Method: subvector ((vector *note data-vector: ❨183❩.)
                    start &optional end)
               Return a new data vector that is a subset of vector.
               *Source*
                    *note data-vector.lisp: ❨25❩.
 -- Generic Function: (setf subvector) (vector start &optional end)
     Set the subvector of the vector.
     *Package*
          *note linear-algebra: ❨31❩.
     *Source*
          *note vector.lisp: ❨18❩.
     *Methods*
           -- Method: (setf subvector) ((vector *note data-vector:
                    ❨183❩.) start &optional end)
               Set the subvector of the data vector.
               *Source*
                    *note data-vector.lisp: ❨25❩.
 -- Generic Function: sump (vector-or-array p &optional scale sump)
     Return the scaling parameter and the sum of the P powers.
     *Package*
          *note linear-algebra-kernel: ❨30❩.
     *Source*
          *note unary-operations.lisp: ❨10❩.
     *Methods*
           -- Method: sump ((data array) p &optional scale sump)
               Return the scaling parameter and the sum of the P powers
               of the matrix.
           -- Method: sump ((data vector) p &optional scale sump)
               Return the scaling parameter and the sum of the powers of
               p of the vector.
           -- Method: sump ((data list) (p real) &optional scale sump)
               Return the scaling parameter and the sum of the powers of
               p of the data.
 -- Generic Function: sumsq (vector-or-array &optional scale sumsq)
     Return the scaling parameter and the sum of the squares.
     *Package*
          *note linear-algebra-kernel: ❨30❩.
     *Source*
          *note unary-operations.lisp: ❨10❩.
     *Methods*
           -- Method: sumsq ((data array) &optional scale sumsq)
               Return the scaling parameter and the sum of the squares
               of the array.
           -- Method: sumsq ((data vector) &optional scale sumsq)
               Return the scaling parameter and the sum of the squares
               of the vector.
           -- Method: sumsq ((data list) &optional scale sumsq)
               Return the scaling parameter and the sum of the squares
               of the list.
 -- Generic Function: transpose (vector-or-matrix)
     Transpose the vector or matrix.
     *Package*
          *note linear-algebra: ❨31❩.
     *Source*
          *note fundamental-ops.lisp: ❨17❩.
     *Methods*
           -- Method: transpose ((matrix *note hermitian-matrix:
                    ❨363❩.))
               The transpose of a Hermitian matrix is itself.
               *Source*
                    *note hermitian-matrix.lisp: ❨28❩.
           -- Method: transpose ((matrix *note dense-matrix: ❨315❩.))
               Return the transpose of the matrix.
               *Source*
                    *note dense-matrix.lisp: ❨26❩.
           -- Method: transpose ((vector *note row-vector: ❨273❩.))
               Return a column vector.
               *Source*
                    *note data-vector.lisp: ❨25❩.
           -- Method: transpose ((vector *note column-vector: ❨196❩.))
               Return a row vector.
               *Source*
                    *note data-vector.lisp: ❨25❩.
           -- Method: transpose ((data array))
               Return the transpose of the array.
               *Source*
                    *note array.lisp: ❨24❩.
           -- Method: transpose ((data vector))
               Return a row vector.
               *Source*
                    *note vector.lisp: ❨23❩.
           -- Method: transpose ((data list))
               Return a row vector.
               *Source*
                    *note list.lisp: ❨22❩.
           -- Method: transpose ((matrix *note permutation-matrix:
                    ❨317❩.))
               Transpose the permutation matrix.
               *Source*
                    *note permutation-matrix.lisp: ❨21❩.
 -- Generic Function: vector-element-type (vector)
     Return the element type of vector.
     *Package*
          *note linear-algebra: ❨31❩.
     *Source*
          *note vector.lisp: ❨18❩.
     *Methods*
           -- Method: vector-element-type ((vector *note data-vector:
                    ❨183❩.))
               Return the element type of vector.
               *Source*
                    *note data-vector.lisp: ❨25❩.
 -- Generic Function: vector-in-bounds-p (vector index)
     Return true if index does not exceed the dimensions of vector.
     *Package*
          *note linear-algebra: ❨31❩.
     *Source*
          *note vector.lisp: ❨18❩.
     *Methods*
           -- Method: vector-in-bounds-p ((vector *note data-vector:
                    ❨183❩.) (index integer))
               Return true if index does not exceed the dimensions of
               vector.
               *Source*
                    *note data-vector.lisp: ❨25❩.
 -- Generic Function: vector-length (vector)
     Return the length of the vector.
     *Package*
          *note linear-algebra: ❨31❩.
     *Source*
          *note vector.lisp: ❨18❩.
     *Methods*
           -- Method: vector-length ((vector *note data-vector: ❨183❩.))
               Return the length of the vector.
               *Source*
                    *note data-vector.lisp: ❨25❩.
 -- Generic Function: vref (vector index)
     Return the element of vector at index.
     *Package*
          *note linear-algebra: ❨31❩.
     *Source*
          *note vector.lisp: ❨18❩.
     *Methods*
           -- Method: vref ((vector *note data-vector: ❨183❩.) (index
                    integer))
               Return the element of vector at index.
               *Source*
                    *note data-vector.lisp: ❨25❩.
 -- Generic Function: (setf vref) (vector index)
     Set the element of vector at index to data.
     *Package*
          *note linear-algebra: ❨31❩.
     *Source*
          *note vector.lisp: ❨18❩.
     *Methods*
           -- Method: (setf vref) ((vector *note data-vector: ❨183❩.)
                    (index integer))
               Set the element of vector at index to data.
               *Source*
                    *note data-vector.lisp: ❨25❩.


File: linear-algebra.info,  Node: Public standalone methods,  Next: Public classes,  Prev: Public generic functions,  Up: Public Interface

5.1.4 Standalone methods
------------------------

 -- Method: initialize-instance :after ((self *note data-vector: ❨183❩.)
          &rest initargs &key size element-type initial-element
          initial-contents)
     *Source*
          *note data-vector.lisp: ❨25❩.
 -- Method: initialize-instance :after ((self *note identity-matrix:
          ❨191❩.) &rest initargs &key dimensions element-type
          initial-element initial-contents)
     Initialize the identity matrix.
     *Source*
          *note identity-matrix.lisp: ❨20❩.
 -- Method: initialize-instance :after ((self *note dense-matrix:
          ❨315❩.) &rest initargs &key dimensions element-type
          initial-element initial-contents)
     *Source*
          *note dense-matrix.lisp: ❨26❩.
 -- Method: initialize-instance :after ((self *note permutation-matrix:
          ❨317❩.) &rest initargs &key dimensions element-type
          initial-element initial-contents)
     Verify that the element-type was not set and that rows equals
     columns.
     *Source*
          *note permutation-matrix.lisp: ❨21❩.


File: linear-algebra.info,  Node: Public classes,  Prev: Public standalone methods,  Up: Public Interface

5.1.5 Classes
-------------

 -- Class: column-vector
     A column vector.
     *Package*
          *note linear-algebra: ❨31❩.
     *Source*
          *note data-vector.lisp: ❨25❩.
     *Direct superclasses*
          *note data-vector: ❨183❩.
     *Direct methods*
             • *note add: ❨291❩.
             • *note compatible-dimensions-p: ❨94❩.
             • *note compatible-dimensions-p: ❨95❩.
             • *note nadd: ❨165❩.
             • *note nsolve: ❨301❩.
             • *note nsolve: ❨302❩.
             • *note nsolve: ❨303❩.
             • *note nsolve: ❨304❩.
             • *note nsubtract: ❨358❩.
             • *note ntranspose: ❨333❩.
             • *note permute: ❨248❩.
             • *note permute: ❨249❩.
             • *note product: ❨367❩.
             • *note product: ❨368❩.
             • *note product: ❨371❩.
             • *note product: ❨372❩.
             • *note solve: ❨201❩.
             • *note solve: ❨202❩.
             • *note solve: ❨203❩.
             • *note solve: ❨204❩.
             • *note subtract: ❨225❩.
             • *note transpose: ❨150❩.
 -- Class: data-vector
     A data vector.
     *Package*
          *note linear-algebra: ❨31❩.
     *Source*
          *note data-vector.lisp: ❨25❩.
     *Direct subclasses*
             • *note column-vector: ❨196❩.
             • *note row-vector: ❨273❩.
     *Direct methods*
             • *note add: ❨292❩.
             • *note apply-rotation: ❨262❩.
             • *note apply-rotation: ❨263❩.
             • *note (setf contents): ❨389❩.
             • *note contents: ❨384❩.
             • *note copy-vector: ❨220❩.
             • float-equal.
             • float-equal.
             • *note initialize-instance: ❨436❩.
             • *note map-into-vector: ❨312❩.
             • *note map-into-vector: ❨313❩.
             • *note map-vector: ❨198❩.
             • *note map-vector: ❨199❩.
             • *note nadd: ❨166❩.
             • *note napply-rotation: ❨327❩.
             • *note napply-rotation: ❨328❩.
             • *note norm: ❨322❩.
             • *note nscale: ❨268❩.
             • *note nsubtract: ❨359❩.
             • rational-equal.
             • rational-equal.
             • *note replace-vector: ❨299❩.
             • *note scale: ❨187❩.
             • *note subtract: ❨226❩.
             • *note (setf subvector): ❨239❩.
             • *note subvector: ❨237❩.
             • *note vector-element-type: ❨265❩.
             • *note vector-in-bounds-p: ❨231❩.
             • *note vector-length: ❨297❩.
             • *note (setf vref): ❨173❩.
             • *note vref: ❨171❩.
     *Direct slots*
           -- Slot: contents
               *Type*
                    (array * (*))
               *Initargs*
                    :contents
               *Readers*
                    *note contents: ❨384❩.
               *Writers*
                    *note (setf contents): ❨389❩.
 -- Class: dense-matrix
     Dense matrix object.
     *Package*
          *note linear-algebra: ❨31❩.
     *Source*
          *note dense-matrix.lisp: ❨26❩.
     *Direct superclasses*
          *note matrix-object: ❨242❩.
     *Direct subclasses*
          *note square-matrix: ❨240❩.
     *Direct methods*
             • *note add: ❨288❩.
             • *note add: ❨289❩.
             • *note compatible-dimensions-p: ❨95❩.
             • *note (setf contents): ❨388❩.
             • *note contents: ❨383❩.
             • *note copy-matrix: ❨281❩.
             • float-equal.
             • float-equal.
             • float-equal.
             • float-equal.
             • *note initialize-instance: ❨443❩.
             • *note initialize-matrix-contents: ❨407❩.
             • *note initialize-matrix-contents: ❨408❩.
             • *note initialize-matrix-contents: ❨409❩.
             • *note initialize-matrix-contents: ❨410❩.
             • *note invert: ❨341❩.
             • *note matrix-column-dimension: ❨344❩.
             • *note matrix-dimensions: ❨156❩.
             • *note matrix-element-type: ❨348❩.
             • *note matrix-in-bounds-p: ❨308❩.
             • *note matrix-row-dimension: ❨233❩.
             • *note (setf mref): ❨181❩.
             • *note mref: ❨175❩.
             • *note nadd: ❨161❩.
             • *note nadd: ❨162❩.
             • *note nadd: ❨163❩.
             • *note ninvert: ❨278❩.
             • *note norm: ❨321❩.
             • *note nscale: ❨267❩.
             • *note nsolve: ❨303❩.
             • *note nsolve: ❨304❩.
             • *note nsubtract: ❨354❩.
             • *note nsubtract: ❨355❩.
             • *note nsubtract: ❨356❩.
             • *note ntranspose: ❨331❩.
             • *note permute: ❨246❩.
             • *note permute: ❨247❩.
             • *note product: ❨365❩.
             • *note product: ❨366❩.
             • *note product: ❨367❩.
             • *note product: ❨368❩.
             • *note product: ❨369❩.
             • *note product: ❨370❩.
             • rational-equal.
             • rational-equal.
             • rational-equal.
             • rational-equal.
             • *note replace-matrix: ❨141❩.
             • *note replace-matrix: ❨143❩.
             • *note replace-matrix: ❨145❩.
             • *note scale: ❨186❩.
             • *note solve: ❨203❩.
             • *note solve: ❨204❩.
             • *note (setf submatrix): ❨214❩.
             • *note (setf submatrix): ❨216❩.
             • *note (setf submatrix): ❨218❩.
             • *note submatrix: ❨212❩.
             • *note subtract: ❨222❩.
             • *note subtract: ❨223❩.
             • *note transpose: ❨148❩.
     *Direct slots*
           -- Slot: contents
               *Type*
                    (array * (* *))
               *Initargs*
                    :contents
               *Readers*
                    *note contents: ❨383❩.
               *Writers*
                    *note (setf contents): ❨388❩.
 -- Class: hermitian-matrix
     Hermitian matrix object.
     *Package*
          *note linear-algebra: ❨31❩.
     *Source*
          *note hermitian-matrix.lisp: ❨28❩.
     *Direct superclasses*
          *note square-matrix: ❨240❩.
     *Direct subclasses*
          *note symmetric-matrix: ❨314❩.
     *Direct methods*
             • *note initialize-matrix-contents: ❨402❩.
             • *note initialize-matrix-contents: ❨403❩.
             • *note initialize-matrix-contents: ❨404❩.
             • *note initialize-matrix-contents: ❨405❩.
             • *note invert: ❨339❩.
             • *note (setf mref): ❨180❩.
             • *note ninvert: ❨276❩.
             • *note nsolve: ❨302❩.
             • *note ntranspose: ❨330❩.
             • *note permute: ❨244❩.
             • *note permute: ❨245❩.
             • *note replace-matrix: ❨143❩.
             • *note replace-matrix: ❨144❩.
             • *note solve: ❨202❩.
             • *note (setf submatrix): ❨216❩.
             • *note (setf submatrix): ❨217❩.
             • *note submatrix: ❨210❩.
             • *note transpose: ❨147❩.
 -- Class: identity-matrix
     Identity matrix object.
     *Package*
          *note linear-algebra: ❨31❩.
     *Source*
          *note identity-matrix.lisp: ❨20❩.
     *Direct superclasses*
          *note matrix-object: ❨242❩.
     *Direct methods*
             • *note contents: ❨386❩.
             • *note copy-matrix: ❨283❩.
             • *note initialize-instance: ❨441❩.
             • *note matrix-column-dimension: ❨346❩.
             • *note matrix-dimensions: ❨158❩.
             • *note matrix-element-type: ❨350❩.
             • *note matrix-in-bounds-p: ❨310❩.
             • *note matrix-row-dimension: ❨235❩.
             • *note mref: ❨177❩.
             • *note size: ❨416❩.
     *Direct slots*
           -- Slot: size
               *Type*
                    fixnum
               *Initargs*
                    :size
               *Readers*
                       • *note matrix-column-dimension: ❨346❩.
                       • *note matrix-row-dimension: ❨235❩.
                       • *note size: ❨416❩.
               *Writers*
                    This slot is read-only.
           -- Slot: contents
               *Type*
                    (array * (2))
               *Initargs*
                    :contents
               *Readers*
                    *note contents: ❨386❩.
               *Writers*
                    This slot is read-only.
 -- Class: matrix-object
     A superclass for all matrices.
     *Package*
          *note linear-algebra: ❨31❩.
     *Source*
          *note matrix.lisp: ❨19❩.
     *Direct subclasses*
             • *note dense-matrix: ❨315❩.
             • *note identity-matrix: ❨191❩.
             • *note permutation-matrix: ❨317❩.
 -- Class: permutation-matrix
     Permutation matrix object.
     *Package*
          *note linear-algebra: ❨31❩.
     *Source*
          *note permutation-matrix.lisp: ❨21❩.
     *Direct superclasses*
          *note matrix-object: ❨242❩.
     *Direct methods*
             • *note (setf contents): ❨390❩.
             • *note contents: ❨385❩.
             • *note copy-matrix: ❨282❩.
             • *note initialize-instance: ❨452❩.
             • *note initialize-matrix-contents: ❨411❩.
             • *note initialize-matrix-contents: ❨412❩.
             • *note initialize-matrix-contents: ❨413❩.
             • *note matrix-column-dimension: ❨345❩.
             • *note matrix-dimensions: ❨157❩.
             • *note matrix-element-type: ❨349❩.
             • *note matrix-in-bounds-p: ❨309❩.
             • *note matrix-row-dimension: ❨234❩.
             • *note (setf mref): ❨182❩.
             • *note mref: ❨176❩.
             • *note permute: ❨244❩.
             • *note permute: ❨245❩.
             • *note permute: ❨246❩.
             • *note permute: ❨247❩.
             • *note permute: ❨248❩.
             • *note permute: ❨249❩.
             • *note permute: ❨250❩.
             • *note permute: ❨251❩.
             • *note permute: ❨252❩.
             • *note permute: ❨253❩.
             • *note permute: ❨254❩.
             • *note permute: ❨255❩.
             • *note permute: ❨256❩.
             • *note permute: ❨257❩.
             • *note transpose: ❨154❩.
     *Direct slots*
           -- Slot: contents
               *Type*
                    (array fixnum (*))
               *Initargs*
                    :contents
               *Readers*
                    *note contents: ❨385❩.
               *Writers*
                    *note (setf contents): ❨390❩.
 -- Class: row-vector
     A row vector.
     *Package*
          *note linear-algebra: ❨31❩.
     *Source*
          *note data-vector.lisp: ❨25❩.
     *Direct superclasses*
          *note data-vector: ❨183❩.
     *Direct methods*
             • *note add: ❨290❩.
             • *note nadd: ❨164❩.
             • *note nsubtract: ❨357❩.
             • *note ntranspose: ❨332❩.
             • *note permute: ❨250❩.
             • *note permute: ❨251❩.
             • *note product: ❨369❩.
             • *note product: ❨370❩.
             • *note product: ❨371❩.
             • *note product: ❨372❩.
             • *note subtract: ❨224❩.
             • *note transpose: ❨149❩.
 -- Class: square-matrix
     Square matrix object.
     *Package*
          *note linear-algebra: ❨31❩.
     *Source*
          *note square-matrix.lisp: ❨27❩.
     *Direct superclasses*
          *note dense-matrix: ❨315❩.
     *Direct subclasses*
          *note hermitian-matrix: ❨363❩.
     *Direct methods*
             • *note compatible-dimensions-p: ❨94❩.
             • *note initialize-matrix-contents: ❨406❩.
             • *note invert: ❨340❩.
             • *note ninvert: ❨277❩.
             • *note submatrix: ❨211❩.
 -- Class: symmetric-matrix
     Symmetric matrix object.
     *Package*
          *note linear-algebra: ❨31❩.
     *Source*
          *note symmetric-matrix.lisp: ❨29❩.
     *Direct superclasses*
          *note hermitian-matrix: ❨363❩.
     *Direct methods*
             • *note initialize-matrix-contents: ❨399❩.
             • *note initialize-matrix-contents: ❨400❩.
             • *note initialize-matrix-contents: ❨401❩.
             • *note invert: ❨338❩.
             • *note (setf mref): ❨179❩.
             • *note nadd: ❨160❩.
             • *note nadd: ❨161❩.
             • *note ninvert: ❨275❩.
             • *note nsolve: ❨301❩.
             • *note nsubtract: ❨353❩.
             • *note nsubtract: ❨354❩.
             • *note replace-matrix: ❨141❩.
             • *note replace-matrix: ❨142❩.
             • *note solve: ❨201❩.
             • *note (setf submatrix): ❨214❩.
             • *note (setf submatrix): ❨215❩.
             • *note submatrix: ❨209❩.


File: linear-algebra.info,  Node: Internals,  Prev: Public Interface,  Up: Definitions

5.2 Internals
=============

* Menu:

* Private ordinary functions::
* Private generic functions::


File: linear-algebra.info,  Node: Private ordinary functions,  Next: Private generic functions,  Prev: Internals,  Up: Internals

5.2.1 Ordinary functions
------------------------

 -- Function: %abs-vector (vector)
     Return a vector containing absolute value of each element.
     *Package*
          *note linear-algebra-kernel: ❨30❩.
     *Source*
          *note unary-operations.lisp: ❨10❩.
 -- Function: %array1<-array1-op-array2 (operation array1 array2)
     *Package*
          *note linear-algebra-kernel: ❨30❩.
     *Source*
          *note binary-operations.lisp: ❨11❩.
 -- Function: %array<-array1-op-array2 (operation array1 array2)
     *Package*
          *note linear-algebra-kernel: ❨30❩.
     *Source*
          *note binary-operations.lisp: ❨11❩.
 -- Function: %default-cg-epsilon (array vector)
     Return a default epsilon for the conjugate gradient method.
     *Package*
          *note linear-algebra-kernel: ❨30❩.
     *Source*
          *note conjugate-gradient.lisp: ❨15❩.
 -- Function: %initialize-cg-residual (array vector solution)
     Return the initial residual vector for the conjugate gradient.
     *Package*
          *note linear-algebra-kernel: ❨30❩.
     *Source*
          *note conjugate-gradient.lisp: ❨15❩.
 -- Function: %initialize-cg-solution (array)
     Return an initial solution vector for the conjugate gradient.
     *Package*
          *note linear-algebra-kernel: ❨30❩.
     *Source*
          *note conjugate-gradient.lisp: ❨15❩.
 -- Function: %initialize-hermitian-matrix-with-seq (matrix data
          dimensions element-type)
     Initialize and validate a Hermitian matrix with a sequence.
     *Package*
          *note linear-algebra: ❨31❩.
     *Source*
          *note hermitian-matrix.lisp: ❨28❩.
 -- Function: %initialize-permutation-matrix-with-seq (matrix data size)
     *Package*
          *note linear-algebra: ❨31❩.
     *Source*
          *note permutation-matrix.lisp: ❨21❩.
 -- Function: %initialize-symmetric-matrix-with-seq (matrix data
          dimensions element-type)
     Initialize and validate a symmetric matrix with a sequence.
     *Package*
          *note linear-algebra: ❨31❩.
     *Source*
          *note symmetric-matrix.lisp: ❨29❩.
 -- Function: %map-data-vector (result-type function first-vector &rest
          more-vectors)
     Non-validating version of map-vector.
     *Package*
          *note linear-algebra: ❨31❩.
     *Source*
          *note data-vector.lisp: ❨25❩.
 -- Function: %map-into-data-vector (result-vector function &rest
          vectors)
     Non-validating version of map-into-vector.
     *Package*
          *note linear-algebra: ❨31❩.
     *Source*
          *note data-vector.lisp: ❨25❩.
 -- Function: %negative-residual (residual)
     Return the negative of the residual.
     *Package*
          *note linear-algebra-kernel: ❨30❩.
     *Source*
          *note conjugate-gradient.lisp: ❨15❩.
 -- Function: %product-array-array (array1 array2 &optional result)
     Return the result of the product of 2 arrays.
     *Package*
          *note linear-algebra-kernel: ❨30❩.
     *Source*
          *note binary-operations.lisp: ❨11❩.
 -- Function: %product-array-vector (array vector &optional result)
     Return the result of the array postmultiplied by the vector.
     *Package*
          *note linear-algebra-kernel: ❨30❩.
     *Source*
          *note binary-operations.lisp: ❨11❩.
 -- Function: %product-vector-array (vector array &optional result)
     Return the result of the array premultiplied by the vector.
     *Package*
          *note linear-algebra-kernel: ❨30❩.
     *Source*
          *note binary-operations.lisp: ❨11❩.
 -- Function: %replace-hermitian-matrix-off-diagonal (matrix1 matrix2
          row1 column1 row2 column2 numrows numcols)
     Destructively replace a subset off the diagonal of matrix1 with
     matrix2.
     *Package*
          *note linear-algebra: ❨31❩.
     *Source*
          *note hermitian-matrix.lisp: ❨28❩.
 -- Function: %replace-hermitian-matrix-on-diagonal (matrix1 matrix2
          row1 column1 row2 column2 numrows numcols)
     Destructively replace a subset on the diagonal of matrix1 with
     matrix2.
     *Package*
          *note linear-algebra: ❨31❩.
     *Source*
          *note hermitian-matrix.lisp: ❨28❩.
 -- Function: %replace-symmetric-matrix-off-diagonal (matrix1 matrix2
          row1 column1 row2 column2 numrows numcols)
     Destructively replace a subset off the diagonal of matrix1 with
     matrix2.
     *Package*
          *note linear-algebra: ❨31❩.
     *Source*
          *note symmetric-matrix.lisp: ❨29❩.
 -- Function: %replace-symmetric-matrix-on-diagonal (matrix1 matrix2
          row1 column1 row2 column2 numrows numcols)
     Destructively replace a subset on the diagonal of matrix1 with
     matrix2.
     *Package*
          *note linear-algebra: ❨31❩.
     *Source*
          *note symmetric-matrix.lisp: ❨29❩.
 -- Function: %scaled-product-array-array (scalar array1 array2
          &optional result)
     Return the scaled result of the product of 2 arrays.
     *Package*
          *note linear-algebra-kernel: ❨30❩.
     *Source*
          *note binary-operations.lisp: ❨11❩.
 -- Function: %scaled-product-array-vector (scalar array vector
          &optional result)
     Return the result of the array postmultiplied by the vector and
     scaled.
     *Package*
          *note linear-algebra-kernel: ❨30❩.
     *Source*
          *note binary-operations.lisp: ❨11❩.
 -- Function: %scaled-product-vector-array (scalar vector array
          &optional result)
     Return the result of the array premultiplied by the vector and
     scaled.
     *Package*
          *note linear-algebra-kernel: ❨30❩.
     *Source*
          *note binary-operations.lisp: ❨11❩.
 -- Function: %setf-hermitian-submatrix-off-diagonal (matrix data row
          column numrows numcols)
     *Package*
          *note linear-algebra: ❨31❩.
     *Source*
          *note hermitian-matrix.lisp: ❨28❩.
 -- Function: %setf-hermitian-submatrix-on-diagonal (matrix data row
          numrows)
     *Package*
          *note linear-algebra: ❨31❩.
     *Source*
          *note hermitian-matrix.lisp: ❨28❩.
 -- Function: %setf-symmetric-submatrix-off-diagonal (matrix data row
          column numrows numcols)
     *Package*
          *note linear-algebra: ❨31❩.
     *Source*
          *note symmetric-matrix.lisp: ❨29❩.
 -- Function: %setf-symmetric-submatrix-on-diagonal (matrix data row
          numrows)
     *Package*
          *note linear-algebra: ❨31❩.
     *Source*
          *note symmetric-matrix.lisp: ❨29❩.
 -- Function: %vector1<-vector1-op-vector2 (operation vector1 vector2)
     Store the result of the binary operation in vector1.
     *Package*
          *note linear-algebra-kernel: ❨30❩.
     *Source*
          *note binary-operations.lisp: ❨11❩.
 -- Function: %vector<-vector1-op-vector2 (operation vector1 vector2)
     Store the result of the binary operation in a new vector.
     *Package*
          *note linear-algebra-kernel: ❨30❩.
     *Source*
          *note binary-operations.lisp: ❨11❩.
 -- Function: column-pivot (array pivot-selection-vector column)
     Return the LR pivot of the array.
     *Package*
          *note linear-algebra-kernel: ❨30❩.
     *Source*
          *note gauss.lisp: ❨13❩.
 -- Function: column-pivot-search (array column)
     Return the row index of the maximum value in the column.
     *Package*
          *note linear-algebra-kernel: ❨30❩.
     *Source*
          *note gauss.lisp: ❨13❩.
 -- Function: gauss-backsubstitution (factored solution)
     Calculate the solution by backsubstitution.
     *Package*
          *note linear-algebra-kernel: ❨30❩.
     *Source*
          *note gauss.lisp: ❨13❩.
 -- Function: gauss-factorization (array)
     Return the Gauss factorization of the array.
     *Package*
          *note linear-algebra-kernel: ❨30❩.
     *Source*
          *note gauss.lisp: ❨13❩.
 -- Function: gauss-update (factored pivot-selection-vector vector)
     Update the solution vector.
     *Package*
          *note linear-algebra-kernel: ❨30❩.
     *Source*
          *note gauss.lisp: ❨13❩.
 -- Function: initialize-pivot-selection-vector (size)
     Return a new, initialized, pivot vector.
     *Package*
          *note linear-algebra-kernel: ❨30❩.
     *Source*
          *note gauss.lisp: ❨13❩.
 -- Function: swap-rows (array i0 jth)
     Interchange the
     *Package*
          *note linear-algebra-kernel: ❨30❩.
     *Source*
          *note gauss.lisp: ❨13❩.
 -- Function: tridiagonal-backsubstitution (array vector)
     Perform backsubstitution to obtain the solution.
     *Package*
          *note linear-algebra-kernel: ❨30❩.
     *Source*
          *note tridiagonal.lisp: ❨16❩.
 -- Function: tridiagonal-factorization (array)
     Return the factorization of the tridiagonal array.
     *Package*
          *note linear-algebra-kernel: ❨30❩.
     *Source*
          *note tridiagonal.lisp: ❨16❩.
 -- Function: tridiagonal-update (array vector)
     Update the solution vector using the factored array.
     *Package*
          *note linear-algebra-kernel: ❨30❩.
     *Source*
          *note tridiagonal.lisp: ❨16❩.
 -- Function: unit-pivot-value (pivot-selection-vector row column
          &optional array-type)
     Return 1.0 if column equals the value at row of the pivot selection
     vector, otherwise 0.0.
     *Package*
          *note linear-algebra-kernel: ❨30❩.
     *Source*
          *note gauss.lisp: ❨13❩.
 -- Function: zero-array (rows columns &optional element-type)
     Return an array of zeros.
     *Package*
          *note linear-algebra-kernel: ❨30❩.
     *Source*
          *note utility.lisp: ❨8❩.
 -- Function: zero-vector (size &optional element-type)
     Return a vector of zeros.
     *Package*
          *note linear-algebra-kernel: ❨30❩.
     *Source*
          *note utility.lisp: ❨8❩.


File: linear-algebra.info,  Node: Private generic functions,  Prev: Private ordinary functions,  Up: Internals

5.2.2 Generic functions
-----------------------

 -- Generic Function: %norm (data measure)
     *Package*
          *note linear-algebra: ❨31❩.
     *Methods*
           -- Method: %norm ((data list) (measure (eql :infinity)))
               Return the infinity, or maximum, norm of vector.
               *Source*
                    *note list.lisp: ❨22❩.
           -- Method: %norm ((data list) (measure integer))
               Return the p-norm of the vector.
               *Source*
                    *note list.lisp: ❨22❩.
           -- Method: %norm ((data list) (measure (eql 2)))
               Return the Euclidean norm of the vector.
               *Source*
                    *note list.lisp: ❨22❩.
           -- Method: %norm ((data list) (measure (eql 1)))
               Return the Taxicab norm of the list.
               *Source*
                    *note list.lisp: ❨22❩.
 -- Generic Reader: contents (object)
     *Package*
          *note linear-algebra: ❨31❩.
     *Methods*
           -- Reader Method: contents ((dense-matrix *note dense-matrix:
                    ❨315❩.))
               automatically generated reader method
               *Source*
                    *note dense-matrix.lisp: ❨26❩.
               *Target Slot*
                    *note contents: ❨316❩.
           -- Reader Method: contents ((data-vector *note data-vector:
                    ❨183❩.))
               automatically generated reader method
               *Source*
                    *note data-vector.lisp: ❨25❩.
               *Target Slot*
                    *note contents: ❨184❩.
           -- Reader Method: contents ((permutation-matrix *note
                    permutation-matrix: ❨317❩.))
               automatically generated reader method
               *Source*
                    *note permutation-matrix.lisp: ❨21❩.
               *Target Slot*
                    *note contents: ❨318❩.
           -- Reader Method: contents ((identity-matrix *note
                    identity-matrix: ❨191❩.))
               automatically generated reader method
               *Source*
                    *note identity-matrix.lisp: ❨20❩.
               *Target Slot*
                    *note contents: ❨193❩.
 -- Generic Writer: (setf contents) (object)
     *Package*
          *note linear-algebra: ❨31❩.
     *Methods*
           -- Writer Method: (setf contents) ((dense-matrix *note
                    dense-matrix: ❨315❩.))
               automatically generated writer method
               *Source*
                    *note dense-matrix.lisp: ❨26❩.
               *Target Slot*
                    *note contents: ❨316❩.
           -- Writer Method: (setf contents) ((data-vector *note
                    data-vector: ❨183❩.))
               automatically generated writer method
               *Source*
                    *note data-vector.lisp: ❨25❩.
               *Target Slot*
                    *note contents: ❨184❩.
           -- Writer Method: (setf contents) ((permutation-matrix *note
                    permutation-matrix: ❨317❩.))
               automatically generated writer method
               *Source*
                    *note permutation-matrix.lisp: ❨21❩.
               *Target Slot*
                    *note contents: ❨318❩.
 -- Generic Function: initialize-matrix-contents (matrix
          initial-contents initargs)
     Initialize the matrix with data.
     *Package*
          *note linear-algebra: ❨31❩.
     *Source*
          *note matrix.lisp: ❨19❩.
     *Methods*
           -- Method: initialize-matrix-contents ((matrix *note
                    symmetric-matrix: ❨314❩.) (initial-contents array)
                    initargs)
               Initialize a symmetric matrix.
               *Source*
                    *note symmetric-matrix.lisp: ❨29❩.
           -- Method: initialize-matrix-contents ((matrix *note
                    symmetric-matrix: ❨314❩.) (initial-contents vector)
                    initargs)
               Initialize a symmetric matrix.
               *Source*
                    *note symmetric-matrix.lisp: ❨29❩.
           -- Method: initialize-matrix-contents ((matrix *note
                    symmetric-matrix: ❨314❩.) (initial-contents list)
                    initargs)
               Initialize a symmetric matrix.
               *Source*
                    *note symmetric-matrix.lisp: ❨29❩.
           -- Method: initialize-matrix-contents ((matrix *note
                    hermitian-matrix: ❨363❩.) (initial-contents array)
                    initargs)
               Initialize the Hermitian matrix with a 2D array.
               *Source*
                    *note hermitian-matrix.lisp: ❨28❩.
           -- Method: initialize-matrix-contents ((matrix *note
                    hermitian-matrix: ❨363❩.) (initial-contents vector)
                    initargs)
               Initialize the Hermitian matrix with a nested sequence.
               *Source*
                    *note hermitian-matrix.lisp: ❨28❩.
           -- Method: initialize-matrix-contents ((matrix *note
                    hermitian-matrix: ❨363❩.) (initial-contents list)
                    initargs)
               Initialize the Hermitian matrix with a nested sequence.
               *Source*
                    *note hermitian-matrix.lisp: ❨28❩.
           -- Method: initialize-matrix-contents ((matrix *note
                    hermitian-matrix: ❨363❩.) (initial-element complex)
                    initargs)
               It is an error to initialize a Hermitian matrix with a
               complex element.
               *Source*
                    *note hermitian-matrix.lisp: ❨28❩.
           -- Method: initialize-matrix-contents :before ((matrix *note
                    square-matrix: ❨240❩.) initial-contents initargs)
               Verify that the number of rows and colums are equal.
               *Source*
                    *note square-matrix.lisp: ❨27❩.
           -- Method: initialize-matrix-contents ((matrix *note
                    dense-matrix: ❨315❩.) (initial-contents array)
                    initargs)
               Verify that the size of the data is valid.
               *Source*
                    *note dense-matrix.lisp: ❨26❩.
           -- Method: initialize-matrix-contents ((matrix *note
                    dense-matrix: ❨315❩.) (initial-contents vector)
                    initargs)
               Initialize the dense matrix with a nested sequence.
               *Source*
                    *note dense-matrix.lisp: ❨26❩.
           -- Method: initialize-matrix-contents ((matrix *note
                    dense-matrix: ❨315❩.) (initial-contents list)
                    initargs)
               Initialize the dense matrix with a nested sequence.
               *Source*
                    *note dense-matrix.lisp: ❨26❩.
           -- Method: initialize-matrix-contents ((matrix *note
                    dense-matrix: ❨315❩.) (initial-element number)
                    initargs)
               Initialize the dense matrix with an initial element.
               *Source*
                    *note dense-matrix.lisp: ❨26❩.
           -- Method: initialize-matrix-contents ((matrix *note
                    permutation-matrix: ❨317❩.) (initial-contents array)
                    initargs)
               Initialize the permutation matrix with a 2D array.
               *Source*
                    *note permutation-matrix.lisp: ❨21❩.
           -- Method: initialize-matrix-contents ((matrix *note
                    permutation-matrix: ❨317❩.) (initial-contents
                    vector) initargs)
               Initialize the permutation matrix with a list.
               *Source*
                    *note permutation-matrix.lisp: ❨21❩.
           -- Method: initialize-matrix-contents ((matrix *note
                    permutation-matrix: ❨317❩.) (initial-contents list)
                    initargs)
               Initialize the permutation matrix with a list.
               *Source*
                    *note permutation-matrix.lisp: ❨21❩.
 -- Generic Reader: size (object)
     *Package*
          *note linear-algebra: ❨31❩.
     *Methods*
           -- Reader Method: size ((identity-matrix *note
                    identity-matrix: ❨191❩.))
               automatically generated reader method
               *Source*
                    *note identity-matrix.lisp: ❨20❩.
               *Target Slot*
                    *note size: ❨192❩.


File: linear-algebra.info,  Node: Indexes,  Prev: Definitions,  Up: Top

Appendix A Indexes
******************

* Menu:

* Concept index::
* Function index::
* Variable index::
* Data type index::


File: linear-algebra.info,  Node: Concept index,  Next: Function index,  Prev: Indexes,  Up: Indexes

A.1 Concepts
============


File: linear-algebra.info,  Node: Function index,  Next: Variable index,  Prev: Concept index,  Up: Indexes

A.2 Functions
=============

 [index ]
* Menu:

* %abs-vector:                           Private ordinary functions.
                                                             (line    6)
* %array1<-array1-op-array2:             Private ordinary functions.
                                                             (line   12)
* %array<-array1-op-array2:              Private ordinary functions.
                                                             (line   17)
* %default-cg-epsilon:                   Private ordinary functions.
                                                             (line   22)
* %initialize-cg-residual:               Private ordinary functions.
                                                             (line   28)
* %initialize-cg-solution:               Private ordinary functions.
                                                             (line   34)
* %initialize-hermitian-matrix-with-seq: Private ordinary functions.
                                                             (line   40)
* %initialize-permutation-matrix-with-seq: Private ordinary functions.
                                                             (line   47)
* %initialize-symmetric-matrix-with-seq: Private ordinary functions.
                                                             (line   52)
* %map-data-vector:                      Private ordinary functions.
                                                             (line   59)
* %map-into-data-vector:                 Private ordinary functions.
                                                             (line   66)
* %negative-residual:                    Private ordinary functions.
                                                             (line   73)
* %norm:                                 Private generic functions.
                                                             (line    6)
* %norm <1>:                             Private generic functions.
                                                             (line   10)
* %norm <2>:                             Private generic functions.
                                                             (line   14)
* %norm <3>:                             Private generic functions.
                                                             (line   18)
* %norm <4>:                             Private generic functions.
                                                             (line   22)
* %product-array-array:                  Private ordinary functions.
                                                             (line   79)
* %product-array-vector:                 Private ordinary functions.
                                                             (line   85)
* %product-vector-array:                 Private ordinary functions.
                                                             (line   91)
* %replace-hermitian-matrix-off-diagonal: Private ordinary functions.
                                                             (line   97)
* %replace-hermitian-matrix-on-diagonal: Private ordinary functions.
                                                             (line  105)
* %replace-symmetric-matrix-off-diagonal: Private ordinary functions.
                                                             (line  113)
* %replace-symmetric-matrix-on-diagonal: Private ordinary functions.
                                                             (line  121)
* %scaled-product-array-array:           Private ordinary functions.
                                                             (line  129)
* %scaled-product-array-vector:          Private ordinary functions.
                                                             (line  136)
* %scaled-product-vector-array:          Private ordinary functions.
                                                             (line  144)
* %setf-hermitian-submatrix-off-diagonal: Private ordinary functions.
                                                             (line  152)
* %setf-hermitian-submatrix-on-diagonal: Private ordinary functions.
                                                             (line  158)
* %setf-symmetric-submatrix-off-diagonal: Private ordinary functions.
                                                             (line  164)
* %setf-symmetric-submatrix-on-diagonal: Private ordinary functions.
                                                             (line  170)
* %vector1<-vector1-op-vector2:          Private ordinary functions.
                                                             (line  176)
* %vector<-vector1-op-vector2:           Private ordinary functions.
                                                             (line  182)
* (setf contents):                       Private generic functions.
                                                             (line   58)
* (setf contents) <1>:                   Private generic functions.
                                                             (line   62)
* (setf contents) <2>:                   Private generic functions.
                                                             (line   69)
* (setf contents) <3>:                   Private generic functions.
                                                             (line   76)
* (setf mref):                           Public generic functions.
                                                             (line  391)
* (setf mref) <1>:                       Public generic functions.
                                                             (line  398)
* (setf mref) <2>:                       Public generic functions.
                                                             (line  403)
* (setf mref) <3>:                       Public generic functions.
                                                             (line  408)
* (setf mref) <4>:                       Public generic functions.
                                                             (line  413)
* (setf submatrix):                      Public generic functions.
                                                             (line 1104)
* (setf submatrix) <1>:                  Public generic functions.
                                                             (line 1112)
* (setf submatrix) <2>:                  Public generic functions.
                                                             (line 1118)
* (setf submatrix) <3>:                  Public generic functions.
                                                             (line 1124)
* (setf submatrix) <4>:                  Public generic functions.
                                                             (line 1130)
* (setf submatrix) <5>:                  Public generic functions.
                                                             (line 1136)
* (setf subvector):                      Public generic functions.
                                                             (line 1211)
* (setf subvector) <1>:                  Public generic functions.
                                                             (line 1218)
* (setf vref):                           Public generic functions.
                                                             (line 1344)
* (setf vref) <1>:                       Public generic functions.
                                                             (line 1351)
* add:                                   Public generic functions.
                                                             (line    6)
* add <1>:                               Public generic functions.
                                                             (line   14)
* add <2>:                               Public generic functions.
                                                             (line   19)
* add <3>:                               Public generic functions.
                                                             (line   25)
* add <4>:                               Public generic functions.
                                                             (line   31)
* add <5>:                               Public generic functions.
                                                             (line   38)
* add <6>:                               Public generic functions.
                                                             (line   44)
* add <7>:                               Public generic functions.
                                                             (line   49)
* add <8>:                               Public generic functions.
                                                             (line   55)
* add-array:                             Public ordinary functions.
                                                             (line    6)
* add-vector:                            Public ordinary functions.
                                                             (line   12)
* apply-rotation:                        Public generic functions.
                                                             (line   60)
* apply-rotation <1>:                    Public generic functions.
                                                             (line   67)
* apply-rotation <2>:                    Public generic functions.
                                                             (line   73)
* column-pivot:                          Private ordinary functions.
                                                             (line  188)
* column-pivot-search:                   Private ordinary functions.
                                                             (line  194)
* column-vector:                         Public ordinary functions.
                                                             (line   18)
* column-vector-p:                       Public ordinary functions.
                                                             (line   24)
* common-array-element-type:             Public ordinary functions.
                                                             (line   30)
* common-class-of:                       Public ordinary functions.
                                                             (line   36)
* compatible-dimensions-p:               Public generic functions.
                                                             (line   79)
* compatible-dimensions-p <1>:           Public generic functions.
                                                             (line   88)
* compatible-dimensions-p <2>:           Public generic functions.
                                                             (line   95)
* compatible-dimensions-p <3>:           Public generic functions.
                                                             (line  102)
* compatible-dimensions-p <4>:           Public generic functions.
                                                             (line  108)
* compatible-dimensions-p <5>:           Public generic functions.
                                                             (line  112)
* compatible-dimensions-p <6>:           Public generic functions.
                                                             (line  116)
* compatible-dimensions-p <7>:           Public generic functions.
                                                             (line  120)
* compatible-dimensions-p <8>:           Public generic functions.
                                                             (line  124)
* complex-equal:                         Public ordinary functions.
                                                             (line   42)
* conjugate-gradient-solver:             Public ordinary functions.
                                                             (line   48)
* contents:                              Private generic functions.
                                                             (line   26)
* contents <1>:                          Private generic functions.
                                                             (line   30)
* contents <2>:                          Private generic functions.
                                                             (line   37)
* contents <3>:                          Private generic functions.
                                                             (line   44)
* contents <4>:                          Private generic functions.
                                                             (line   51)
* copy-array:                            Public generic functions.
                                                             (line  128)
* copy-array <1>:                        Public generic functions.
                                                             (line  135)
* copy-array <2>:                        Public generic functions.
                                                             (line  137)
* copy-matrix:                           Public generic functions.
                                                             (line  139)
* copy-matrix <1>:                       Public generic functions.
                                                             (line  146)
* copy-matrix <2>:                       Public generic functions.
                                                             (line  150)
* copy-matrix <3>:                       Public generic functions.
                                                             (line  155)
* copy-vector:                           Public generic functions.
                                                             (line  160)
* copy-vector <1>:                       Public generic functions.
                                                             (line  167)
* dense-matrix-p:                        Public ordinary functions.
                                                             (line   55)
* dovector:                              Public macros.      (line    6)
* Function, %abs-vector:                 Private ordinary functions.
                                                             (line    7)
* Function, %array1<-array1-op-array2:   Private ordinary functions.
                                                             (line   13)
* Function, %array<-array1-op-array2:    Private ordinary functions.
                                                             (line   18)
* Function, %default-cg-epsilon:         Private ordinary functions.
                                                             (line   23)
* Function, %initialize-cg-residual:     Private ordinary functions.
                                                             (line   29)
* Function, %initialize-cg-solution:     Private ordinary functions.
                                                             (line   35)
* Function, %initialize-hermitian-matrix-with-seq: Private ordinary functions.
                                                             (line   42)
* Function, %initialize-permutation-matrix-with-seq: Private ordinary functions.
                                                             (line   48)
* Function, %initialize-symmetric-matrix-with-seq: Private ordinary functions.
                                                             (line   54)
* Function, %map-data-vector:            Private ordinary functions.
                                                             (line   61)
* Function, %map-into-data-vector:       Private ordinary functions.
                                                             (line   68)
* Function, %negative-residual:          Private ordinary functions.
                                                             (line   74)
* Function, %product-array-array:        Private ordinary functions.
                                                             (line   80)
* Function, %product-array-vector:       Private ordinary functions.
                                                             (line   86)
* Function, %product-vector-array:       Private ordinary functions.
                                                             (line   92)
* Function, %replace-hermitian-matrix-off-diagonal: Private ordinary functions.
                                                             (line   99)
* Function, %replace-hermitian-matrix-on-diagonal: Private ordinary functions.
                                                             (line  107)
* Function, %replace-symmetric-matrix-off-diagonal: Private ordinary functions.
                                                             (line  115)
* Function, %replace-symmetric-matrix-on-diagonal: Private ordinary functions.
                                                             (line  123)
* Function, %scaled-product-array-array: Private ordinary functions.
                                                             (line  131)
* Function, %scaled-product-array-vector: Private ordinary functions.
                                                             (line  138)
* Function, %scaled-product-vector-array: Private ordinary functions.
                                                             (line  146)
* Function, %setf-hermitian-submatrix-off-diagonal: Private ordinary functions.
                                                             (line  154)
* Function, %setf-hermitian-submatrix-on-diagonal: Private ordinary functions.
                                                             (line  160)
* Function, %setf-symmetric-submatrix-off-diagonal: Private ordinary functions.
                                                             (line  166)
* Function, %setf-symmetric-submatrix-on-diagonal: Private ordinary functions.
                                                             (line  172)
* Function, %vector1<-vector1-op-vector2: Private ordinary functions.
                                                             (line  177)
* Function, %vector<-vector1-op-vector2: Private ordinary functions.
                                                             (line  183)
* Function, add-array:                   Public ordinary functions.
                                                             (line    7)
* Function, add-vector:                  Public ordinary functions.
                                                             (line   13)
* Function, column-pivot:                Private ordinary functions.
                                                             (line  189)
* Function, column-pivot-search:         Private ordinary functions.
                                                             (line  195)
* Function, column-vector:               Public ordinary functions.
                                                             (line   19)
* Function, column-vector-p:             Public ordinary functions.
                                                             (line   25)
* Function, common-array-element-type:   Public ordinary functions.
                                                             (line   31)
* Function, common-class-of:             Public ordinary functions.
                                                             (line   37)
* Function, complex-equal:               Public ordinary functions.
                                                             (line   43)
* Function, conjugate-gradient-solver:   Public ordinary functions.
                                                             (line   50)
* Function, dense-matrix-p:              Public ordinary functions.
                                                             (line   56)
* Function, gauss-backsubstitution:      Private ordinary functions.
                                                             (line  201)
* Function, gauss-factorization:         Private ordinary functions.
                                                             (line  207)
* Function, gauss-invert:                Public ordinary functions.
                                                             (line   62)
* Function, gauss-solver:                Public ordinary functions.
                                                             (line   68)
* Function, gauss-update:                Private ordinary functions.
                                                             (line  213)
* Function, givens-rotation:             Public ordinary functions.
                                                             (line   74)
* Function, hermitian-cholesky-decomposition: Public ordinary functions.
                                                             (line   80)
* Function, hermitian-cholesky-invert:   Public ordinary functions.
                                                             (line   86)
* Function, hermitian-cholesky-solver:   Public ordinary functions.
                                                             (line   93)
* Function, hermitian-matrix-p:          Public ordinary functions.
                                                             (line  100)
* Function, householder-reflection:      Public ordinary functions.
                                                             (line  106)
* Function, identity-matrix-p:           Public ordinary functions.
                                                             (line  112)
* Function, initialize-pivot-selection-vector: Private ordinary functions.
                                                             (line  219)
* Function, inner-product-vector:        Public ordinary functions.
                                                             (line  118)
* Function, jacobi-rotation:             Public ordinary functions.
                                                             (line  124)
* Function, make-matrix:                 Public ordinary functions.
                                                             (line  132)
* Function, make-vector:                 Public ordinary functions.
                                                             (line  139)
* Function, matrix-validated-range:      Public ordinary functions.
                                                             (line  146)
* Function, matrixp:                     Public ordinary functions.
                                                             (line  152)
* Function, nadd-array:                  Public ordinary functions.
                                                             (line  158)
* Function, nadd-vector:                 Public ordinary functions.
                                                             (line  164)
* Function, nsubtract-array:             Public ordinary functions.
                                                             (line  170)
* Function, nsubtract-vector:            Public ordinary functions.
                                                             (line  176)
* Function, number-equal:                Public ordinary functions.
                                                             (line  182)
* Function, permutation-matrix-p:        Public ordinary functions.
                                                             (line  189)
* Function, product-array-array:         Public ordinary functions.
                                                             (line  196)
* Function, product-array-vector:        Public ordinary functions.
                                                             (line  203)
* Function, product-vector-array:        Public ordinary functions.
                                                             (line  211)
* Function, root-free-hermitian-cholesky-decomposition: Public ordinary functions.
                                                             (line  218)
* Function, root-free-symmetric-cholesky-decomposition: Public ordinary functions.
                                                             (line  224)
* Function, row-vector:                  Public ordinary functions.
                                                             (line  230)
* Function, row-vector-p:                Public ordinary functions.
                                                             (line  236)
* Function, specific-array-element-type: Public ordinary functions.
                                                             (line  242)
* Function, square-matrix-p:             Public ordinary functions.
                                                             (line  248)
* Function, subtract-array:              Public ordinary functions.
                                                             (line  254)
* Function, subtract-vector:             Public ordinary functions.
                                                             (line  260)
* Function, sumsq-column:                Public ordinary functions.
                                                             (line  266)
* Function, sumsq-row:                   Public ordinary functions.
                                                             (line  273)
* Function, sumsq2:                      Public ordinary functions.
                                                             (line  280)
* Function, sumsq3:                      Public ordinary functions.
                                                             (line  286)
* Function, swap-rows:                   Private ordinary functions.
                                                             (line  225)
* Function, symmetric-cholesky-decomposition: Public ordinary functions.
                                                             (line  292)
* Function, symmetric-cholesky-invert:   Public ordinary functions.
                                                             (line  298)
* Function, symmetric-cholesky-solver:   Public ordinary functions.
                                                             (line  305)
* Function, symmetric-matrix-p:          Public ordinary functions.
                                                             (line  312)
* Function, tridiagonal-backsubstitution: Private ordinary functions.
                                                             (line  231)
* Function, tridiagonal-factorization:   Private ordinary functions.
                                                             (line  237)
* Function, tridiagonal-solver:          Public ordinary functions.
                                                             (line  318)
* Function, tridiagonal-update:          Private ordinary functions.
                                                             (line  243)
* Function, unit-pivot-value:            Private ordinary functions.
                                                             (line  250)
* Function, zero-array:                  Private ordinary functions.
                                                             (line  257)
* Function, zero-vector:                 Private ordinary functions.
                                                             (line  263)
* gauss-backsubstitution:                Private ordinary functions.
                                                             (line  200)
* gauss-factorization:                   Private ordinary functions.
                                                             (line  206)
* gauss-invert:                          Public ordinary functions.
                                                             (line   61)
* gauss-solver:                          Public ordinary functions.
                                                             (line   67)
* gauss-update:                          Private ordinary functions.
                                                             (line  212)
* Generic Function, %norm:               Private generic functions.
                                                             (line    7)
* Generic Function, (setf contents):     Private generic functions.
                                                             (line   59)
* Generic Function, (setf mref):         Public generic functions.
                                                             (line  392)
* Generic Function, (setf submatrix):    Public generic functions.
                                                             (line 1106)
* Generic Function, (setf subvector):    Public generic functions.
                                                             (line 1212)
* Generic Function, (setf vref):         Public generic functions.
                                                             (line 1345)
* Generic Function, add:                 Public generic functions.
                                                             (line    8)
* Generic Function, apply-rotation:      Public generic functions.
                                                             (line   61)
* Generic Function, compatible-dimensions-p: Public generic functions.
                                                             (line   81)
* Generic Function, contents:            Private generic functions.
                                                             (line   27)
* Generic Function, copy-array:          Public generic functions.
                                                             (line  129)
* Generic Function, copy-matrix:         Public generic functions.
                                                             (line  140)
* Generic Function, copy-vector:         Public generic functions.
                                                             (line  161)
* Generic Function, initialize-matrix-contents: Private generic functions.
                                                             (line   85)
* Generic Function, invert:              Public generic functions.
                                                             (line  172)
* Generic Function, left-permute:        Public generic functions.
                                                             (line  199)
* Generic Function, map-into-vector:     Public generic functions.
                                                             (line  211)
* Generic Function, map-vector:          Public generic functions.
                                                             (line  232)
* Generic Function, matrix-column-dimension: Public generic functions.
                                                             (line  251)
* Generic Function, matrix-dimensions:   Public generic functions.
                                                             (line  275)
* Generic Function, matrix-element-type: Public generic functions.
                                                             (line  297)
* Generic Function, matrix-in-bounds-p:  Public generic functions.
                                                             (line  319)
* Generic Function, matrix-row-dimension: Public generic functions.
                                                             (line  346)
* Generic Function, mref:                Public generic functions.
                                                             (line  370)
* Generic Function, nadd:                Public generic functions.
                                                             (line  420)
* Generic Function, napply-rotation:     Public generic functions.
                                                             (line  486)
* Generic Function, ninvert:             Public generic functions.
                                                             (line  505)
* Generic Function, norm:                Public generic functions.
                                                             (line  532)
* Generic Function, norm-array:          Public generic functions.
                                                             (line  559)
* Generic Function, norm-vector:         Public generic functions.
                                                             (line  576)
* Generic Function, nscale:              Public generic functions.
                                                             (line  592)
* Generic Function, nsolve:              Public generic functions.
                                                             (line  621)
* Generic Function, nsubtract:           Public generic functions.
                                                             (line  653)
* Generic Function, ntranspose:          Public generic functions.
                                                             (line  721)
* Generic Function, permute:             Public generic functions.
                                                             (line  759)
* Generic Function, product:             Public generic functions.
                                                             (line  831)
* Generic Function, replace-matrix:      Public generic functions.
                                                             (line  916)
* Generic Function, replace-vector:      Public generic functions.
                                                             (line  959)
* Generic Function, right-permute:       Public generic functions.
                                                             (line  973)
* Generic Function, scale:               Public generic functions.
                                                             (line  984)
* Generic Function, scaled-binary-op:    Public generic functions.
                                                             (line 1013)
* Generic Function, size:                Private generic functions.
                                                             (line  182)
* Generic Function, solve:               Public generic functions.
                                                             (line 1041)
* Generic Function, submatrix:           Public generic functions.
                                                             (line 1073)
* Generic Function, subtract:            Public generic functions.
                                                             (line 1144)
* Generic Function, subvector:           Public generic functions.
                                                             (line 1200)
* Generic Function, sump:                Public generic functions.
                                                             (line 1224)
* Generic Function, sumsq:               Public generic functions.
                                                             (line 1240)
* Generic Function, transpose:           Public generic functions.
                                                             (line 1256)
* Generic Function, vector-element-type: Public generic functions.
                                                             (line 1297)
* Generic Function, vector-in-bounds-p:  Public generic functions.
                                                             (line 1309)
* Generic Function, vector-length:       Public generic functions.
                                                             (line 1322)
* Generic Function, vref:                Public generic functions.
                                                             (line 1333)
* givens-rotation:                       Public ordinary functions.
                                                             (line   73)
* hermitian-cholesky-decomposition:      Public ordinary functions.
                                                             (line   79)
* hermitian-cholesky-invert:             Public ordinary functions.
                                                             (line   85)
* hermitian-cholesky-solver:             Public ordinary functions.
                                                             (line   92)
* hermitian-matrix-p:                    Public ordinary functions.
                                                             (line   99)
* householder-reflection:                Public ordinary functions.
                                                             (line  105)
* identity-matrix-p:                     Public ordinary functions.
                                                             (line  111)
* initialize-instance:                   Public standalone methods.
                                                             (line    6)
* initialize-instance <1>:               Public standalone methods.
                                                             (line   11)
* initialize-instance <2>:               Public standalone methods.
                                                             (line   17)
* initialize-instance <3>:               Public standalone methods.
                                                             (line   22)
* initialize-matrix-contents:            Private generic functions.
                                                             (line   83)
* initialize-matrix-contents <1>:        Private generic functions.
                                                             (line   91)
* initialize-matrix-contents <2>:        Private generic functions.
                                                             (line   97)
* initialize-matrix-contents <3>:        Private generic functions.
                                                             (line  103)
* initialize-matrix-contents <4>:        Private generic functions.
                                                             (line  109)
* initialize-matrix-contents <5>:        Private generic functions.
                                                             (line  115)
* initialize-matrix-contents <6>:        Private generic functions.
                                                             (line  121)
* initialize-matrix-contents <7>:        Private generic functions.
                                                             (line  127)
* initialize-matrix-contents <8>:        Private generic functions.
                                                             (line  134)
* initialize-matrix-contents <9>:        Private generic functions.
                                                             (line  139)
* initialize-matrix-contents <10>:       Private generic functions.
                                                             (line  145)
* initialize-matrix-contents <11>:       Private generic functions.
                                                             (line  151)
* initialize-matrix-contents <12>:       Private generic functions.
                                                             (line  157)
* initialize-matrix-contents <13>:       Private generic functions.
                                                             (line  163)
* initialize-matrix-contents <14>:       Private generic functions.
                                                             (line  169)
* initialize-matrix-contents <15>:       Private generic functions.
                                                             (line  175)
* initialize-pivot-selection-vector:     Private ordinary functions.
                                                             (line  218)
* inner-product-vector:                  Public ordinary functions.
                                                             (line  117)
* invert:                                Public generic functions.
                                                             (line  171)
* invert <1>:                            Public generic functions.
                                                             (line  178)
* invert <2>:                            Public generic functions.
                                                             (line  182)
* invert <3>:                            Public generic functions.
                                                             (line  186)
* invert <4>:                            Public generic functions.
                                                             (line  190)
* invert <5>:                            Public generic functions.
                                                             (line  194)
* jacobi-rotation:                       Public ordinary functions.
                                                             (line  123)
* left-permute:                          Public generic functions.
                                                             (line  198)
* left-permute <1>:                      Public generic functions.
                                                             (line  205)
* left-permute <2>:                      Public generic functions.
                                                             (line  207)
* Macro, dovector:                       Public macros.      (line    7)
* make-matrix:                           Public ordinary functions.
                                                             (line  130)
* make-vector:                           Public ordinary functions.
                                                             (line  137)
* map-into-vector:                       Public generic functions.
                                                             (line  209)
* map-into-vector <1>:                   Public generic functions.
                                                             (line  218)
* map-into-vector <2>:                   Public generic functions.
                                                             (line  224)
* map-vector:                            Public generic functions.
                                                             (line  230)
* map-vector <1>:                        Public generic functions.
                                                             (line  238)
* map-vector <2>:                        Public generic functions.
                                                             (line  244)
* matrix-column-dimension:               Public generic functions.
                                                             (line  250)
* matrix-column-dimension <1>:           Public generic functions.
                                                             (line  257)
* matrix-column-dimension <2>:           Public generic functions.
                                                             (line  262)
* matrix-column-dimension <3>:           Public generic functions.
                                                             (line  267)
* matrix-dimensions:                     Public generic functions.
                                                             (line  274)
* matrix-dimensions <1>:                 Public generic functions.
                                                             (line  281)
* matrix-dimensions <2>:                 Public generic functions.
                                                             (line  286)
* matrix-dimensions <3>:                 Public generic functions.
                                                             (line  291)
* matrix-element-type:                   Public generic functions.
                                                             (line  296)
* matrix-element-type <1>:               Public generic functions.
                                                             (line  303)
* matrix-element-type <2>:               Public generic functions.
                                                             (line  308)
* matrix-element-type <3>:               Public generic functions.
                                                             (line  313)
* matrix-in-bounds-p:                    Public generic functions.
                                                             (line  318)
* matrix-in-bounds-p <1>:                Public generic functions.
                                                             (line  326)
* matrix-in-bounds-p <2>:                Public generic functions.
                                                             (line  332)
* matrix-in-bounds-p <3>:                Public generic functions.
                                                             (line  339)
* matrix-row-dimension:                  Public generic functions.
                                                             (line  345)
* matrix-row-dimension <1>:              Public generic functions.
                                                             (line  352)
* matrix-row-dimension <2>:              Public generic functions.
                                                             (line  357)
* matrix-row-dimension <3>:              Public generic functions.
                                                             (line  362)
* matrix-validated-range:                Public ordinary functions.
                                                             (line  144)
* matrixp:                               Public ordinary functions.
                                                             (line  151)
* Method, %norm:                         Private generic functions.
                                                             (line   11)
* Method, %norm <1>:                     Private generic functions.
                                                             (line   15)
* Method, %norm <2>:                     Private generic functions.
                                                             (line   19)
* Method, %norm <3>:                     Private generic functions.
                                                             (line   23)
* Method, (setf contents):               Private generic functions.
                                                             (line   64)
* Method, (setf contents) <1>:           Private generic functions.
                                                             (line   71)
* Method, (setf contents) <2>:           Private generic functions.
                                                             (line   78)
* Method, (setf mref):                   Public generic functions.
                                                             (line  400)
* Method, (setf mref) <1>:               Public generic functions.
                                                             (line  405)
* Method, (setf mref) <2>:               Public generic functions.
                                                             (line  410)
* Method, (setf mref) <3>:               Public generic functions.
                                                             (line  415)
* Method, (setf submatrix):              Public generic functions.
                                                             (line 1115)
* Method, (setf submatrix) <1>:          Public generic functions.
                                                             (line 1121)
* Method, (setf submatrix) <2>:          Public generic functions.
                                                             (line 1127)
* Method, (setf submatrix) <3>:          Public generic functions.
                                                             (line 1133)
* Method, (setf submatrix) <4>:          Public generic functions.
                                                             (line 1139)
* Method, (setf subvector):              Public generic functions.
                                                             (line 1220)
* Method, (setf vref):                   Public generic functions.
                                                             (line 1353)
* Method, add:                           Public generic functions.
                                                             (line   16)
* Method, add <1>:                       Public generic functions.
                                                             (line   22)
* Method, add <2>:                       Public generic functions.
                                                             (line   27)
* Method, add <3>:                       Public generic functions.
                                                             (line   34)
* Method, add <4>:                       Public generic functions.
                                                             (line   41)
* Method, add <5>:                       Public generic functions.
                                                             (line   46)
* Method, add <6>:                       Public generic functions.
                                                             (line   51)
* Method, add <7>:                       Public generic functions.
                                                             (line   57)
* Method, apply-rotation:                Public generic functions.
                                                             (line   69)
* Method, apply-rotation <1>:            Public generic functions.
                                                             (line   76)
* Method, compatible-dimensions-p:       Public generic functions.
                                                             (line   91)
* Method, compatible-dimensions-p <1>:   Public generic functions.
                                                             (line   98)
* Method, compatible-dimensions-p <2>:   Public generic functions.
                                                             (line  104)
* Method, compatible-dimensions-p <3>:   Public generic functions.
                                                             (line  110)
* Method, compatible-dimensions-p <4>:   Public generic functions.
                                                             (line  114)
* Method, compatible-dimensions-p <5>:   Public generic functions.
                                                             (line  118)
* Method, compatible-dimensions-p <6>:   Public generic functions.
                                                             (line  122)
* Method, compatible-dimensions-p <7>:   Public generic functions.
                                                             (line  126)
* Method, contents:                      Private generic functions.
                                                             (line   32)
* Method, contents <1>:                  Private generic functions.
                                                             (line   39)
* Method, contents <2>:                  Private generic functions.
                                                             (line   46)
* Method, contents <3>:                  Private generic functions.
                                                             (line   53)
* Method, copy-array:                    Public generic functions.
                                                             (line  136)
* Method, copy-array <1>:                Public generic functions.
                                                             (line  138)
* Method, copy-matrix:                   Public generic functions.
                                                             (line  147)
* Method, copy-matrix <1>:               Public generic functions.
                                                             (line  152)
* Method, copy-matrix <2>:               Public generic functions.
                                                             (line  157)
* Method, copy-vector:                   Public generic functions.
                                                             (line  168)
* Method, initialize-instance:           Public standalone methods.
                                                             (line    9)
* Method, initialize-instance <1>:       Public standalone methods.
                                                             (line   14)
* Method, initialize-instance <2>:       Public standalone methods.
                                                             (line   20)
* Method, initialize-instance <3>:       Public standalone methods.
                                                             (line   25)
* Method, initialize-matrix-contents:    Private generic functions.
                                                             (line   94)
* Method, initialize-matrix-contents <1>: Private generic functions.
                                                             (line  100)
* Method, initialize-matrix-contents <2>: Private generic functions.
                                                             (line  106)
* Method, initialize-matrix-contents <3>: Private generic functions.
                                                             (line  112)
* Method, initialize-matrix-contents <4>: Private generic functions.
                                                             (line  118)
* Method, initialize-matrix-contents <5>: Private generic functions.
                                                             (line  124)
* Method, initialize-matrix-contents <6>: Private generic functions.
                                                             (line  130)
* Method, initialize-matrix-contents <7>: Private generic functions.
                                                             (line  136)
* Method, initialize-matrix-contents <8>: Private generic functions.
                                                             (line  142)
* Method, initialize-matrix-contents <9>: Private generic functions.
                                                             (line  148)
* Method, initialize-matrix-contents <10>: Private generic functions.
                                                             (line  154)
* Method, initialize-matrix-contents <11>: Private generic functions.
                                                             (line  160)
* Method, initialize-matrix-contents <12>: Private generic functions.
                                                             (line  166)
* Method, initialize-matrix-contents <13>: Private generic functions.
                                                             (line  172)
* Method, initialize-matrix-contents <14>: Private generic functions.
                                                             (line  178)
* Method, invert:                        Public generic functions.
                                                             (line  179)
* Method, invert <1>:                    Public generic functions.
                                                             (line  183)
* Method, invert <2>:                    Public generic functions.
                                                             (line  187)
* Method, invert <3>:                    Public generic functions.
                                                             (line  191)
* Method, invert <4>:                    Public generic functions.
                                                             (line  195)
* Method, left-permute:                  Public generic functions.
                                                             (line  206)
* Method, left-permute <1>:              Public generic functions.
                                                             (line  208)
* Method, map-into-vector:               Public generic functions.
                                                             (line  220)
* Method, map-into-vector <1>:           Public generic functions.
                                                             (line  227)
* Method, map-vector:                    Public generic functions.
                                                             (line  241)
* Method, map-vector <1>:                Public generic functions.
                                                             (line  247)
* Method, matrix-column-dimension:       Public generic functions.
                                                             (line  259)
* Method, matrix-column-dimension <1>:   Public generic functions.
                                                             (line  264)
* Method, matrix-column-dimension <2>:   Public generic functions.
                                                             (line  269)
* Method, matrix-dimensions:             Public generic functions.
                                                             (line  283)
* Method, matrix-dimensions <1>:         Public generic functions.
                                                             (line  288)
* Method, matrix-dimensions <2>:         Public generic functions.
                                                             (line  293)
* Method, matrix-element-type:           Public generic functions.
                                                             (line  305)
* Method, matrix-element-type <1>:       Public generic functions.
                                                             (line  310)
* Method, matrix-element-type <2>:       Public generic functions.
                                                             (line  315)
* Method, matrix-in-bounds-p:            Public generic functions.
                                                             (line  328)
* Method, matrix-in-bounds-p <1>:        Public generic functions.
                                                             (line  335)
* Method, matrix-in-bounds-p <2>:        Public generic functions.
                                                             (line  341)
* Method, matrix-row-dimension:          Public generic functions.
                                                             (line  354)
* Method, matrix-row-dimension <1>:      Public generic functions.
                                                             (line  359)
* Method, matrix-row-dimension <2>:      Public generic functions.
                                                             (line  364)
* Method, mref:                          Public generic functions.
                                                             (line  378)
* Method, mref <1>:                      Public generic functions.
                                                             (line  383)
* Method, mref <2>:                      Public generic functions.
                                                             (line  388)
* Method, nadd:                          Public generic functions.
                                                             (line  429)
* Method, nadd <1>:                      Public generic functions.
                                                             (line  434)
* Method, nadd <2>:                      Public generic functions.
                                                             (line  441)
* Method, nadd <3>:                      Public generic functions.
                                                             (line  447)
* Method, nadd <4>:                      Public generic functions.
                                                             (line  452)
* Method, nadd <5>:                      Public generic functions.
                                                             (line  459)
* Method, nadd <6>:                      Public generic functions.
                                                             (line  466)
* Method, nadd <7>:                      Public generic functions.
                                                             (line  471)
* Method, nadd <8>:                      Public generic functions.
                                                             (line  476)
* Method, nadd <9>:                      Public generic functions.
                                                             (line  482)
* Method, napply-rotation:               Public generic functions.
                                                             (line  494)
* Method, napply-rotation <1>:           Public generic functions.
                                                             (line  501)
* Method, ninvert:                       Public generic functions.
                                                             (line  512)
* Method, ninvert <1>:                   Public generic functions.
                                                             (line  516)
* Method, ninvert <2>:                   Public generic functions.
                                                             (line  520)
* Method, ninvert <3>:                   Public generic functions.
                                                             (line  524)
* Method, ninvert <4>:                   Public generic functions.
                                                             (line  528)
* Method, norm:                          Public generic functions.
                                                             (line  540)
* Method, norm <1>:                      Public generic functions.
                                                             (line  545)
* Method, norm <2>:                      Public generic functions.
                                                             (line  549)
* Method, norm <3>:                      Public generic functions.
                                                             (line  553)
* Method, norm <4>:                      Public generic functions.
                                                             (line  556)
* Method, norm-array:                    Public generic functions.
                                                             (line  567)
* Method, norm-array <1>:                Public generic functions.
                                                             (line  570)
* Method, norm-array <2>:                Public generic functions.
                                                             (line  572)
* Method, norm-array <3>:                Public generic functions.
                                                             (line  574)
* Method, norm-vector:                   Public generic functions.
                                                             (line  584)
* Method, norm-vector <1>:               Public generic functions.
                                                             (line  586)
* Method, norm-vector <2>:               Public generic functions.
                                                             (line  588)
* Method, norm-vector <3>:               Public generic functions.
                                                             (line  590)
* Method, nscale:                        Public generic functions.
                                                             (line  600)
* Method, nscale <1>:                    Public generic functions.
                                                             (line  605)
* Method, nscale <2>:                    Public generic functions.
                                                             (line  609)
* Method, nscale <3>:                    Public generic functions.
                                                             (line  613)
* Method, nscale <4>:                    Public generic functions.
                                                             (line  617)
* Method, nsolve:                        Public generic functions.
                                                             (line  629)
* Method, nsolve <1>:                    Public generic functions.
                                                             (line  634)
* Method, nsolve <2>:                    Public generic functions.
                                                             (line  639)
* Method, nsolve <3>:                    Public generic functions.
                                                             (line  644)
* Method, nsolve <4>:                    Public generic functions.
                                                             (line  648)
* Method, nsubtract:                     Public generic functions.
                                                             (line  662)
* Method, nsubtract <1>:                 Public generic functions.
                                                             (line  667)
* Method, nsubtract <2>:                 Public generic functions.
                                                             (line  674)
* Method, nsubtract <3>:                 Public generic functions.
                                                             (line  680)
* Method, nsubtract <4>:                 Public generic functions.
                                                             (line  686)
* Method, nsubtract <5>:                 Public generic functions.
                                                             (line  693)
* Method, nsubtract <6>:                 Public generic functions.
                                                             (line  700)
* Method, nsubtract <7>:                 Public generic functions.
                                                             (line  705)
* Method, nsubtract <8>:                 Public generic functions.
                                                             (line  710)
* Method, nsubtract <9>:                 Public generic functions.
                                                             (line  716)
* Method, ntranspose:                    Public generic functions.
                                                             (line  729)
* Method, ntranspose <1>:                Public generic functions.
                                                             (line  734)
* Method, ntranspose <2>:                Public generic functions.
                                                             (line  739)
* Method, ntranspose <3>:                Public generic functions.
                                                             (line  743)
* Method, ntranspose <4>:                Public generic functions.
                                                             (line  747)
* Method, ntranspose <5>:                Public generic functions.
                                                             (line  751)
* Method, ntranspose <6>:                Public generic functions.
                                                             (line  755)
* Method, permute:                       Public generic functions.
                                                             (line  767)
* Method, permute <1>:                   Public generic functions.
                                                             (line  771)
* Method, permute <2>:                   Public generic functions.
                                                             (line  775)
* Method, permute <3>:                   Public generic functions.
                                                             (line  779)
* Method, permute <4>:                   Public generic functions.
                                                             (line  783)
* Method, permute <5>:                   Public generic functions.
                                                             (line  788)
* Method, permute <6>:                   Public generic functions.
                                                             (line  793)
* Method, permute <7>:                   Public generic functions.
                                                             (line  798)
* Method, permute <8>:                   Public generic functions.
                                                             (line  803)
* Method, permute <9>:                   Public generic functions.
                                                             (line  807)
* Method, permute <10>:                  Public generic functions.
                                                             (line  811)
* Method, permute <11>:                  Public generic functions.
                                                             (line  816)
* Method, permute <12>:                  Public generic functions.
                                                             (line  821)
* Method, permute <13>:                  Public generic functions.
                                                             (line  826)
* Method, product:                       Public generic functions.
                                                             (line  840)
* Method, product <1>:                   Public generic functions.
                                                             (line  846)
* Method, product <2>:                   Public generic functions.
                                                             (line  852)
* Method, product <3>:                   Public generic functions.
                                                             (line  859)
* Method, product <4>:                   Public generic functions.
                                                             (line  864)
* Method, product <5>:                   Public generic functions.
                                                             (line  871)
* Method, product <6>:                   Public generic functions.
                                                             (line  877)
* Method, product <7>:                   Public generic functions.
                                                             (line  883)
* Method, product <8>:                   Public generic functions.
                                                             (line  888)
* Method, product <9>:                   Public generic functions.
                                                             (line  893)
* Method, product <10>:                  Public generic functions.
                                                             (line  899)
* Method, product <11>:                  Public generic functions.
                                                             (line  905)
* Method, product <12>:                  Public generic functions.
                                                             (line  910)
* Method, replace-matrix:                Public generic functions.
                                                             (line  926)
* Method, replace-matrix <1>:            Public generic functions.
                                                             (line  933)
* Method, replace-matrix <2>:            Public generic functions.
                                                             (line  940)
* Method, replace-matrix <3>:            Public generic functions.
                                                             (line  947)
* Method, replace-matrix <4>:            Public generic functions.
                                                             (line  954)
* Method, replace-vector:                Public generic functions.
                                                             (line  968)
* Method, right-permute:                 Public generic functions.
                                                             (line  980)
* Method, right-permute <1>:             Public generic functions.
                                                             (line  982)
* Method, scale:                         Public generic functions.
                                                             (line  992)
* Method, scale <1>:                     Public generic functions.
                                                             (line  997)
* Method, scale <2>:                     Public generic functions.
                                                             (line 1001)
* Method, scale <3>:                     Public generic functions.
                                                             (line 1005)
* Method, scale <4>:                     Public generic functions.
                                                             (line 1009)
* Method, scaled-binary-op:              Public generic functions.
                                                             (line 1021)
* Method, scaled-binary-op <1>:          Public generic functions.
                                                             (line 1024)
* Method, scaled-binary-op <2>:          Public generic functions.
                                                             (line 1027)
* Method, scaled-binary-op <3>:          Public generic functions.
                                                             (line 1030)
* Method, scaled-binary-op <4>:          Public generic functions.
                                                             (line 1033)
* Method, scaled-binary-op <5>:          Public generic functions.
                                                             (line 1036)
* Method, scaled-binary-op <6>:          Public generic functions.
                                                             (line 1039)
* Method, size:                          Private generic functions.
                                                             (line  187)
* Method, solve:                         Public generic functions.
                                                             (line 1049)
* Method, solve <1>:                     Public generic functions.
                                                             (line 1054)
* Method, solve <2>:                     Public generic functions.
                                                             (line 1059)
* Method, solve <3>:                     Public generic functions.
                                                             (line 1064)
* Method, solve <4>:                     Public generic functions.
                                                             (line 1068)
* Method, submatrix:                     Public generic functions.
                                                             (line 1082)
* Method, submatrix <1>:                 Public generic functions.
                                                             (line 1088)
* Method, submatrix <2>:                 Public generic functions.
                                                             (line 1094)
* Method, submatrix <3>:                 Public generic functions.
                                                             (line 1100)
* Method, subtract:                      Public generic functions.
                                                             (line 1153)
* Method, subtract <1>:                  Public generic functions.
                                                             (line 1159)
* Method, subtract <2>:                  Public generic functions.
                                                             (line 1165)
* Method, subtract <3>:                  Public generic functions.
                                                             (line 1172)
* Method, subtract <4>:                  Public generic functions.
                                                             (line 1179)
* Method, subtract <5>:                  Public generic functions.
                                                             (line 1184)
* Method, subtract <6>:                  Public generic functions.
                                                             (line 1189)
* Method, subtract <7>:                  Public generic functions.
                                                             (line 1195)
* Method, subvector:                     Public generic functions.
                                                             (line 1208)
* Method, sump:                          Public generic functions.
                                                             (line 1231)
* Method, sump <1>:                      Public generic functions.
                                                             (line 1234)
* Method, sump <2>:                      Public generic functions.
                                                             (line 1237)
* Method, sumsq:                         Public generic functions.
                                                             (line 1247)
* Method, sumsq <1>:                     Public generic functions.
                                                             (line 1250)
* Method, sumsq <2>:                     Public generic functions.
                                                             (line 1253)
* Method, transpose:                     Public generic functions.
                                                             (line 1264)
* Method, transpose <1>:                 Public generic functions.
                                                             (line 1268)
* Method, transpose <2>:                 Public generic functions.
                                                             (line 1272)
* Method, transpose <3>:                 Public generic functions.
                                                             (line 1276)
* Method, transpose <4>:                 Public generic functions.
                                                             (line 1280)
* Method, transpose <5>:                 Public generic functions.
                                                             (line 1284)
* Method, transpose <6>:                 Public generic functions.
                                                             (line 1288)
* Method, transpose <7>:                 Public generic functions.
                                                             (line 1293)
* Method, vector-element-type:           Public generic functions.
                                                             (line 1305)
* Method, vector-in-bounds-p:            Public generic functions.
                                                             (line 1317)
* Method, vector-length:                 Public generic functions.
                                                             (line 1329)
* Method, vref:                          Public generic functions.
                                                             (line 1341)
* mref:                                  Public generic functions.
                                                             (line  369)
* mref <1>:                              Public generic functions.
                                                             (line  376)
* mref <2>:                              Public generic functions.
                                                             (line  381)
* mref <3>:                              Public generic functions.
                                                             (line  386)
* nadd:                                  Public generic functions.
                                                             (line  418)
* nadd <1>:                              Public generic functions.
                                                             (line  426)
* nadd <2>:                              Public generic functions.
                                                             (line  431)
* nadd <3>:                              Public generic functions.
                                                             (line  438)
* nadd <4>:                              Public generic functions.
                                                             (line  444)
* nadd <5>:                              Public generic functions.
                                                             (line  450)
* nadd <6>:                              Public generic functions.
                                                             (line  456)
* nadd <7>:                              Public generic functions.
                                                             (line  463)
* nadd <8>:                              Public generic functions.
                                                             (line  469)
* nadd <9>:                              Public generic functions.
                                                             (line  474)
* nadd <10>:                             Public generic functions.
                                                             (line  480)
* nadd-array:                            Public ordinary functions.
                                                             (line  157)
* nadd-vector:                           Public ordinary functions.
                                                             (line  163)
* napply-rotation:                       Public generic functions.
                                                             (line  485)
* napply-rotation <1>:                   Public generic functions.
                                                             (line  492)
* napply-rotation <2>:                   Public generic functions.
                                                             (line  498)
* ninvert:                               Public generic functions.
                                                             (line  504)
* ninvert <1>:                           Public generic functions.
                                                             (line  511)
* ninvert <2>:                           Public generic functions.
                                                             (line  515)
* ninvert <3>:                           Public generic functions.
                                                             (line  519)
* ninvert <4>:                           Public generic functions.
                                                             (line  523)
* ninvert <5>:                           Public generic functions.
                                                             (line  527)
* norm:                                  Public generic functions.
                                                             (line  531)
* norm <1>:                              Public generic functions.
                                                             (line  538)
* norm <2>:                              Public generic functions.
                                                             (line  543)
* norm <3>:                              Public generic functions.
                                                             (line  548)
* norm <4>:                              Public generic functions.
                                                             (line  552)
* norm <5>:                              Public generic functions.
                                                             (line  555)
* norm-array:                            Public generic functions.
                                                             (line  558)
* norm-array <1>:                        Public generic functions.
                                                             (line  565)
* norm-array <2>:                        Public generic functions.
                                                             (line  568)
* norm-array <3>:                        Public generic functions.
                                                             (line  571)
* norm-array <4>:                        Public generic functions.
                                                             (line  573)
* norm-vector:                           Public generic functions.
                                                             (line  575)
* norm-vector <1>:                       Public generic functions.
                                                             (line  582)
* norm-vector <2>:                       Public generic functions.
                                                             (line  585)
* norm-vector <3>:                       Public generic functions.
                                                             (line  587)
* norm-vector <4>:                       Public generic functions.
                                                             (line  589)
* nscale:                                Public generic functions.
                                                             (line  591)
* nscale <1>:                            Public generic functions.
                                                             (line  598)
* nscale <2>:                            Public generic functions.
                                                             (line  603)
* nscale <3>:                            Public generic functions.
                                                             (line  608)
* nscale <4>:                            Public generic functions.
                                                             (line  612)
* nscale <5>:                            Public generic functions.
                                                             (line  616)
* nsolve:                                Public generic functions.
                                                             (line  620)
* nsolve <1>:                            Public generic functions.
                                                             (line  627)
* nsolve <2>:                            Public generic functions.
                                                             (line  632)
* nsolve <3>:                            Public generic functions.
                                                             (line  637)
* nsolve <4>:                            Public generic functions.
                                                             (line  642)
* nsolve <5>:                            Public generic functions.
                                                             (line  647)
* nsubtract:                             Public generic functions.
                                                             (line  651)
* nsubtract <1>:                         Public generic functions.
                                                             (line  659)
* nsubtract <2>:                         Public generic functions.
                                                             (line  664)
* nsubtract <3>:                         Public generic functions.
                                                             (line  671)
* nsubtract <4>:                         Public generic functions.
                                                             (line  677)
* nsubtract <5>:                         Public generic functions.
                                                             (line  683)
* nsubtract <6>:                         Public generic functions.
                                                             (line  690)
* nsubtract <7>:                         Public generic functions.
                                                             (line  697)
* nsubtract <8>:                         Public generic functions.
                                                             (line  703)
* nsubtract <9>:                         Public generic functions.
                                                             (line  708)
* nsubtract <10>:                        Public generic functions.
                                                             (line  714)
* nsubtract-array:                       Public ordinary functions.
                                                             (line  169)
* nsubtract-vector:                      Public ordinary functions.
                                                             (line  175)
* ntranspose:                            Public generic functions.
                                                             (line  720)
* ntranspose <1>:                        Public generic functions.
                                                             (line  727)
* ntranspose <2>:                        Public generic functions.
                                                             (line  733)
* ntranspose <3>:                        Public generic functions.
                                                             (line  738)
* ntranspose <4>:                        Public generic functions.
                                                             (line  742)
* ntranspose <5>:                        Public generic functions.
                                                             (line  746)
* ntranspose <6>:                        Public generic functions.
                                                             (line  750)
* ntranspose <7>:                        Public generic functions.
                                                             (line  754)
* number-equal:                          Public ordinary functions.
                                                             (line  181)
* permutation-matrix-p:                  Public ordinary functions.
                                                             (line  188)
* permute:                               Public generic functions.
                                                             (line  758)
* permute <1>:                           Public generic functions.
                                                             (line  765)
* permute <2>:                           Public generic functions.
                                                             (line  769)
* permute <3>:                           Public generic functions.
                                                             (line  773)
* permute <4>:                           Public generic functions.
                                                             (line  777)
* permute <5>:                           Public generic functions.
                                                             (line  781)
* permute <6>:                           Public generic functions.
                                                             (line  786)
* permute <7>:                           Public generic functions.
                                                             (line  791)
* permute <8>:                           Public generic functions.
                                                             (line  796)
* permute <9>:                           Public generic functions.
                                                             (line  801)
* permute <10>:                          Public generic functions.
                                                             (line  805)
* permute <11>:                          Public generic functions.
                                                             (line  809)
* permute <12>:                          Public generic functions.
                                                             (line  814)
* permute <13>:                          Public generic functions.
                                                             (line  819)
* permute <14>:                          Public generic functions.
                                                             (line  824)
* product:                               Public generic functions.
                                                             (line  829)
* product <1>:                           Public generic functions.
                                                             (line  837)
* product <2>:                           Public generic functions.
                                                             (line  843)
* product <3>:                           Public generic functions.
                                                             (line  849)
* product <4>:                           Public generic functions.
                                                             (line  856)
* product <5>:                           Public generic functions.
                                                             (line  862)
* product <6>:                           Public generic functions.
                                                             (line  868)
* product <7>:                           Public generic functions.
                                                             (line  874)
* product <8>:                           Public generic functions.
                                                             (line  880)
* product <9>:                           Public generic functions.
                                                             (line  886)
* product <10>:                          Public generic functions.
                                                             (line  891)
* product <11>:                          Public generic functions.
                                                             (line  897)
* product <12>:                          Public generic functions.
                                                             (line  903)
* product <13>:                          Public generic functions.
                                                             (line  908)
* product-array-array:                   Public ordinary functions.
                                                             (line  194)
* product-array-vector:                  Public ordinary functions.
                                                             (line  201)
* product-vector-array:                  Public ordinary functions.
                                                             (line  209)
* replace-matrix:                        Public generic functions.
                                                             (line  913)
* replace-matrix <1>:                    Public generic functions.
                                                             (line  922)
* replace-matrix <2>:                    Public generic functions.
                                                             (line  929)
* replace-matrix <3>:                    Public generic functions.
                                                             (line  936)
* replace-matrix <4>:                    Public generic functions.
                                                             (line  943)
* replace-matrix <5>:                    Public generic functions.
                                                             (line  950)
* replace-vector:                        Public generic functions.
                                                             (line  957)
* replace-vector <1>:                    Public generic functions.
                                                             (line  965)
* right-permute:                         Public generic functions.
                                                             (line  972)
* right-permute <1>:                     Public generic functions.
                                                             (line  979)
* right-permute <2>:                     Public generic functions.
                                                             (line  981)
* root-free-hermitian-cholesky-decomposition: Public ordinary functions.
                                                             (line  217)
* root-free-symmetric-cholesky-decomposition: Public ordinary functions.
                                                             (line  223)
* row-vector:                            Public ordinary functions.
                                                             (line  229)
* row-vector-p:                          Public ordinary functions.
                                                             (line  235)
* scale:                                 Public generic functions.
                                                             (line  983)
* scale <1>:                             Public generic functions.
                                                             (line  990)
* scale <2>:                             Public generic functions.
                                                             (line  995)
* scale <3>:                             Public generic functions.
                                                             (line 1000)
* scale <4>:                             Public generic functions.
                                                             (line 1004)
* scale <5>:                             Public generic functions.
                                                             (line 1008)
* scaled-binary-op:                      Public generic functions.
                                                             (line 1012)
* scaled-binary-op <1>:                  Public generic functions.
                                                             (line 1019)
* scaled-binary-op <2>:                  Public generic functions.
                                                             (line 1022)
* scaled-binary-op <3>:                  Public generic functions.
                                                             (line 1025)
* scaled-binary-op <4>:                  Public generic functions.
                                                             (line 1028)
* scaled-binary-op <5>:                  Public generic functions.
                                                             (line 1031)
* scaled-binary-op <6>:                  Public generic functions.
                                                             (line 1034)
* scaled-binary-op <7>:                  Public generic functions.
                                                             (line 1037)
* size:                                  Private generic functions.
                                                             (line  181)
* size <1>:                              Private generic functions.
                                                             (line  185)
* solve:                                 Public generic functions.
                                                             (line 1040)
* solve <1>:                             Public generic functions.
                                                             (line 1047)
* solve <2>:                             Public generic functions.
                                                             (line 1052)
* solve <3>:                             Public generic functions.
                                                             (line 1057)
* solve <4>:                             Public generic functions.
                                                             (line 1062)
* solve <5>:                             Public generic functions.
                                                             (line 1067)
* specific-array-element-type:           Public ordinary functions.
                                                             (line  241)
* square-matrix-p:                       Public ordinary functions.
                                                             (line  247)
* submatrix:                             Public generic functions.
                                                             (line 1071)
* submatrix <1>:                         Public generic functions.
                                                             (line 1079)
* submatrix <2>:                         Public generic functions.
                                                             (line 1085)
* submatrix <3>:                         Public generic functions.
                                                             (line 1091)
* submatrix <4>:                         Public generic functions.
                                                             (line 1097)
* subtract:                              Public generic functions.
                                                             (line 1142)
* subtract <1>:                          Public generic functions.
                                                             (line 1150)
* subtract <2>:                          Public generic functions.
                                                             (line 1156)
* subtract <3>:                          Public generic functions.
                                                             (line 1162)
* subtract <4>:                          Public generic functions.
                                                             (line 1169)
* subtract <5>:                          Public generic functions.
                                                             (line 1176)
* subtract <6>:                          Public generic functions.
                                                             (line 1182)
* subtract <7>:                          Public generic functions.
                                                             (line 1187)
* subtract <8>:                          Public generic functions.
                                                             (line 1193)
* subtract-array:                        Public ordinary functions.
                                                             (line  253)
* subtract-vector:                       Public ordinary functions.
                                                             (line  259)
* subvector:                             Public generic functions.
                                                             (line 1199)
* subvector <1>:                         Public generic functions.
                                                             (line 1206)
* sump:                                  Public generic functions.
                                                             (line 1223)
* sump <1>:                              Public generic functions.
                                                             (line 1230)
* sump <2>:                              Public generic functions.
                                                             (line 1233)
* sump <3>:                              Public generic functions.
                                                             (line 1236)
* sumsq:                                 Public generic functions.
                                                             (line 1239)
* sumsq <1>:                             Public generic functions.
                                                             (line 1246)
* sumsq <2>:                             Public generic functions.
                                                             (line 1249)
* sumsq <3>:                             Public generic functions.
                                                             (line 1252)
* sumsq-column:                          Public ordinary functions.
                                                             (line  265)
* sumsq-row:                             Public ordinary functions.
                                                             (line  272)
* sumsq2:                                Public ordinary functions.
                                                             (line  279)
* sumsq3:                                Public ordinary functions.
                                                             (line  285)
* swap-rows:                             Private ordinary functions.
                                                             (line  224)
* symmetric-cholesky-decomposition:      Public ordinary functions.
                                                             (line  291)
* symmetric-cholesky-invert:             Public ordinary functions.
                                                             (line  297)
* symmetric-cholesky-solver:             Public ordinary functions.
                                                             (line  304)
* symmetric-matrix-p:                    Public ordinary functions.
                                                             (line  311)
* transpose:                             Public generic functions.
                                                             (line 1255)
* transpose <1>:                         Public generic functions.
                                                             (line 1262)
* transpose <2>:                         Public generic functions.
                                                             (line 1267)
* transpose <3>:                         Public generic functions.
                                                             (line 1271)
* transpose <4>:                         Public generic functions.
                                                             (line 1275)
* transpose <5>:                         Public generic functions.
                                                             (line 1279)
* transpose <6>:                         Public generic functions.
                                                             (line 1283)
* transpose <7>:                         Public generic functions.
                                                             (line 1287)
* transpose <8>:                         Public generic functions.
                                                             (line 1291)
* tridiagonal-backsubstitution:          Private ordinary functions.
                                                             (line  230)
* tridiagonal-factorization:             Private ordinary functions.
                                                             (line  236)
* tridiagonal-solver:                    Public ordinary functions.
                                                             (line  317)
* tridiagonal-update:                    Private ordinary functions.
                                                             (line  242)
* unit-pivot-value:                      Private ordinary functions.
                                                             (line  248)
* vector-element-type:                   Public generic functions.
                                                             (line 1296)
* vector-element-type <1>:               Public generic functions.
                                                             (line 1303)
* vector-in-bounds-p:                    Public generic functions.
                                                             (line 1308)
* vector-in-bounds-p <1>:                Public generic functions.
                                                             (line 1315)
* vector-length:                         Public generic functions.
                                                             (line 1321)
* vector-length <1>:                     Public generic functions.
                                                             (line 1328)
* vref:                                  Public generic functions.
                                                             (line 1332)
* vref <1>:                              Public generic functions.
                                                             (line 1339)
* zero-array:                            Private ordinary functions.
                                                             (line  256)
* zero-vector:                           Private ordinary functions.
                                                             (line  262)


File: linear-algebra.info,  Node: Variable index,  Next: Data type index,  Prev: Function index,  Up: Indexes

A.3 Variables
=============

 [index ]
* Menu:

* contents:                              Public classes.      (line  79)
* contents <1>:                          Public classes.      (line 160)
* contents <2>:                          Public classes.      (line 229)
* contents <3>:                          Public classes.      (line 287)
* size:                                  Public classes.      (line 218)
* Slot, contents:                        Public classes.      (line  80)
* Slot, contents <1>:                    Public classes.      (line 161)
* Slot, contents <2>:                    Public classes.      (line 230)
* Slot, contents <3>:                    Public classes.      (line 288)
* Slot, size:                            Public classes.      (line 219)


File: linear-algebra.info,  Node: Data type index,  Prev: Variable index,  Up: Indexes

A.4 Data types
==============

 [index ]
* Menu:

* array.lisp:                            The linear-algebra/sequence/array․lisp file.
                                                              (line   6)
* binary-operations.lisp:                The linear-algebra/kernel/binary-operations․lisp file.
                                                              (line   6)
* cholesky.lisp:                         The linear-algebra/kernel/cholesky․lisp file.
                                                              (line   6)
* Class, column-vector:                  Public classes.      (line   7)
* Class, data-vector:                    Public classes.      (line  38)
* Class, dense-matrix:                   Public classes.      (line  89)
* Class, hermitian-matrix:               Public classes.      (line 170)
* Class, identity-matrix:                Public classes.      (line 199)
* Class, matrix-object:                  Public classes.      (line 239)
* Class, permutation-matrix:             Public classes.      (line 249)
* Class, row-vector:                     Public classes.      (line 297)
* Class, square-matrix:                  Public classes.      (line 318)
* Class, symmetric-matrix:               Public classes.      (line 334)
* column-vector:                         Public classes.      (line   6)
* conjugate-gradient.lisp:               The linear-algebra/kernel/conjugate-gradient․lisp file.
                                                              (line   6)
* data-vector:                           Public classes.      (line  37)
* data-vector.lisp:                      The linear-algebra/data-vector․lisp file.
                                                              (line   6)
* dense-matrix:                          Public classes.      (line  88)
* dense-matrix.lisp:                     The linear-algebra/dense-matrix․lisp file.
                                                              (line   6)
* File, array.lisp:                      The linear-algebra/sequence/array․lisp file.
                                                              (line   6)
* File, binary-operations.lisp:          The linear-algebra/kernel/binary-operations․lisp file.
                                                              (line   6)
* File, cholesky.lisp:                   The linear-algebra/kernel/cholesky․lisp file.
                                                              (line   6)
* File, conjugate-gradient.lisp:         The linear-algebra/kernel/conjugate-gradient․lisp file.
                                                              (line   6)
* File, data-vector.lisp:                The linear-algebra/data-vector․lisp file.
                                                              (line   6)
* File, dense-matrix.lisp:               The linear-algebra/dense-matrix․lisp file.
                                                              (line   6)
* File, fundamental-ops.lisp:            The linear-algebra/interface/fundamental-ops․lisp file.
                                                              (line   6)
* File, gauss.lisp:                      The linear-algebra/kernel/gauss․lisp file.
                                                              (line   6)
* File, hermitian-matrix.lisp:           The linear-algebra/hermitian-matrix․lisp file.
                                                              (line   6)
* File, identity-matrix.lisp:            The linear-algebra/interface/identity-matrix․lisp file.
                                                              (line   6)
* File, linear-algebra.asd:              The linear-algebra/linear-algebra․asd file.
                                                              (line   6)
* File, list.lisp:                       The linear-algebra/sequence/list․lisp file.
                                                              (line   6)
* File, matrix.lisp:                     The linear-algebra/interface/matrix․lisp file.
                                                              (line   6)
* File, permutation-matrix.lisp:         The linear-algebra/interface/permutation-matrix․lisp file.
                                                              (line   6)
* File, permute.lisp:                    The linear-algebra/kernel/permute․lisp file.
                                                              (line   6)
* File, pkgdcl.lisp:                     The linear-algebra/pkgdcl․lisp file.
                                                              (line   6)
* File, pkgdcl.lisp <1>:                 The linear-algebra/kernel/pkgdcl․lisp file.
                                                              (line   6)
* File, rotation.lisp:                   The linear-algebra/kernel/rotation․lisp file.
                                                              (line   6)
* File, square-matrix.lisp:              The linear-algebra/square-matrix․lisp file.
                                                              (line   6)
* File, symmetric-matrix.lisp:           The linear-algebra/symmetric-matrix․lisp file.
                                                              (line   6)
* File, tridiagonal.lisp:                The linear-algebra/kernel/tridiagonal․lisp file.
                                                              (line   6)
* File, unary-operations.lisp:           The linear-algebra/kernel/unary-operations․lisp file.
                                                              (line   6)
* File, utility.lisp:                    The linear-algebra/kernel/utility․lisp file.
                                                              (line   6)
* File, vector.lisp:                     The linear-algebra/interface/vector․lisp file.
                                                              (line   6)
* File, vector.lisp <1>:                 The linear-algebra/sequence/vector․lisp file.
                                                              (line   6)
* fundamental-ops.lisp:                  The linear-algebra/interface/fundamental-ops․lisp file.
                                                              (line   6)
* gauss.lisp:                            The linear-algebra/kernel/gauss․lisp file.
                                                              (line   6)
* hermitian-matrix:                      Public classes.      (line 169)
* hermitian-matrix.lisp:                 The linear-algebra/hermitian-matrix․lisp file.
                                                              (line   6)
* identity-matrix:                       Public classes.      (line 198)
* identity-matrix.lisp:                  The linear-algebra/interface/identity-matrix․lisp file.
                                                              (line   6)
* interface:                             The linear-algebra/interface module.
                                                              (line   6)
* kernel:                                The linear-algebra/kernel module.
                                                              (line   6)
* linear-algebra:                        The linear-algebra system.
                                                              (line   6)
* linear-algebra <1>:                    The linear-algebra package.
                                                              (line   6)
* linear-algebra-kernel:                 The linear-algebra-kernel package.
                                                              (line   6)
* linear-algebra.asd:                    The linear-algebra/linear-algebra․asd file.
                                                              (line   6)
* list.lisp:                             The linear-algebra/sequence/list․lisp file.
                                                              (line   6)
* matrix-object:                         Public classes.      (line 238)
* matrix.lisp:                           The linear-algebra/interface/matrix․lisp file.
                                                              (line   6)
* Module, interface:                     The linear-algebra/interface module.
                                                              (line   6)
* Module, kernel:                        The linear-algebra/kernel module.
                                                              (line   6)
* Module, sequence:                      The linear-algebra/sequence module.
                                                              (line   6)
* Package, linear-algebra:               The linear-algebra package.
                                                              (line   6)
* Package, linear-algebra-kernel:        The linear-algebra-kernel package.
                                                              (line   6)
* permutation-matrix:                    Public classes.      (line 248)
* permutation-matrix.lisp:               The linear-algebra/interface/permutation-matrix․lisp file.
                                                              (line   6)
* permute.lisp:                          The linear-algebra/kernel/permute․lisp file.
                                                              (line   6)
* pkgdcl.lisp:                           The linear-algebra/pkgdcl․lisp file.
                                                              (line   6)
* pkgdcl.lisp <1>:                       The linear-algebra/kernel/pkgdcl․lisp file.
                                                              (line   6)
* rotation.lisp:                         The linear-algebra/kernel/rotation․lisp file.
                                                              (line   6)
* row-vector:                            Public classes.      (line 296)
* sequence:                              The linear-algebra/sequence module.
                                                              (line   6)
* square-matrix:                         Public classes.      (line 317)
* square-matrix.lisp:                    The linear-algebra/square-matrix․lisp file.
                                                              (line   6)
* symmetric-matrix:                      Public classes.      (line 333)
* symmetric-matrix.lisp:                 The linear-algebra/symmetric-matrix․lisp file.
                                                              (line   6)
* System, linear-algebra:                The linear-algebra system.
                                                              (line   6)
* tridiagonal.lisp:                      The linear-algebra/kernel/tridiagonal․lisp file.
                                                              (line   6)
* unary-operations.lisp:                 The linear-algebra/kernel/unary-operations․lisp file.
                                                              (line   6)
* utility.lisp:                          The linear-algebra/kernel/utility․lisp file.
                                                              (line   6)
* vector.lisp:                           The linear-algebra/interface/vector․lisp file.
                                                              (line   6)
* vector.lisp <1>:                       The linear-algebra/sequence/vector․lisp file.
                                                              (line   6)



Tag Table:
Node: Top978
Node: Copying2274
Node: Systems2462
Node: The linear-algebra system2680
Ref: ❨1❩2812
Node: Modules4272
Node: The linear-algebra/kernel module4569
Ref: ❨2❩4766
Node: The linear-algebra/interface module5430
Ref: ❨3❩5660
Node: The linear-algebra/sequence module6120
Ref: ❨4❩6307
Node: Files6639
Node: Lisp files6856
Node: The linear-algebra/linear-algebra․asd file8271
Ref: ❨5❩8516
Node: The linear-algebra/pkgdcl․lisp file8682
Ref: ❨6❩8947
Node: The linear-algebra/kernel/pkgdcl․lisp file9161
Ref: ❨7❩9441
Node: The linear-algebra/kernel/utility․lisp file9603
Ref: ❨8❩9893
Node: The linear-algebra/kernel/permute․lisp file10556
Ref: ❨9❩10856
Node: The linear-algebra/kernel/unary-operations․lisp file11161
Ref: ❨10❩11489
Node: The linear-algebra/kernel/binary-operations․lisp file12161
Ref: ❨11❩12492
Node: The linear-algebra/kernel/rotation․lisp file14186
Ref: ❨12❩14488
Node: The linear-algebra/kernel/gauss․lisp file14858
Ref: ❨13❩15145
Node: The linear-algebra/kernel/cholesky․lisp file15931
Ref: ❨14❩16236
Node: The linear-algebra/kernel/conjugate-gradient․lisp file17035
Ref: ❨15❩17366
Node: The linear-algebra/kernel/tridiagonal․lisp file17885
Ref: ❨16❩18212
Node: The linear-algebra/interface/fundamental-ops․lisp file18657
Ref: ❨17❩18989
Node: The linear-algebra/interface/vector․lisp file19979
Ref: ❨18❩20291
Node: The linear-algebra/interface/matrix․lisp file21418
Ref: ❨19❩21730
Node: The linear-algebra/interface/identity-matrix․lisp file22950
Ref: ❨20❩23292
Node: The linear-algebra/interface/permutation-matrix․lisp file24184
Ref: ❨21❩24529
Node: The linear-algebra/sequence/list․lisp file25819
Ref: ❨22❩26124
Node: The linear-algebra/sequence/vector․lisp file27019
Ref: ❨23❩27314
Node: The linear-algebra/sequence/array․lisp file28013
Ref: ❨24❩28304
Node: The linear-algebra/data-vector․lisp file29350
Ref: ❨25❩29632
Node: The linear-algebra/dense-matrix․lisp file32622
Ref: ❨26❩32905
Node: The linear-algebra/square-matrix․lisp file35623
Ref: ❨27❩35913
Node: The linear-algebra/hermitian-matrix․lisp file36499
Ref: ❨28❩36799
Node: The linear-algebra/symmetric-matrix․lisp file38555
Ref: ❨29❩38802
Node: Packages40484
Node: The linear-algebra-kernel package40718
Ref: ❨30❩40909
Node: The linear-algebra package45647
Ref: ❨31❩45807
Node: Definitions51228
Node: Public Interface51488
Node: Public macros51777
Ref: ❨319❩52004
Node: Public ordinary functions52158
Ref: ❨40❩52406
Ref: ❨58❩52621
Ref: ❨195❩52822
Ref: ❨285❩53022
Ref: ❨38❩53255
Ref: ❨46❩53470
Ref: ❨107❩53717
Ref: ❨68❩53979
Ref: ❨241❩54209
Ref: ❨86❩54406
Ref: ❨89❩54633
Ref: ❨64❩54832
Ref: ❨109❩55058
Ref: ❨39❩55247
Ref: ❨87❩55511
Ref: ❨259❩55778
Ref: ❨85❩56015
Ref: ❨194❩56225
Ref: ❨41❩56454
Ref: ❨104❩56658
Ref: ❨284❩56972
Ref: ❨351❩57223
Ref: ❨258❩57495
Ref: ❨306❩57703
Ref: ❨66❩57925
Ref: ❨35❩58153
Ref: ❨37❩58384
Ref: ❨67❩58620
Ref: ❨111❩58855
Ref: ❨207❩59097
Ref: ❨105❩59355
Ref: ❨69❩59625
Ref: ❨71❩59919
Ref: ❨106❩60193
Ref: ❨73❩60400
Ref: ❨272❩60583
Ref: ❨206❩60777
Ref: ❨88❩61018
Ref: ❨260❩61244
Ref: ❨70❩61469
Ref: ❨84❩61692
Ref: ❨103❩61921
Ref: ❨108❩62198
Ref: ❨72❩62436
Ref: ❨83❩62638
Ref: ❨110❩62874
Ref: ❨65❩63063
Ref: ❨102❩63327
Ref: ❨286❩63594
Ref: ❨36❩63827
Node: Public generic functions64004
Ref: ❨287❩64303
Ref: ❨288❩64627
Ref: ❨289❩64939
Ref: ❨290❩65202
Ref: ❨291❩65544
Ref: ❨292❩65890
Ref: ❨293❩66120
Ref: ❨294❩66347
Ref: ❨295❩66605
Ref: ❨261❩66808
Ref: ❨262❩67147
Ref: ❨263❩67492
Ref: ❨93❩67727
Ref: ❨94❩68157
Ref: ❨95❩68525
Ref: ❨96❩68821
Ref: ❨97❩69112
Ref: ❨98❩69327
Ref: ❨99❩69550
Ref: ❨100❩69769
Ref: ❨101❩69988
Ref: ❨90❩70128
Ref: ❨91❩70368
Ref: ❨92❩70487
Ref: ❨280❩70597
Ref: ❨281❩70832
Ref: ❨282❩71063
Ref: ❨283❩71303
Ref: ❨219❩71472
Ref: ❨220❩71706
Ref: ❨337❩71866
Ref: ❨338❩72113
Ref: ❨339❩72329
Ref: ❨340❩72542
Ref: ❨341❩72748
Ref: ❨342❩72926
Ref: ❨47❩73110
Ref: ❨48❩73366
Ref: ❨49❩73484
Ref: ❨311❩73636
Ref: ❨312❩74025
Ref: ❨313❩74415
Ref: ❨197❩74647
Ref: ❨198❩75001
Ref: ❨199❩75324
Ref: ❨343❩75508
Ref: ❨344❩75786
Ref: ❨345❩76034
Ref: ❨346❩76301
Ref: ❨155❩76557
Ref: ❨156❩76838
Ref: ❨157❩77089
Ref: ❨158❩77343
Ref: ❨347❩77540
Ref: ❨348❩77809
Ref: ❨349❩78052
Ref: ❨350❩78299
Ref: ❨307❩78505
Ref: ❨308❩78844
Ref: ❨309❩79183
Ref: ❨310❩79505
Ref: ❨232❩79739
Ref: ❨233❩80011
Ref: ❨234❩80253
Ref: ❨235❩80514
Ref: ❨174❩80768
Ref: ❨175❩81059
Ref: ❨176❩81323
Ref: ❨177❩81589
Ref: ❨178❩81788
Ref: ❨179❩82098
Ref: ❨180❩82368
Ref: ❨181❩82642
Ref: ❨182❩82910
Ref: ❨159❩83145
Ref: ❨160❩83503
Ref: ❨161❩83762
Ref: ❨162❩84137
Ref: ❨163❩84450
Ref: ❨164❩84714
Ref: ❨165❩85055
Ref: ❨166❩85400
Ref: ❨167❩85631
Ref: ❨168❩85858
Ref: ❨169❩86116
Ref: ❨326❩86319
Ref: ❨327❩86659
Ref: ❨328❩87005
Ref: ❨274❩87174
Ref: ❨275❩87450
Ref: ❨276❩87667
Ref: ❨277❩87881
Ref: ❨278❩88088
Ref: ❨279❩88267
Ref: ❨320❩88450
Ref: ❨321❩88734
Ref: ❨322❩88965
Ref: ❨323❩89151
Ref: ❨324❩89329
Ref: ❨325❩89461
Ref: ❨78❩89580
Ref: ❨79❩89876
Ref: ❨80❩90025
Ref: ❨81❩90149
Ref: ❨82❩90264
Ref: ❨59❩90360
Ref: ❨60❩90659
Ref: ❨61❩90791
Ref: ❨62❩90907
Ref: ❨63❩91031
Ref: ❨266❩91138
Ref: ❨267❩91432
Ref: ❨268❩91672
Ref: ❨269❩91875
Ref: ❨270❩92056
Ref: ❨271❩92253
Ref: ❨300❩92432
Ref: ❨301❩92764
Ref: ❨302❩93046
Ref: ❨303❩93324
Ref: ❨304❩93606
Ref: ❨305❩93809
Ref: ❨352❩94047
Ref: ❨353❩94413
Ref: ❨354❩94677
Ref: ❨355❩95062
Ref: ❨356❩95380
Ref: ❨357❩95669
Ref: ❨358❩96019
Ref: ❨359❩96373
Ref: ❨360❩96609
Ref: ❨361❩96848
Ref: ❨362❩97115
Ref: ❨329❩97327
Ref: ❨330❩97611
Ref: ❨331❩97858
Ref: ❨332❩98101
Ref: ❨333❩98308
Ref: ❨334❩98484
Ref: ❨335❩98674
Ref: ❨336❩98844
Ref: ❨243❩99035
Ref: ❨244❩99351
Ref: ❨245❩99581
Ref: ❨246❩99807
Ref: ❨247❩100029
Ref: ❨248❩100247
Ref: ❨249❩100532
Ref: ❨250❩100804
Ref: ❨251❩101083
Ref: ❨252❩101330
Ref: ❨253❩101513
Ref: ❨254❩101697
Ref: ❨255❩101933
Ref: ❨256❩102167
Ref: ❨257❩102399
Ref: ❨364❩102618
Ref: ❨365❩102994
Ref: ❨366❩103309
Ref: ❨367❩103591
Ref: ❨368❩103975
Ref: ❨369❩104234
Ref: ❨370❩104609
Ref: ❨371❩104892
Ref: ❨372❩105210
Ref: ❨373❩105440
Ref: ❨374❩105660
Ref: ❨375❩105937
Ref: ❨376❩106218
Ref: ❨377❩106448
Ref: ❨140❩106749
Ref: ❨141❩107217
Ref: ❨142❩107647
Ref: ❨143❩108073
Ref: ❨144❩108503
Ref: ❨145❩108925
Ref: ❨298❩109159
Ref: ❨299❩109537
Ref: ❨32❩109771
Ref: ❨33❩110028
Ref: ❨34❩110150
Ref: ❨185❩110269
Ref: ❨186❩110548
Ref: ❨187❩110787
Ref: ❨188❩110975
Ref: ❨189❩111155
Ref: ❨190❩111337
Ref: ❨50❩111517
Ref: ❨51❩111831
Ref: ❨52❩111995
Ref: ❨53❩112162
Ref: ❨54❩112329
Ref: ❨55❩112496
Ref: ❨56❩112663
Ref: ❨57❩112811
Ref: ❨200❩112892
Ref: ❨201❩113214
Ref: ❨202❩113495
Ref: ❨203❩113772
Ref: ❨204❩114053
Ref: ❨205❩114255
Ref: ❨208❩114488
Ref: ❨209❩114837
Ref: ❨210❩115174
Ref: ❨211❩115508
Ref: ❨212❩115838
Ref: ❨213❩116114
Ref: ❨214❩116469
Ref: ❨215❩116786
Ref: ❨216❩117107
Ref: ❨217❩117428
Ref: ❨218❩117745
Ref: ❨221❩117970
Ref: ❨222❩118322
Ref: ❨223❩118639
Ref: ❨224❩118927
Ref: ❨225❩119276
Ref: ❨226❩119629
Ref: ❨227❩119864
Ref: ❨228❩120099
Ref: ❨229❩120365
Ref: ❨236❩120586
Ref: ❨237❩120884
Ref: ❨238❩121098
Ref: ❨239❩121381
Ref: ❨42❩121580
Ref: ❨43❩121850
Ref: ❨44❩122018
Ref: ❨45❩122194
Ref: ❨74❩122365
Ref: ❨75❩122634
Ref: ❨76❩122800
Ref: ❨77❩122965
Ref: ❨146❩123115
Ref: ❨147❩123384
Ref: ❨148❩123603
Ref: ❨149❩123805
Ref: ❨150❩123997
Ref: ❨151❩124158
Ref: ❨152❩124328
Ref: ❨153❩124483
Ref: ❨154❩124690
Ref: ❨264❩124875
Ref: ❨265❩125143
Ref: ❨230❩125327
Ref: ❨231❩125638
Ref: ❨296❩125854
Ref: ❨297❩126094
Ref: ❨170❩126262
Ref: ❨171❩126535
Ref: ❨172❩126716
Ref: ❨173❩127001
Node: Public standalone methods127139
Ref: ❨436❩127501
Ref: ❨441❩127738
Ref: ❨443❩128013
Ref: ❨452❩128254
Node: Public classes128401
Ref: ❨196❩128564
Ref: ❨183❩129778
Ref: ❨184❩131506
Ref: ❨315❩131793
Ref: ❨316❩134842
Ref: ❨363❩135135
Ref: ❨191❩136362
Ref: ❨192❩137149
Ref: ❨193❩137558
Ref: ❨242❩137836
Ref: ❨317❩138190
Ref: ❨318❩139878
Ref: ❨273❩140168
Ref: ❨240❩140933
Ref: ❨314❩141515
Node: Internals142580
Node: Private ordinary functions142770
Ref: ❨133❩142988
Ref: ❨120❩143245
Ref: ❨122❩143438
Ref: ❨123❩143615
Ref: ❨125❩143871
Ref: ❨119❩144114
Ref: ❨422❩144410
Ref: ❨380❩144668
Ref: ❨417❩144890
Ref: ❨379❩145171
Ref: ❨421❩145414
Ref: ❨137❩145621
Ref: ❨129❩145860
Ref: ❨138❩146107
Ref: ❨128❩146369
Ref: ❨391❩146685
Ref: ❨378❩147010
Ref: ❨381❩147335
Ref: ❨414❩147660
Ref: ❨117❩147954
Ref: ❨135❩148232
Ref: ❨127❩148534
Ref: ❨419❩148847
Ref: ❨392❩149055
Ref: ❨418❩149279
Ref: ❨420❩149487
Ref: ❨113❩149678
Ref: ❨118❩149934
Ref: ❨131❩150190
Ref: ❨130❩150394
Ref: ❨136❩150629
Ref: ❨134❩150836
Ref: ❨132❩151070
Ref: ❨116❩151274
Ref: ❨126❩151475
Ref: ❨112❩151670
Ref: ❨114❩151894
Ref: ❨121❩152120
Ref: ❨124❩152398
Ref: ❨115❩152678
Ref: ❨139❩152882
Node: Private generic functions153031
Ref: ❨393❩153237
Ref: ❨394❩153377
Ref: ❨395❩153572
Ref: ❨396❩153751
Ref: ❨397❩153938
Ref: ❨382❩154099
Ref: ❨383❩154277
Ref: ❨384❩154589
Ref: ❨385❩154914
Ref: ❨386❩155240
Ref: ❨387❩155496
Ref: ❨388❩155681
Ref: ❨389❩156000
Ref: ❨390❩156332
Ref: ❨398❩156640
Ref: ❨399❩156972
Ref: ❨400❩157271
Ref: ❨401❩157568
Ref: ❨402❩157866
Ref: ❨403❩158183
Ref: ❨404❩158505
Ref: ❨405❩158829
Ref: ❨406❩159160
Ref: ❨407❩159473
Ref: ❨408❩159776
Ref: ❨409❩160086
Ref: ❨410❩160397
Ref: ❨411❩160715
Ref: ❨412❩161038
Ref: ❨413❩161355
Ref: ❨415❩161536
Ref: ❨416❩161716
Node: Indexes161924
Node: Concept index162124
Node: Function index162255
Node: Variable index269236
Node: Data type index270130

End Tag Table


Local Variables:
coding: utf-8
End:
