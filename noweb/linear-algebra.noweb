
\documentclass{report}%

\pdfinfo{
  /Title (Numerical Linear Algebra in ANSI Common Lisp)
  /Author (Thomas M. Hermann)
  /CreationDate (D:20080328190108-05'00)
  /ModDate (D:20100402125500-05'00)
  /Subject (Linear Algebra)
  /Keywords (Linear Algebra) }

\usepackage{noweb}%
\usepackage{amssymb,amsmath}%
\usepackage[pdftex]{xcolor,graphicx}%
\usepackage{cite}%
\usepackage{nomencl}%
\usepackage{algorithm}%
\usepackage{algorithmic}%

\noweboptions{smallcode}%

\newcommand{\abs}[1]{\lvert#1\rvert}%
\newcommand{\norm}[1]{\lVert#1\rVert}%

\newcommand{\result}{\mbox{result}}%
\newcommand{\typespec}[1]{\textbf{#1}\hfill Type Specifier\\}%
\newcommand{\function}[1]{\textbf{#1} \hfill Function\\}%
\newcommand{\macro}[1]{\textbf{#1} \hfill Macro\\}%
\newcommand{\note}[1]{
  \setlength{\fboxsep}{5pt}
  \medskip\noindent\ignorespaces
  \begin{center}
  \fbox{\parbox{0.9\textwidth}{\textbf{Note: }#1}}
  \end{center}
  \par\medskip
  \setlength{\fboxsep}{3pt}
}%

\title{Numerical Linear Algebra in ANSI Common Lisp}%

\author{Thomas M. Hermann}%

\makeglossary%

\begin{document}
\maketitle

\begin{abstract}
\end{abstract}

\printglossary%

\chapter{Introduction}
\label{chap:introduction}

Numerical linear algebra is a fundamental component of scientific and
engineering computing. Though a wide range of solutions are obtained
using numerical linear algebra, the most common are for systems of
linear equations, least squares, eigenvalues and singular value
decomposition.\cite{linear-algebra} A Fortran~77 library of standard
routines for these solutions, LAPACK\cite{lapack}, was initially
released in 1992 and has been in continual developement since then.
The majority of the routines in the LAPACK library are expressed in
terms of the Basic Linear Algebra Subroutines
(BLAS)\cite{blas:1,blas:2,blas:3}. An effort to update the BLAS
library was started in November of 1995 with the first meeting of the
BLAS Technical Forum\cite{blast-update}. This effort culminated with
the release of the Basic Linear Algebra Subprograms Technical(BLAST)
Forum Standard\cite{blast-report}. The objective of this project is to
generate linear algebra routines in native ANSI Common Lisp leveraging
the knowledge captured in the BLAST Forum Standard.

\nomenclature{BLAS}{Basic Linear Algebra Subprograms.}

\section{Motivation}
\label{sec:motivation}

\emph{The motivation section is only a sketch. Emphasized text simply
  notes what needs to be discussed.}

A numerical linear algebra library with a standard application
programming interface(API) facilitates development of numerical
software through code reuse and portability. Furthermore, a standard
API enables the development of high performance libraries customized
for a specific platform. The adoption by the scientific and
engineering community of the LAPACK and BLAS libraries demonstrated
the value of these attributes\cite{blast-update}. A native Common Lisp
numerical linear algebra library would facilitate the development of
scientific and engineering software in Common Lisp.

\emph{Performance paragraph} Lisp has the reputation of lacking
sufficient floating point performance\cite{cl-float} for use in
scientific and engineering applications. There is no technical basis
for this reputation. To the contrary, examples of Lisp implementations
geared towards numerical computations are provided in Steele and
Gabriel\cite{lisp-evolution}. An early critique\cite{cl-critique} of
Common Lisp does note several issues that impact numeric performance.
Some of these issues have been addressed by compilers such as
CMUCL\cite{CMUCL} and by advances in hardware.\textbf{Expand this
  discussion.}

\emph{FFI paragraph} To the GNU Scientific library: GSLL and NLISP.
BLAS and LAPACK are through MatLisp. The BLAS and LAPACK libraries
were written in Fortran~77. The BLAST Forum
Standard\cite{blast-report} provides specifications for Fortran~95,
Fortran~77 and C versions of the library. FFI generally results in the
best performance. While the objective of this project is development
of a native CL linear algebra library, the library API could be used
as an abstraction layer for an FFI to other languages. Then, code
written to the interface would use the best available implementation.

\emph{F2CL paragraph. Maxima gets LAPACK through F2CL.}

\emph{Symbolic mathematics paragraph. MACSYMA references and current
  Maxima.}

\emph{Wrapup paragraph} Gain experience with Common Lisp. Not
constrained by the limitations of other programming languages. Able to
design the library to leverage the strengths of Common Lisp.
Performance difference less significant than development time.
Availability and use of a numerical linear algebra library in Common
Lisp would spur improvements in compilers that would improve
performance.  Focusing on developing the API, will address performance
in future releases.

\nomenclature{API}{Application Programming Interface.}
\nomenclature{ANSI}{American National Standards Institute.}
\nomenclature{FFI}{Foreign Function Interface.}

\section{Design and Implementation}
\label{sec:design}

The first release of this library is focused on correctness,
completeness and interface design. Performance was not a consideration
in the initial design. Performance will be addressed in future
releases. Mixed argument operations are not explicitly handled, the
standard behavior of Common Lisp is used.

The correctness is established by implementing algorithms that are
documented to be correct. The algoritms are implemented from the
BLAS\cite{blas:1,blas:2,blas:3}, BLAST\cite{blast-report},
LAPACK\cite{lapack}, Demmel\cite{linear-algebra}, LAPACK working notes
and other references. The correctness of the implementation is then
verified through the unit testing.

Performance issues will be addressed when the interface is frozen and
the unit testing is in place to verify the correctness of the
algorithms. Performance improvements should be conducted using a
2-step process. First, the algorithm of the poorly performing routine
should be audited. Improvements to the algorithm that have no or
little data type considerations will be implemented in this step.

Finally, when the algorithms have been sufficiently audited and
improved, data type considerations should be addressed. The default
for the library should be to rely on the underlying Common Lisp
implementation to handle the types appropriately. A mechanism for
specifying the floating point type should be implemented, though. This
mechanism should be comprised of a special variable, for example
[[LINEAR-ALGEBRA:*PRECISION*]], that can be set to [[SINGLE-FLOAT]] or
[[DOUBLE-FLOAT]]. Next, a set of macros should be implemented that
indicate the type throughout the code based on the value of
[[*PRECISION*]]. Constants such as [[LINEAR-ALGEBRA:*ZERO*]] and
[[LINEAR-ALGEBRA:*ONE*]] should be defined that are the appropriate
type based on [[*PRECISION*]]. These constants should be used
throughout the code to aid type inference.

All routines are defined in the ``Linear Algebra'' package.
<<In linear algebra package>>=
<<BSD Copyright>>
(common-lisp:in-package :linear-algebra)

@

\section{Open Topics}
\label{sec:open-topics}

\begin{itemize}
\item Banded matrices
\item Sparse matrices
\item Tensor objects and routines
\item Type specific routines
\item Exception handling(underflow, overflow, etc.)
\item IEEE 754 hardware exception handling
\item SMP capabilities
\item Distributed capabilities, possibly MPI.
\end{itemize}

Performance improvements
\begin{itemize}
\item uni-processor performance.
\item Vectorization.
\item SMP performance.
\item Distributed performance, possibly MPI.
\item Native code generation.
\end{itemize}

A tensor object needs to be designed and integrated into the library.
This may require a modification of the interface.

The performance releases will also try to improve the native code
generation for targeted platforms. The targeted performance platforms
are SBCL, CCL, and Lispworks\emph{Add CMUCL?}. After performance
benchmarks have been developed, an evaluation of Scieneer Common Lisp
will be performed.The code will also be tested on clisp and ecl. When
the interface is established, versions of the library relying on FFI
to Fortran routines may also be implemented.

Minimal error checking is performed in the current implementation.
When the interface is established, an error condition system will be
implemented that improves the error reporting for the user.

Exception handling is generally not implemented. The default exception
handling should rely on Common Lisp exception facilities. The ability
to utilize IEEE~754 hardware exception handling should be provided as
well.

\chapter{Fundamental Operations}
\label{chap:fundamental-operations}

Operations in LAPACK are expressed to the greatest extent possible in
terms of BLAS operations. Expressing the linear algebra operations in
terms of core operations reduces errors and allows optimizations
implemented in the core operations to be propogated to the
higher-level operations. The fundamental linear algebra operations
summarized in Table~\ref{tab:fundamental-ops} are based on a review of
the BLAS Technical Forum documentation\cite{blast-report}. These
operations provide the fundamental building blocks necessary for
higher level linear algebra operations.
<<fundamental-ops.lisp>>=
<<In linear algebra package>>
<<Generic function: Scaled sum of squares>>
<<Generic function: Scaled sum of powers of p>>
<<Generic function: Vector and matrix norms>>
<<Generic function: Transpose of a vector or matrix>>
<<Generic function: Destructive transpose of a vector or matrix>>
<<Generic function: Permutation of a vector or matrix>>
<<Generic function: Destructive permutation of a vector or matrix>>
<<Generic function: Scale the vector or matrix>>
<<Generic function: Destructively scale the vector or matrix>>
<<Generic function: Vector or matrix binary addition>>
<<Generic function: Destructive vector or matrix binary addition>>
<<Generic function: Vector or matrix binary subtraction>>
<<Generic function: Destructive vector or matrix binary subtraction>>
<<Generic function: Vector or matrix product>>
@ The fundamental operations depend on the linear algebra package
definition.
<<Fundamental operation dependencies>>=
(:file "fundamental-ops"
       :depends-on ("defpackage"))
@ 
\begin{table}
  \centering
  \caption{Fundamental linear algebra operations.}
  \begin{tabular}{p{0.2\textwidth}p{0.75\textwidth}}
    \hline
    Operation      & Description\\
    \hline
    [[sumsq]]      & Return the scaling parameter and sum of the
                     squares. \\ 
    [[sump]]       & Return the scaling parameter and sum of the P
                     powers. \\ 
    [[norm]]       & Vector and matrix norms.\\
    [[transpose]]  & Transpose the vector or matrix.\\
    [[ntranspose]] & Destructive transpose of the vector or matrix.\\
    [[permute]]    & Permute the vector or matrix.\\
    [[npermute]]   & Destructively permute the vector or matrix.\\
    [[scale]]      & Scale each element of the vector or matrix.\\
    [[nscale]]     & Destructively scale each element of the vector
                     or matrix.\\
    [[add]]        & Vector or matrix binary addition.\\
    [[nadd]]       & Destructive vector or matrix binary addition.\\
    [[subtract]]   & Vector or matrix binary subtraction.\\
    [[nsubtract]]  & Destructive vector or matrix binary subtraction.\\
    [[product]]    & Vector-vector, matrix-vector and matrix-matrix
                     product.\\
    \hline
  \end{tabular}
  \label{tab:fundamental-ops}
\end{table}

\note{The current implementation of the fundamental operations for
  data vectors, dense matrices and the respective subclasses rely on
  the internal representation of the data. It may be useful to
  implement these fundamental operations in terms of the data
  operations. For new classes, only the data operations for a class
  would need to be implemented. Then, as performance requirements
  dictated, class specific implementations of the fundamental
  operations could be generated. A flaw in this approach is that it
  may not be possible to determine the proper type of the new matrix
  returned, for example, from [[add]].}

\section{Scaled Vector and Matrix Sums}
\label{sec:scaled-vector-and-matrix-sums}

Scaled vector and matrix sums are primarily required to support vector
and matrix norms. [[sumsq]] returns 2 values, the scaling parameter
and the sum of the squares. The function iterates through the elements
of the vector or matrix updating [[scale]] and [[sumsq]] so that they
satisfy Equation~\ref{eq:sumsq}.
\begin{subequations}
  \label{eq:result-sumsq}
  \begin{align}
    (scale, sumsq) & \leftarrow \sum_i x_i^2
    \label{eq:vector-result-sumsq} \\
    (scale, sumsq) & \leftarrow \sum_i \sum_j A_{ij}^2
    \label{eq:matrix-result-sumsq}
  \end{align}
\end{subequations}
such that
\begin{subequations}
  \label{eq:sumsq}
  \begin{align}
    scale^2 \times sumsq & = \sum_i x_i^2
    \label{eq:vector-sumsq} \\
    scale^2 \times sumsq & = \sum_i \sum_j A_{ij}^2
    \label{eq:matrix-sumsq}
  \end{align}
\end{subequations}
where $scale \leftarrow \max ( scale,\abs{x}_i )$ for vectors and
$scale \leftarrow \max ( scale, \abs{A}_{ij} )$ for matrices.
<<Generic function: Scaled sum of squares>>=
(defgeneric sumsq (vector-or-matrix &key scale sumsq)
  (:documentation
   "Return the scaling parameter and the sum of the squares."))

@ Similarly, [[sump]] returns 2 values, the scaling parameter and the
sum of the P powers of the absolute values of the vector or matrix.
The function iterates through the vector or matrix updating the
scaling parameter and the sum so that they satisfy
Equation~\ref{eq:sump}.
\begin{subequations}
  \label{eq:result-sump}
  \begin{align}
    (scale, sump) & \leftarrow \sum_i x_i^p
    \label{eq:vector-result-sump} \\
    (scale, sump) & \leftarrow \sum_i \sum_j A_{ij}^p
    \label{eq:matrix-result-sump} \\
  \end{align}
\end{subequations}
such that
\begin{subequations}
  \label{eq:sump}
  \begin{align}
    scale^p \times sump & = \sum_i x_i^p
    \label{eq:vector-sump} \\
    scale^p \times sump & = \sum_i \sum_j A_{ij}^p
    \label{eq:matrix-sump}
  \end{align}
\end{subequations}
where $scale \leftarrow \max ( scale,\abs{x}_i )$ for vectors and
$scale \leftarrow \max ( scale, \abs{A}_{ij} )$ for matrices.
<<Generic function: Scaled sum of powers of p>>=
(defgeneric sump (vector-or-matrix p &key scale sump)
  (:documentation
   "Return the scaling parameter and the sum of the P powers."))

@ [[sumsq]] and [[sump]] are exported symbols.
<<Fundamental operation exports>>=
:sumsq :sump
@

\note{The keyword arguments for [[SUMSQ]] and [[SUMP]] are present to
  mirror the argument list of [[LASSQ]] and friends subroutines in
  LAPACK. It appears that these are present to facilitate using
  [[LASSQ]] with arrays. If this can be verified, these keywords
  should be removed from the lambda list.}

\section{Vector and Matrix Norms}
\label{sec:vecotr-and-matrix-norms}

The [[norm]] function returns the norm of the vector or matrix
according to the measure. There is one required argument, either a
vector or a matrix, and one keyword argument, the measure of the norm.
\begin{subequations}
  \label{eq:norm}
  \begin{align}
    \result & \leftarrow \norm{x}_p \label{eq:vector-norm} \\
    \result & \leftarrow \norm{A}_p \label{eq:matrix-norm} 
  \end{align}
\end{subequations}
<<Generic function: Vector and matrix norms>>=
(defgeneric norm (vector-or-matrix &key measure)
  (:documentation
   "Return the norm according to measure."))

@ [[norm]] is an exported symbol.
<<Fundamental operation exports>>=
:norm
@

Three specific vector norms, equation~\eqref{eq:vector-norm}, are
implemented, listed in Table~\ref{tab:vector-norms}. The default norm
is the taxicab, or one, norm. It is the sum of the absolute values of
the vector elements. The next norm is the Euclidean, or two, norm. It
is the square root of the sum of the squares of the vector elements.
The last specific norm is the infinity norm. It is simply the maximum
of the absolute values of the vector elements. All other measures are
handled by the general P-norm.
\begin{table}
  \centering
  \caption{Vector norms.}
  \begin{tabular}{ll@{=}c}
    \hline
    Vector Norm & \multicolumn{2}{c}{}  \\
    \hline
    Taxicab   & $\norm{x}_1$ & $\sum_i \abs{x_i}$ \\
    Euclidean & $\norm{x}_2$ &
                $\Bigl( \sum_i \abs{x_i}^2 \Bigr)^{1/2}$ \\
    P-norm    & $\norm{x}_p$ &
                $\Bigl( \sum_i \abs{x_i}^p \Bigr)^{1/p}$ \\
    Infinity  & $\norm{x}_\infty$ & $\max_i \abs{x_i}$ \\
    \hline
  \end{tabular}
  \label{tab:vector-norms}
\end{table}

Four specific matrix norms, equation~\eqref{eq:matrix-norm}, are
implemented, listed in Table~\ref{tab:matrix-norms}. The default norm
is the 1 norm. It is the maximum of the sums of the matrix columns.
The second norm is the max norm that is the maximum of the absolute
values of the elements.  Next is the Frobenius norm that is the matrix
equivalent of the vector Euclidean norm. Finally, the infinity norm of
a matrix is the maximum of the sums of the matrix rows.
\begin{table}
  \centering
  \caption{Matrix norms.}
  \begin{tabular}{ll@{=}c}
    \hline
    Matrix Norm & \multicolumn{2}{c}{} \\
    \hline
    1-norm    & $\norm{A}_1$ & $\max_j \sum_i \abs{a_{ij}}$ \\
    Max       & $\norm{A}_{max}$ & $\max\Bigl\{\abs{a_{ij}}\Bigr\}$ \\
    Frobenius & $\norm{A}_F$ &
                $\Bigl( \sum_{ij} \abs{a_{ij}}^2 \Bigr)^{1/2}$ \\
    Infinity  & $\norm{A}_\infty$ & $\max_i \sum_j \abs{a_{ij}}$ \\
    \hline
  \end{tabular}
  \label{tab:matrix-norms}
\end{table}

\section{Vector and Matrix Transpose}
\label{sec:vector-and-matrix-transpose}

The [[transpose]] function returns the transpose or conjugate
transpose of a vector or matrix. It has one required argument that is
either the vector or matrix. There is a [[conjugate]] keyword that is
only applicable to complex valued vectors or matrices.  Setting
[[conjugate]] to true returns the conjugate transpose. The
[[conjugate]] keyword has no effect on real valued vectors or
matrices.A new vector or matrix is returned from [[transpose]].
\begin{subequations}
  \label{eq:transpose}
  \begin{align}
    \result & \leftarrow x^T \label{eq:vector-transpose} \\
    \result & \leftarrow x^* \label{eq:vector-conjugate-transpose} \\
    \result & \leftarrow A^T \label{eq:matrix-transpose} \\
    \result & \leftarrow A^* \label{eq:matrix-conjugate-transpose}
  \end{align}
\end{subequations}
<<Generic function: Transpose of a vector or matrix>>=
(defgeneric transpose (vector-or-matrix &key conjugate)
  (:documentation
   "Transpose the vector or matrix."))

@ The destructive transpose, [[ntranspose]], updates the vector or
matrix.
\begin{subequations}
  \label{eq:destructive-transpose}
  \begin{align}
    x & \leftarrow x^T \label{eq:vector-ntranspose} \\
    x & \leftarrow x^* \label{eq:vector-conjugate-ntranspose} \\
    A & \leftarrow A^T \label{eq:matrix-ntranspose} \\
    A & \leftarrow A^* \label{eq:matrix-conjugate-ntranspose}
  \end{align}
\end{subequations}
<<Generic function: Destructive transpose of a vector or matrix>>=
(defgeneric ntranspose (vector-or-matrix &key conjugate)
  (:documentation
   "Destructively transpose the vector or matrix."))

@ [[transpose]] and [[ntranspose]] are exported symbols.
<<Fundamental operation exports>>=
:transpose :ntranspose
@

\section{Vector and Matrix Permutation}
\label{sec:vector-and-matrix-permutation}

The [[permute]] function applies a permutation matrix to a vector or
matrix and accepts 2 arguments. The permutation can be applied to
either the rows or the columns depending on the order of the
arguments. If the first argument is the permutation matrix and the
second argument the vector or matrix, the rows are permuted. If the
first argument is the vector or matrix and the second argument is the
permutation matrix, the columns are permuted. A new vector or matrix
is returned from this function.
\begin{subequations}
  \label{eq:permutation}
  \begin{align}
    \result & \leftarrow Px \label{eq:column-vector-permutation} \\
    \result & \leftarrow xP \label{eq:row-vector-permutation} \\
    \result & \leftarrow PA \label{eq:matrix-row-permutation} \\
    \result & \leftarrow AP \label{eq:matrix-column-permutation}
  \end{align}
\end{subequations}
<<Generic function: Permutation of a vector or matrix>>=
(defgeneric permute (vector-or-matrix vector-or-matrix)
  (:documentation
   "Permute the vector or matrix."))

@ [[npermute]] destructively permutes the vector or matrix.
\begin{subequations}
  \label{eq:destructive-permutation}
  \begin{align}
    x & \leftarrow Px \label{eq:column-vector-npermutation} \\
    x & \leftarrow xP \label{eq:row-vector-npermutation} \\
    A & \leftarrow PA \label{eq:matrix-row-npermutation} \\
    A & \leftarrow AP \label{eq:matrix-column-npermutation}
  \end{align}
\end{subequations}
<<Generic function: Destructive permutation of a vector or matrix>>=
(defgeneric npermute (vector-or-matrix vector-or-matrix)
  (:documentation
   "Destructively permute the vector or matrix."))

@ [[permute]] and [[npermute]] are an exported symbols.
<<Fundamental operation exports>>=
:permute :npermute
@

\section{Vector and Matrix Scaling}
\label{sec:vector-and-matrix-scaling}

The [[scale]] function scales each element of the vector or matrix by
a scalar. Two arguments are required, the scalar multiple and the
vector or matrix to be scaled. A new vector or matrix is returned from
this function.
\begin{subequations}
  \label{eq:scale}
  \begin{align}
    \result & \leftarrow scalar \times x \label{eq:vector-scale} \\
    \result & \leftarrow scalar \times A \label{eq:matrix-scale}
  \end{align}
\end{subequations}
<<Generic function: Scale the vector or matrix>>=
(defgeneric scale (scalar vector-or-matrix)
  (:documentation
   "Scale each element by the scalar."))

@ The destructive version, [[nscale]], updates the vector or matrix.
\begin{subequations}
  \label{eq:destructive-scale}
  \begin{align}
    x & \leftarrow scalar \times x \label{eq:vector-nscale} \\
    A & \leftarrow scalar \times A \label{eq:matrix-nscale}
  \end{align}
\end{subequations}
<<Generic function: Destructively scale the vector or matrix>>=
(defgeneric nscale (scalar vector-or-matrix)
  (:documentation
   "Destructively scale each element by the scalar."))

@ [[scale]] and [[nscale]] are exported symbols.
<<Fundamental operation exports>>=
:scale :nscale
@

\section{Vector and Matrix Addition}
\label{sec:vector-and-matrix-addition}

The [[add]] function returns the addition of 2 vectors or matrices,
optionally scaled.  Two arguments are required, the 2 vectors or
matrices to perform addition on. The scalar values are specified using
keywords. A new vector or matrix is returned from [[add]].
\begin{subequations}
  \label{eq:addition}
  \begin{align}
    \result & \leftarrow scalar1 \times x_1 + scalar2 \times x_2
    \label{eq:vector-addition} \\
    \result & \leftarrow scalar1 \times A_1 + scalar2 \times A_2
    \label{eq:matrix-addition}
  \end{align}
\end{subequations}
<<Generic function: Vector or matrix binary addition>>=
(defgeneric add (vector-or-matrix-1 vector-or-matrix-2
                 &key scalar1 scalar2)
  (:documentation
   "Vector or matrix binary addition."))

@ The destructive version, [[nadd]], updates the first vector or
matrix.
\begin{subequations}
  \label{eq:destructive-addition}
  \begin{align}
    x_1 & \leftarrow scalar1 \times x_1 + scalar2 \times x_2
    \label{eq:vector-naddition} \\
    A_1 & \leftarrow scalar1 \times A_1 + scalar2 \times A_2
    \label{eq:matrix-naddition}
  \end{align}
\end{subequations}
<<Generic function: Destructive vector or matrix binary addition>>=
(defgeneric nadd (vector-or-matrix-1 vector-or-matrix-2
                  &key scalar1 scalar2)
  (:documentation
   "Destructive vector or matrix addition."))

@ [[add]] and [[nadd]] are exported symbols.
<<Fundamental operation exports>>=
:add :nadd
@

\section{Vector and Matrix Subtraction}
\label{sec:vector-and-matrix-subtraction}

The [[subtract]] function returns the subtraction of a vector or
matrix from a vector or matrix, respectively. Two arguments are
required, the 2 vectors or matrices to operate on. The vectors or
matrices are optionally scaled by scalars specified with keywords. The
subtraction is performed by subtracting the elements of the second
argument from the elements of the first argument. A new vector or
matrix is returned from [[subtract]].
\begin{subequations}
  \label{eq:subtraction}
  \begin{align}
    \result & \leftarrow scalar1 \times x_1 - scalar2 \times x_2
    \label{eq:vector-subtraction} \\
    \result & \leftarrow scalar1 \times A_1 - scalar2 \times A_2
    \label{eq:matrix-subtraction}
  \end{align}
\end{subequations}
<<Generic function: Vector or matrix binary subtraction>>=
(defgeneric subtract (vector-or-matrix-1 vector-or-matrix-2
                      &key scalar1 scalar2)
  (:documentation
   "Vector or matrix binary subtraction."))

@ The destructive version, [[nsubtract]], updates the first vector or
matrix.
\begin{subequations}
  \label{eq:destructive-subtraction}
  \begin{align}
    x_1 & \leftarrow scalar1 \times x_1 - scalar2 \times x_2
    \label{eq:vector-nsubtraction} \\
    A_1 & \leftarrow scalar1 \times A_1 - scalar2 \times A_2
    \label{eq:matrix-nsubtraction}
  \end{align}
\end{subequations}
<<Generic function: Destructive vector or matrix binary subtraction>>=
(defgeneric nsubtract (vector-or-matrix-1 vector-or-matrix2
                       &key scalar1 scalar2)
  (:documentation
   "Destructive vector or matrix subtraction."))

@ [[subtract]] and [[nsubtract]] are exported symbols.
<<Fundamental operation exports>>=
:subtract :nsubtract
@

\note{The subtraction function is in a sense redundant to the addition
  function. This could be resolved in a couple ways. The first way
  would be to only provide the addition function and perform
  subtraction by passing a negative value for the second scalar. The
  second way would be to abstract binary combination out to a general
  function that is wrapped by [[addition]] and [[subtraction]].}

\section{Vector and Matrix Product}
\label{sec:vector-and-matrix-product}

[[product]] is the interface to the vector dot product, matrix-vector
product and matrix-matrix product operations. There are 2 required
arguments and 2 keyword arguments, [[scalar]] and [[conjugate]].
Matrix-vector product implementations require a matrix and a vector
argument. If the matrix is pre-multiplied by the vector, the first
argument must be a row vector and the second argument a matrix.
Otherwise, the first argument is a matrix and the second argument is a
column vector. A new vector is returned from matrix-vector products.
A new matrix is returned from matrix-matrix products.
\begin{subequations}
  \label{eq:product}
  \begin{align}
    \result & \leftarrow scalar \times x^T y
            = scalar \times \sum_i x_i y_i
              \label{eq:vector-vector} \\
    \result & \leftarrow scalar \times x^* y
            = scalar \times \sum_i \bar{a}_i y_i
              \label{eq:conjugate-vector-vector} \\
    \result & \leftarrow scalar \times x^T A
            = scalar \times \sum_i x_i A_{ij}
              \label{eq:vector-matrix} \\
    \result & \leftarrow scalar \times x^* A
            = scalar \times \sum_i \bar{x}_i A_{ij}
              \label{eq:conjugate-vector-vector} \\
    \result & \leftarrow scalar \times A x
            = scalar \times \sum_j A_{ij} x_j
              \label{eq:matrix-vector} \\
    \result & \leftarrow scalar \times A B
            = scalar \times \sum_k A_{ik} B_{kj}
              \label{eq:matrix-matrix}
  \end{align}
\end{subequations}
<<Generic function: Vector or matrix product>>=
(defgeneric product (vector-or-matrix-1 vector-or-matrix-2 &key scalar)
  (:documentation
   "Return the vector-vector, matrix-vector or matrix-matrix product."))

@ [[product]] is an exported symbol.
<<Fundamental operation exports>>=
:product
@

\note{Need to add the conjugate keyword to the lambda list.}

\note{The BLAS xxMV routines and GEMM routine have optional transpose
  arguments. In the case of matrix-vector products, it is presumed
  that the transpose argument indicates whether it is a vector-matrix
  or matrix-vector product. In this library, this is handled using
  generic dispatch. For example, it is valid to only pre-multiply a
  matrix by a row vector. In the case of the GEMM routine, the
  transpose arguments account for matrix-matrix product with
  non-square matrices. This is automatically handled in this library.
  Consequently, there is no need for a transpose keyword that is
  analogous to BLAS optional argument. The presumption for this will
  be verified once the entire library is implemented. If this
  presumption is wrong, a transpose keyword will be added.}

\chapter{Vectors}
\label{chap:vectors}

A linear algebra vector object is defined in this chapter using the
Common Lisp Object System(CLOS). It is the superclass for all linear
algebra vectors. In the next chapter, a specific implementation, the
data vector, is defined with 2 subclasses for row and column vectors.
<<vector.lisp>>=
<<In linear algebra package>>
<<Class: Vector superclass>>
<<Vector interface operations>>
<<Vector iteration operations>>
<<Vector transformations>>
@ Definition of vectors depends on the linear algebra package and
fundamental operations.
<<Vector dependencies>>=
(:file "vector"
       :depends-on ("defpackage"
                    "fundamental-ops"))
@

All vector objects are a subclass of the [[vector-object]] superclass.
No presumptions are made about the internal storage of the vector
data, therefore, this superclass has no slots.
<<Class: Vector superclass>>=
;;; Linear algebra vector superclass
(defclass vector-object ()
  ()
  (:documentation
   "Linear algebra vector superclass."))

@ [[vector-object]] is an exported symbol.
<<Vector exports>>=
:vector-object
@ 

\note{The vector object is an appealing place for 2 slots. The first
  slot is a boolean named [[immutable]] and would allow the user to
  mark a vector as immutable. While not strictly being immutable, as
  this is not possible in CL, the immutable slot would restrict the
  interface to operations that don't modify the contents of the
  vector. Hopefully, this would aid with adding concurrency to the
  operations. The second slot would be [[data-type]] or some
  equivalent name with a class allocation. There would be an
  associated function that would allow the user to set the floating
  point precision. This slot would serve 2 functions.  First, it would
  set the floating point precision for all newly constructed
  vectors. Second, if the function for setting the type was called
  with existing vector instances, it would modify the contents of all
  existing instances to correspond to the specified floating point
  precision. This concept needs to be better developed.}

\nomenclature{CLOS}{Common Lisp Object System.}

\section{Vector Interface Operations}
\label{sec:vector-interface-operations}

The vector interface operations are presented in this section. They
are designed to facilitate integrating new types of vectors into the
linear algebra package with minimal knowledge of the package
internals. The design is modeled after the array and sequence
interface and is intended to also be consistent with the linear
algebra matrix interface.
<<Vector interface operations>>=
;;; Vector interface operations
<<Generic function: Initialize a vector with data>>
<<Function: Make a vector>>
<<Function: Vector predicate>>
<<Generic function: Vector bounds predicate>>
<<Generic function: Vector element type>>
<<Generic function: Vector length>>
<<Generic function: Vector element reference>>
<<Generic function: Copy a vector>>
<<Generic function: Subset of a vector>>
<<Generic function: Destructively replace the subset of a vector>>
@
\begin{table}
  \centering
  \caption{Vector interface operations.}
  \begin{tabular}{p{0.35\textwidth}p{0.6\textwidth}}
    \hline
    Operation & Description \\
    \hline
    [[make-vector]]         & Create a new vector. \\
    [[vector-object-p]]     & Test for a vector object. \\
    [[vector-in-bounds-p]]  & Verify the index is in the vector.  \\
    [[vector-element-type]] & Return the type of the vector elements. \\
    [[vector-length]]       & Return the length of the vector. \\
    [[vref]]           & Reference a vector element, settable. \\
    [[copy-vector]]    & Perform a deep copy of the vector. \\
    [[subvector]]      & Return a subvector of a vector, settable. \\
    [[replace-vector]] & Destructively replace elements of a vector
                         with elements from another. \\
    \hline
  \end{tabular}
  \label{tab:vector-interface}
\end{table}

\subsection{Creating Vectors}
\label{sec:creating-vectors}

The function [[make-vector]] returns a new vector of the indicated
size. The interface is modeled on [[MAKE-ARRAY]]. The only required
argument is the size of the vector. Four keywords are accepted,
[[element-type]], [[vector-type]], [[initial-element]] and
[[initial-contents]]. The default type of vector is [[column-vector]].
Either the [[initial-element]] or the [[initial-contents]] may be
specified, but not both. If neither are specified, the elements of the
vector are initialized to zero.
<<Function: Make a vector>>=
(defun make-vector (size &key
                    (element-type t)
                    (vector-type 'column-vector)
                    (initial-element nil initial-element-p)
                    (initial-contents nil initial-contents-p))
  "Create a 1D numeric array to represent a numeric vector."
  (let ((new-vector (make-instance vector-type)))
    (cond
      ((and initial-element-p initial-contents-p)
       (error "Cannot specify both :INITIAL-ELEMENT and :INITIAL-CONTENTS."))
      (initial-contents-p
       (initialize-vector new-vector initial-contents size element-type))
      (initial-element-p
       (initialize-vector new-vector initial-element size element-type))
      (t
       (initialize-vector
	new-vector (coerce 0 element-type) size element-type)))))

@ The [[make-vector]] function relies on the generic function
[[initialize-vector]] to initialize the instance of the vector. This
enables the addition of new vector types without modification to the
make-vector function. The [[initialize-vector]] function should be
specialized on the type of the vector and the data.
<<Generic function: Initialize a vector with data>>=
(defgeneric initialize-vector (vector data size &optional element-type)
  (:documentation
   "Initialize the vector with data."))

@ [[make-vector]] and [[initialize-vector]] are exported symbols.
<<Vector exports>>=
:make-vector :initialize-vector
@ 

\subsection{Vector Predicates}
\label{sec:vector-predicates}

Two linear algebra vector predicates are defined. [[vector-object-p]]
accepts a single argument and returns true if is is a
[[vector-object]].
<<Function: Vector predicate>>=
(defun vector-object-p (object)
  "Return true if the object is a vector-object."
  (typep object 'vector-object))

@ [[vector-in-bounds-p]] accepts 2 arguments, a vector and an index.
It returns true if the index does not exceed the bounds of the vector.
<<Generic function: Vector bounds predicate>>=
(defgeneric vector-in-bounds-p (vector index)
  (:documentation
   "Return true if index does not exceed the dimensions of vector."))

@ [[vector-object-p]] and [[vector-in-bounds-p]] are exported symbols.
<<Vector exports>>=
:vector-object-p :vector-in-bounds-p
@

\subsection{Inspecting Vectors}
\label{sec:inspecting-vectors}

The [[vector-element-type]] function returns the specific type of the
vector elements. It accepts one argument.
<<Generic function: Vector element type>>=
(defgeneric vector-element-type (vector)
  (:documentation
   "Return the element type of vector."))

@ The length of a vector is obtained with [[vector-length]]. It
accepts one argument, the vector, and returns an integer, the length.
<<Generic function: Vector length>>=
(defgeneric vector-length (vector)
  (:documentation
   "Return the length of the vector."))

@ [[vector-element-type]] and [[vector-length]] are exported symbols.
<<Vector exports>>=
:vector-element-type :vector-length
@ 

\subsection{Referencing Vectors}
\label{sec:referencing-vectors}

The [[vref]] function returns the element of the vector at the index.
It is analogous to [[aref]].
<<Generic function: Vector element reference>>=
(defgeneric vref (vector index)
  (:documentation
   "Return the element of vector at index."))

@ [[vref]] is settable.
<<Generic function: Vector element reference>>=
(defgeneric (setf vref) (data vector index)
  (:documentation
   "Set the element of vector at index to data."))

@ [[vref]] is an exported symbol.
<<Vector exports>>=
:vref
@

\subsection{Copying Vectors}
\label{sec:copying-vectors}

A new instance of a vector is obtained from [[copy-vector]]. This
function performs a deep copy of the vector argument.
<<Generic function: Copy a vector>>=
(defgeneric copy-vector (vector)
  (:documentation
   "Return a copy of the vector."))

@ [[copy-vector]] is an exported function.
<<Vector exports>>=
:copy-vector
@ 

\subsection{Manipulating Subsets of Vectors}
\label{sec:vector-subsets}

Subsets of vectors are operated on using [[subvector]] and
[[replace-vector]]. [[subvector]] returns a new [[vector-object]] that
is a subvector starting at [[start]] index and ending at the optional
[[end]] index that defaults to the last element.
<<Generic function: Subset of a vector>>=
(defgeneric subvector (vector start &optional end)
  (:documentation
   "Return a new vector that is a subvector of the vector."))

@ [[subvector]] is settable.
<<Generic function: Subset of a vector>>=
(defgeneric (setf subvector) (subvector vector start &optional end)
  (:documentation
   "Set the subvector of the vector."))

@ The [[replace-vector]] function requires 2 vectors and has keyword
arguments for the start and end index of each vector. It destructively
replaces the specified subset of [[vector1]] with that of [[vector2]],
returning the modified [[vector1]]. The number of elements replaced is
equal to the minimum of the subsets.
<<Generic function: Destructively replace the subset of a vector>>=
(defgeneric replace-vector (vector1 vector2 &key
			    start1 end1 start2 end2)
  (:documentation
   "Destructively replace the elements of vector1 with vector2."))

@ [[subvector]] and [[replace-vector]] are exported symbols.
<<Vector exports>>=
:subvector :replace-vector
@

\section{Vector Iteration Operations}
\label{sec:vector-iteration-operations}

Many of the vector implementations of the fundamental linear algebra
operations described in Chapter~\ref{chap:fundamental-operations} are
concisely expressed using iteration functions. Two mapping functions
are defined in this section, [[map-vector]] and [[map-into-vector]]
and a vector specific macro, [[dovector]], analogous to [[DOLIST]].
<<Vector iteration operations>>=
;;; Vector iteration operations
<<Generic function: Map over a vector>>
<<Generic function: Map into a vector>>
<<Macro: Iterate over a vector>>
@ 
\begin{table}
  \centering
  \caption{Vector iteration operations.}
  \begin{tabular}{p{0.22\textwidth}p{0.65\textwidth}}
    \hline
    Operation & Description\\
    \hline
    [[map-vector]]      & Calls a function on successive sets of
                          vector objects. \\
    [[map-into-vector]] & Destructively maps into the result
                          vector. \\ 
    [[dovector]]        & Iterate over a vector returning result. \\
    \hline
  \end{tabular}
  \label{tab:vector-iteration}
\end{table}

The arguments to the [[map-vector]] function are the result type that
must be a subtype of [[vector-object]], the function to apply to each
element of the vectors and one or more vector arguments. It returns a
new vector containing the results.
<<Generic function: Map over a vector>>=
(defgeneric map-vector (result-type function first-vector &rest more-vectors)
  (:documentation
   "Calls function on successive sets of vector objects."))

@ The destructive mapping function, [[map-into-vector]], modifies a
result vector.
<<Generic function: Map into a vector>>=
(defgeneric map-into-vector (result-vector function &rest vectors)
  (:documentation
   "Destructively modifies the result vector with the result of
applying the function to each element of the vectors."))

@ [[map-vector]] and [[map-into-vector]] are exported symbols.
<<Vector exports>>=
:map-vector :map-into-vector
@ 

The [[dovector]] macro iterates over the vector [[vector]] with
[[element]] bound to the current element, executing the [[body]] form
for each iteration, returning [[result]].
<<Macro: Iterate over a vector>>=
(defmacro dovector ((element vector &optional result)
                    &body body)
  "Iterate over vector returning result."
  (let ((pos (gensym "POS-"))
	(end (gensym "END-")))
    `(let ((,end (vector-length ,vector))
	   (,element nil))
      (dotimes (,pos ,end ,result)
	(setf ,element (vref ,vector ,pos))
	,@body))))

@ [[dovector]] is an exported symbol.
<<Vector exports>>=
:dovector
@ 

\section{Vector Transformations}
\label{sec:vector-transformations}

Vector transformations are used to perform matrix decomposition. Three
transformations are defined in this section, the Givens rotation, the
Jacobi rotation and the Householder reflection.
<<Vector transformations>>=
;;; Vector transformations
<<Function: Givens rotation>>
<<Function: Jacobi rotation>>
<<Function: Householder reflection>>
<<Generic function: Apply vector rotation>>
@ 

\note{Need to establish a rule of float substitutability for vector
  transformations.(CLHS 12.1.3.3)}

\subsection{Givens Rotation}
\label{sec:givens}

A Givens rotation\cite{lawn148}, $R(c,s)$, is defined as a 2x2 unitary
matrix that rotates a vector with 2 elements, $f$ and $g$, into a
vector with a result, $r$, and a zero.
\begin{equation}
  \label{eq:givens-rotation}
  R(c,s) \cdot
  \begin{pmatrix}
    f \\ g
  \end{pmatrix}
  \equiv
  \begin{pmatrix}
    c & s \\ - \bar{s} & c
  \end{pmatrix}
  \cdot
  \begin{pmatrix}
    f \\ g
  \end{pmatrix}
  =
  \begin{pmatrix}
    r \\ 0
  \end{pmatrix}
\end{equation}
When $f,g \in \mathbb{R}^2$, the Givens rotation is\cite{linear-algebra}
\begin{equation}
  \label{eq:real-rotation}
  R(\theta) \equiv
  \begin{pmatrix}
    \cos \theta & -\sin \theta \\
    sin \theta & \cos \theta
  \end{pmatrix}
\end{equation}
which is a counter-clockwise rotation by $\theta$. In this case,
$\theta$ is chosen such that
\begin{equation}
  \label{eq:real-givens}
  \begin{pmatrix}
    \cos \theta & - \sin \theta \\
    \sin \theta & \cos \theta
  \end{pmatrix}
  \begin{pmatrix}
    f \\ g
  \end{pmatrix}
  =
  \begin{pmatrix}
    \sqrt{ f^2 + g^2 } \\ 0
  \end{pmatrix}
\end{equation}

As discussed in the LAPACK Working Note~148\cite{lawn148},
implementation of the Givens rotation is not trivial, especially when
$f=0$ or $g=0$. When exceptional conditions such as underflow or
[[NaN]] are not considered, the algorithm for real and complex inputs
is defined in Algorithm~1\cite{lawn148}.
\begin{algorithm}
  \caption{Algorithm~1 in LAWN~148 for the Givens rotation.}
  \label{algorithm-1-lawn-148}
  \begin{algorithmic}
    \IF[includes the case $f=g=0$]{$g=0$}
    \STATE $c \leftarrow 1$
    \STATE $s \leftarrow 0$
    \STATE $r \leftarrow f$
    \ELSIF[$g$ must be nonzero]{$f=0$}
    \STATE $c \leftarrow 0$
    \STATE $s \leftarrow \mbox{sign}( \bar{g} )$
    \STATE $r \leftarrow |g|$
    \ELSE[$f$ and $g$ both nonzero]
    \STATE $c \leftarrow |f|/\sqrt{|f|^2 + |g|^2}$
    \STATE $s \leftarrow \mbox{sign}(f)\bar{g}/\sqrt{|f|^2 + |g|^2}$
    \STATE $r \leftarrow \mbox{sign}(f)\sqrt{|f|^2 + |g|^2}$
    \ENDIF
  \end{algorithmic}
\end{algorithm}
This is the algorithm implemented.
<<Function: Givens rotation>>=
(defun givens-rotation (f g)
  "Return c,s,r defined from the Givens rotation."
  (cond
    ((zerop g)
     (values 1 0 f))
    ((zerop f)
     (values 0 (signum (conjugate g)) (abs g)))
    (t
     (let* ((abs-f (abs f))
	    (abs-g (abs g))
	    (sqrtfg (sqrt (+ (* abs-f abs-f) (* abs-g abs-g)))))
       (values
	(/ abs-f sqrtfg)
	(/ (* (signum f) (conjugate g)) sqrtfg)
	(* (signum f) sqrtfg))))))

@ [[givens-rotation]] is an exported symbol.
<<Vector exports>>=
:givens-rotation
@ 

\subsubsection{Jacobi Rotation}
\label{sec:jacobi}

The Jacobi rotation is used to compute eigenvalues and eigenvectors
for the symmetric eigenproblem and singular value
decomposition.\cite{linear-algebra} While the performance of the
Jacobi rotation not as good as other methods, it can be used to
compute small values of eigenvalues and eigenvectors with more
accuracy then other methods. It is also easily
parallelized.\cite{linear-algebra} The rotation is constructed to
satisfy
\begin{equation}
  \label{eq:jacobi-rotation}
  \begin{pmatrix}
    a & 0 \\ 0 & b
  \end{pmatrix}
  =
  \begin{pmatrix}
    c & \bar{s} \\ -s & c
  \end{pmatrix}
  \cdot
  \begin{pmatrix}
    x & y \\ \bar{y} & z
  \end{pmatrix}
  \cdot
  \begin{pmatrix}
    c & -\bar{s} \\ s & c
  \end{pmatrix}
\end{equation}
given $x$, $y$ and $z$. In equation~\ref{eq:jacobi-rotation}, $c
\equiv \cos\theta$, $s \equiv \exp^{i\psi} \sin\theta$, $x,y \in R$
and $y \equiv Y\exp^{i\phi}$. Expanding the matrix multiplication on
the right side of equation~\ref{eq:jacobi-rotation} results in
\begin{equation}
  \label{eq:jacobi-expansion}
  \begin{pmatrix}
    a & 0 \\ 0 & b
  \end{pmatrix}
  =
  \begin{pmatrix}
    c^2 x + c \bar{s} \bar{y} + c s y + s \bar{s} z &
    - c \bar{s} x - \bar{s} \bar{s} \bar{y} + c^2 y + c \bar{s} z \\
    - c s x + c^2 \bar{y} - s s y + c s z &
    s \bar{s} x - c \bar{s} \bar{y} - c s y + c^2 z
  \end{pmatrix}
\end{equation}
Now the off diagonal terms can be set to 0 and used to solve for the
rotational terms.
\begin{align}
  \label{eq:jacobi-rot-terms}
  \frac{x-z}{y} & = \frac{c^2 - s\bar{s}}{c\bar{s}} \notag \\
  \frac{x-z}{Y\exp^{i\phi}} &
  = \frac{\cos^2\theta -
    \sin^2\theta}{\cos\theta\exp^{-i\psi}\sin\theta} \notag \\
  \frac{x-z}{Y} &
  = \exp^{i\phi}\exp^{i\psi} \frac{\cos^2\theta -
    \sin^2\theta}{\cos\theta\sin\theta}
\end{align}
Define the term $\tau$ by setting $\psi=-\phi$ and dividing
equation~\ref{eq:jacobi-rot-terms} by 2.
\begin{equation}
  \label{eq:jacobi-tau}
  \frac{x-z}{2Y} = \frac{\cos 2\theta}{\sin 2\theta} = \cot 2\theta = \tau
\end{equation}
Express the identity $\tan 2\theta = 2\tan\theta/(1-\tan^2\theta)$ as
the quadratic equation $t^2 + 2\tau t - 1 = 0$ to solve for
$\cos\theta$ where $t = \tan\theta$. Next, $\cos\theta$ can be
substituted into the definition of $t$ to obtain $\sin\theta$. With
$\sin\theta$, all terms required to calculate $a$ and $b$ have been
obtained. This results in Algorithm~\ref{alg:jacobi-rotation}.
\begin{algorithm}
  \caption{Jacobi Rotation, Given $x$, $y$ and $z$.}
  \label{alg:jacobi-rotation}
  \begin{algorithmic}
    \STATE $\tau \leftarrow ( x - z ) / ( 2 \cdot |y| )$
    \STATE $t \leftarrow \mbox{sign}(\tau) /
           (|\tau| + \sqrt{1+\tau^2})$
    \STATE $c = \cos\theta \leftarrow 1 / \sqrt{1 + t^2}$
    \STATE $\sin\theta \leftarrow c \cdot t$
    \STATE $s \leftarrow \exp^{i\psi} \sin\theta$
    \STATE $a \leftarrow x \cos^2\theta + z \sin^2\theta + 2|y|\sin\theta\cos\theta$
    \STATE $b \leftarrow x \sin^2\theta + z \cos^2\theta - 2|y|\sin\theta\cos\theta$
    \RETURN $a$, $b$, $c$ and $s$
  \end{algorithmic}
\end{algorithm}
<<Function: Jacobi rotation>>=
(defun jacobi-rotation (x y z)
  "Return a, b, cos(theta) and sin(theta) terms from the Jacobi rotation."
  (let* ((yabs (abs y))
	 (tau  (/ (- x z) 2.0 yabs))
	 (tee  (/ (float-sign tau)
		  (+ (abs tau) (sqrt (+ 1.0 (expt tau 2))))))
	 (cos-theta (/ (sqrt (+ 1.0 (expt tee 2))))) ; Invert sqrt
	 (sin-theta (* cos-theta tee)))
    (values
     ;; a : first eigenvalue
     (+ (* cos-theta cos-theta x)
	(* 2.0 cos-theta sin-theta yabs)
	(* sin-theta sin-theta z))
     ;; b : second eigenvalue
     (+ (* sin-theta sin-theta x)
	(* -2.0 cos-theta sin-theta yabs)
	(* cos-theta cos-theta z))
     ;; Cosine theta
     cos-theta
     ;; Sine theta
     (* (conjugate (signum y)) sin-theta))))

@ [[jacobi-rotation]] is an exported symbol.
<<Vector exports>>=
:jacobi-rotation
@ 

\subsubsection{Householder Reflection}
\label{sec:householder}

A Householder reflection is a matrix of the form\cite{linear-algebra}
\begin{equation}
  \label{eq:householder}
  P = I - 2uu^T
\end{equation}
where $\|u\|_2 = 1$. The matrix $P$ is symmetric and orthogonal. Given
a vector $x$, the Householder reflection is used to zero out all
elements except for the first. The algorithm utilized in
CLARFG\cite{lapack} is implemented here without the scaling
considerations.
<<Function: Householder reflection>>=
(defun householder-reflection (alpha vector)
  "Return Beta, Tau and the Householder vector."
  (let* ((beta (- (float-sign
		   (realpart alpha)
		   (lapy2 alpha (norm vector :measure 2)))))
         (tau  (- 1 (/ alpha beta))))
    (values beta tau (scale (/ alpha) vector))))

@ [[householder-reflection]] is an exported symbol.
<<Vector exports>>=
:householder-reflection
@

\subsection{Apply Vector Rotation}
\label{sec:apply-vector-rot}

The function [[apply-rotation]] applies a vector rotation constructed
from [[cc]] and [[ss]] to [[vector1]] and [[vector2]], expressed in
equation~\ref{eq:apply-rotation}. The rotation is returned in 2 new
vectors.
\begin{equation}
  \label{eq:apply-rotation}
  \begin{pmatrix}
    \mbox{result1}_i \\ \mbox{result2}_i
  \end{pmatrix}
  \leftarrow
  \begin{pmatrix}
    c & s \\ -\bar{s} & c
  \end{pmatrix}
  \cdot
  \begin{pmatrix}
    x_i \\ y_i
  \end{pmatrix}
\end{equation}
<<Generic function: Apply vector rotation>>=
(defgeneric apply-rotation (vector1 vector2 cc ss)
  (:documentation
   "Return the plane rotations of vector1 and vector2 by cc and ss."))

@ The destructive version, [[napply-rotation]], stores the result in
[[vector1]] and [[vector2]].
<<Generic function: Apply vector rotation>>=
(defgeneric napply-rotation (vector1 vector2 cc ss)
  (:documentation
   "Return the plane rotations of vector1 and vector2 by cc and ss."))

@ [[apply-rotation]] and [[napply-rotation]] are exported symbols.
<<Vector exports>>=
:apply-rotation :napply-rotation
@

\chapter{Matrices}
\label{chap:matrices}

In this chapter, the CLOS is used to define a linear algebra matrix
object that is the superclass for all linear algebra matrices. Then,
general, symmetric, Hermitian and triangular(upper and lower) matrices
are defined. In addition, objects are defined for the identity and
permutation matrices. Matrices are zero-indexed which is standard in
Common Lisp.
<<matrix.lisp>>=
<<In linear algebra package>>
<<Matrix superclass>>
<<Matrix interface operations>>
@ Definition of matrices depends on the definition of the linear
algebra package and fundamental operations.
<<Matrix dependencies>>=
(:file "matrix"
       :depends-on ("defpackage"
                    "fundamental-ops"))
@ All matrix objects are subclasses of the [[matrix-object]]
superclass.  No presumptions are made about the internal storage of
the matrix data, therefore, this superclass has not slots.
<<Matrix superclass>>=
;;; Matrix superclass
(defclass matrix-object ()
  ()
  (:documentation
   "A superclass for all matrices."))

@ The [[matrix-object]] superclass is an exported symbol.
<<Matrix exports>>=
:matrix-object
@ 

\note{The matrix object is an attractive place for 2 slots. The first
  slot is a boolean named [[IMMUTABLE]] and would allow the user to
  mark a matrix immutable. While not strictly being immutable, as this
  is not possible in CL, the immutable slot would restrict the
  interface to operations that don't modify the contents of the
  matrix. Hopefully, this would aid with adding concurrency to the
  operations. The second slot would be [[FLOAT-TYPE]] or some
  equivalent name with a class allocation. There would be an
  associated function [[SET-FLOAT-TYPE]] that would allow the user to
  set the floating point precision. This slot would serve 2 functions.
  First, it would set the floating point precision for all newly
  constructed matrices.  Second, if [[SET-FLOAT-TYPE]] was called with
  existing matrix instances, it would modify the contents of all
  existing instances to correspond to the specified floating point
  precision. This concept needs to be better developed and extended to
  vectors.}

\note{Two more types of matrices need to be defined, banded and sparse.}

\section{Matrix Interface Operations}
\label{sec:matrix-interface-operations}

The matrix interface is presented in this section. It is designed to
facilitate integrating new types of matrices into the linear algebra
package with minimal knowledge of the package internals.  The design
is modeled after the array interface and is intended to also be
consistent with the linear algebra vector interface.
<<Matrix interface operations>>=
;;; Matrix interface operations
<<Generic function: Initialize a matrix with data>>
<<Function: Make a new matrix>>
<<Function: Matrix predicate>>
<<Generic function: Matrix bounds predicate>>
<<Generic function: Matrix element type>>
<<Generic function: Matrix dimensions>>
<<Generic function: Matrix row dimension>>
<<Generic function: Matrix column dimension>>
<<Generic function: Matrix element reference>>
<<Generic function: Copy a matrix>>
<<Generic function: Subset of a matrix>>
<<Generic function: Destructively replace the subset of a matrix>>
<<Function: Validate a range of rows and columns>>
@ 
\begin{table}
  \centering
  \caption{Matrix interface operations.}
  \begin{tabular}{p{0.35\textwidth}p{0.6\textwidth}}
    \hline
    Operation & Description\\
    \hline
    [[make-matrix]]         & Create a new matrix.\\
    [[initialize-matrix]]   & Validate initial data and initialize the matrix.\\
    [[matrixp]]             & Test for a matrix object.\\
    [[matrix-in-bounds-p]]  & Verify the indices don't exceed matrix dimensions.\\
    [[matrix-element-type]] & Return the type of the vector elements.\\
    [[matrix-dimensions]]   & Return the dimension of the matrix.\\
    [[matrix-row-dimension]] & Return the number of rows in the matrix.\\
    [[matrix-column-dimension]] & Return the number of columns in the matrix.\\
    [[mref]]           & Reference a matrix element, settable.\\
    [[copy-matrix]]    & Perform a deep copy of the matrix.\\
    [[submatrix]]      & Return a submatrix of a matrix, settable. \\
    [[replace-matrix]] & Destructively replace elements of a matrix
                         with elements from another.\\
    \hline
  \end{tabular}
  \label{tab:matrix-interface}
\end{table}

\subsection{Creating Matrices}
\label{sec:creating-matrices}

A new matrix instance is created using the function [[make-matrix]].
The default behavior will return a general matrix with initial
elements of zero. Specifying the element type will result in the
matrix elements being initialized with zeroes of that type or restrict
the type of the initial element or contents. The initial contents can
be specified using a nested sequence or a two-dimensional array. The
shape of the intial contents must match the specified rows and
columns.
<<Function: Make a new matrix>>=
(defun make-matrix (rows columns &key
                    (matrix-type 'dense-matrix)
                    (element-type t)
                    (initial-element nil initial-element-p)
                    (initial-contents nil initial-contents-p))
  "Return a new matrix instance."
  (let ((new-matrix (make-instance matrix-type)))
    (cond
      ((and initial-element-p initial-contents-p)
       (error "Cannot specify both INITIAL-ELEMENT and INITIAL-CONTENTS."))
      (initial-contents-p
       (initialize-matrix
	new-matrix initial-contents rows columns element-type))
      (initial-element-p
       (initialize-matrix
	new-matrix initial-element rows columns element-type))
      (t
       (initialize-matrix
	new-matrix (coerce 0 element-type) rows columns element-type)))))

@ The [[make-matrix]] function relies on the generic function
[[initialize-matrix]] to initialize the instance of the matrix. This
enables the addition of new matrix types without modification to the
[[make-matrix]] function.  The [[initialize-matrix]] function should
be specialized on the type of the matrix and the data. Generally,
there are 4 types of data for a matrix: data in a nested sequence,
data in a 2D array, data in another matrix and an initial element.
<<Generic function: Initialize a matrix with data>>=
(defgeneric initialize-matrix (matrix data rows columns
			       &optional element-type)
  (:documentation
   "Initialize the matrix with data."))

@ [[make-matrix]] and [[initialize-matrix]] are exported symbols.
<<Matrix exports>>=
:make-matrix :initialize-matrix
@

\note{Initializing the default matrix with zeroes is not valid if the
  element type is [[RATIO]] or [[BIGNUM]].}

\note{Matrix construction is an open topic. The main issue is that the
  argument list may not map to banded or sparse matrices. If it is
  determined that there is not a way for [[make-matrix]] to map to
  banded or sparse matrices, the interface will be revised to be more
  abstract. There is also the possibility of creating a [[defmatrix]]
  macro that generates the interface for a new matrix definition. In
  either case, [[make-matrix]] in the future may more closely resemble
  [[MAKE-INSTANCE]].}

\subsection{Matrix Predicates}
\label{sec:matrix-predicates}

Two matrix predicates are defined. The function [[matrixp]] returns
true if the object is a matrix and false otherwise.
<<Function: Matrix predicate>>=
(defun matrixp (object)
  "Return true if object is a matrix, NIL otherwise."
  (typep object 'matrix-object))

@ Indices for a matrix are check against the dimensions with
[[matrix-in-bounds-p]]. It is a generic function that can be tailored
to the specific type of matrix. It returns true if the matrix
coordinates are valid, [[NIL]] otherwise.
<<Generic function: Matrix bounds predicate>>=
(defgeneric matrix-in-bounds-p (matrix row column)
  (:documentation
   "Return true if ROW and COLUMN do not exceed the dimensions of MATRIX."))

@ [[matrixp]] and [[matrix-in-bounds-p]] are exported symbols.
<<Matrix exports>>=
:matrixp :matrix-in-bounds-p
@

\subsection{Inspecting Matrices}
\label{sec:inspecting-matrices}

The specific type of the matrix element is returned by
[[matrix-element-type]].
<<Generic function: Matrix element type>>=
(defgeneric matrix-element-type (matrix)
  (:documentation
   "Return the element type of MATRIX."))

@ The size of the matrix is returned from [[matrix-dimensions]].
<<Generic function: Matrix dimensions>>=
(defgeneric matrix-dimensions (matrix)
  (:documentation
   "Return the number of rows and columns in MATRIX."))

@ The number of rows of a matrix is returned from
[[matrix-row-dimension]]
<<Generic function: Matrix row dimension>>=
(defgeneric matrix-row-dimension (matrix)
  (:documentation
   "Return the number of rows in MATRIX."))

@ and the number of columns of a matrix is returned from
[[matrix-column-dimension]].
<<Generic function: Matrix column dimension>>=
(defgeneric matrix-column-dimension (matrix)
  (:documentation
   "Return the number of columns in MATRIX."))

@ [[matrix-element-type]], [[matrix-dimensions]],
[[matrix-row-dimension]] and \\
[[matrix-column-dimension]] are exported symbols.
<<Matrix exports>>=
:matrix-element-type
:matrix-dimensions
:matrix-row-dimension
:matrix-column-dimension
@ 

\subsection{Referencing Matrices}
\label{sec:referencing-matrices}

Elements of a matrix are accessed using [[mref]].
<<Generic function: Matrix element reference>>=
(defgeneric mref (matrix row column)
  (:documentation
   "Return the matrix element at ROW,COLUMN."))

@ [[mref]] is settable for appropriate matrix subclasses.
<<Generic function: Matrix element reference>>=
(defgeneric (setf mref) (data matrix row column)
  (:documentation
   "Set the element at row,column of matrix to data."))

@ [[mref]] is an exported symbol.
<<Matrix exports>>=
:mref
@

\subsection{Copying Matrices}
\label{sec:copying-matrices}

A new instance of a matrix is obtained from [[copy-matrix]]. This
function performs a deep copy of the matrix argument.
<<Generic function: Copy a matrix>>=
(defgeneric copy-matrix (matrix)
  (:documentation
   "Return a copy of the matrix."))

@ [[copy-matrix]] is an exported symbol.
<<Matrix exports>>=
:copy-matrix
@ 

\subsection{Manipulating Subsets of Matrices}
\label{sec:matrix-subsets}

Subsets of matrices are operated on using [[submatrix]] and
[[replace-matrix]]. A new submatrix of a matrix is returned from
[[submatrix]].
<<Generic function: Subset of a matrix>>=
(defgeneric submatrix (matrix row column &key row-end column-end)
  (:documentation
   "Return a submatrix of the matrix."))

@ The submatrix may be settable.
<<Generic function: Subset of a matrix>>=
(defgeneric (setf submatrix) (submatrix matrix row column
                              &key row-end column-end)
  (:documentation
   "Set the submatrix of the matrix."))

@ A destructive function, [[replace-matrix]], analogous to the
sequence function [[REPLACE]], allows bulk replacement of all or a
subset of the elements of a matrix.
<<Generic function: Destructively replace the subset of a matrix>>=
(defgeneric replace-matrix (matrix1 matrix2 &key
			    row1 row1-end column1 column1-end
			    row2 row2-end column2 column2-end)
  (:documentation
   "Destructively replace elements of matrix1 with matrix2."))

@ [[submatrix]] and [[replace-matrix]] are exported symbols.
<<Matrix exports>>=
:submatrix :replace-matrix
@

\note{Instead of having 8 keyword arguments for [[replace-matrix]], it
  may be better to have the same 4 as the standard [[REPLACE]]
  function and pass 2 element sequences to each.}

\subsection{Matrix Validated Range}
\label{sec:matrix-validated-range}

The function [[matrix-validated-range]] validates a range of rows and
columns against the dimensions of the matrix.
<<Function: Validate a range of rows and columns>>=
(defun matrix-validated-range (matrix row column &optional row-end column-end)
  "Returns a validated range of rows and columns for the matrix."
  (destructuring-bind (row-dimension column-dimension)
      (matrix-dimensions matrix)
    (let ((row-end    (or row-end row-dimension))
	  (column-end (or column-end column-dimension)))
      (if (and (<= 0 row row-end row-dimension)
	       (<= 0 column column-end column-dimension))
	  (list row column row-end column-end)
	  (error "The matrix range (~D:~D,~D:~D) is invalid."
		 row column row-end column-end)))))

@ [[matrix-validated-range]] is an exported symbol.
<<Matrix exports>>=
:matrix-validated-range
@ 

\chapter{Identity and Permutation Matrices}
\label{chap:identity-and-permutation-matrices}

The identity and permutation matrices are defined in this chapter.
Both are direct subclasses of the [[matrix-object]] and have no
subclasses.

\section{Identity Matrix}
\label{sec:identity-mat}

The identity matrix is a square matrix with ones on the diagonal and
zeroes off diagonal.
<<identity-matrix.lisp>>=
<<In linear algebra package>>
<<Class: Identity matrix>>
<<Function: Identity matrix predicate>>
<<Method: Initialize the identity matrix>>
<<Method: Identity matrix bounds predicate>>
<<Method: Identity matrix element type>>
<<Method: Identity matrix dimensions>>
<<Method: Identity matrix element reference>>
<<Method: Copy an identity matrix>>
<<Method: Submatrix of an identity matrix>>
@ The identity matrix depends on the linear algebra package,
fundamental operations and the matrix interface.
<<Identity matrix dependencies>>=
(:file "identity-matrix"
       :depends-on ("defpackage"
                    "fundamental-ops"
                    "matrix"))
@ The requirements for the identity matrix object are that it store
the size of the matrix and the element type. Strictly, the only slot
required for the identity matrix is a size slot, but element type
information is useful. Consequently, the identity matrix object is
defined with 2 slots. The size of the matrix is recorded in the
[[size]] slot. To maintain the proper type of the zero and one values,
the [[contents]] slot is a 2 element vector with the first value equal
to zero and the second equal to one.
<<Class: Identity matrix>>=
(defclass identity-matrix (matrix-object)
  ((size
    :type    fixnum
    :initarg :size
    :reader  size
    :reader  matrix-row-dimension
    :reader  matrix-column-dimension)
   (contents
    :type    (array * (2))
    :initarg :contents
    :reader  contents))
  (:documentation
   "Identity matrix object."))

@ [[identity-matrix]] is an exported symbol.
<<Identity matrix exports>>=
:identity-matrix
@ 

\subsection{Initializing Identity Matrices}
\label{sec:initializing-identity-matrices}

Only one initial data method is defined for the identity matrix. It
does not make sense to initialize it with anything. For an identity
matrix, [[initial-data]] sets the size and element type of the matrix.
<<Method: Initialize the identity matrix>>=
(defmethod initialize-matrix ((matrix identity-matrix) (data number)
                              (rows integer) (columns integer)
                              &optional (element-type t))
  "Initialize the identity matrix.."
  (cond
    ((not (zerop data))
     (error "Initial data is invalid for an identity matrix."))
    ((not (= rows columns))
     (error "Rows and columns are not equal."))
    (t
     (setf (slot-value matrix 'size) rows)
     (setf (slot-value matrix 'contents)
           (make-array 2 :element-type element-type
                       :initial-contents
                       (list (coerce 0 element-type)
                             (coerce 1 element-type))))
     ;; Return the matrix
     matrix)))

@ [[initialize-matrix]] was exported with the definition of the
generic function.

\subsection{Identity Matrix Predicates}
\label{sec:identity-matrix-predicates}

[[identity-matrix-p]] returns true if the object is an identity matrix
and [[NIL]] otherwise.
<<Function: Identity matrix predicate>>=
(defun identity-matrix-p (object)
  "Return true if object is an identity-matrix."
  (typep object 'identity-matrix))

@ [[matrix-in-bounds-p]] compares the indices against the [[size]]
value.
<<Method: Identity matrix bounds predicate>>=
(defmethod matrix-in-bounds-p ((matrix identity-matrix)
			       (row integer) (column integer))
  "Return true if row and column do not exceed the dimensions of matrix."
  (and (<= 0 row)    (< row    (size matrix))
       (<= 0 column) (< column (size matrix))))

@ [[matrix-in-bounds-p]] was exported with the definition of the
generic function. [[identity-matrix-p]] is an exported symbol.
<<Identity matrix exports>>=
:identity-matrix-p
@ 

\subsection{Inspecting Identity Matrices}
\label{sec:inspecting-identity-matrices}

The identity matrix implementation of [[matrix-element-type]] is a
wrapper around [[array-element-type]].
<<Method: Identity matrix element type>>=
(defmethod matrix-element-type ((matrix identity-matrix))
  "Return the element type of the identity matrix."
  (array-element-type (contents matrix)))

@ The identity matrix implementation of [[matrix-dimensions]] returns
a 2 element list with both elements set to [[size]].
<<Method: Identity matrix dimensions>>=
(defmethod matrix-dimensions ((matrix identity-matrix))
  "Return the number of rows and columns in matrix."
  (list (size matrix) (size matrix)))

@ The specific row and column dimension functions,
[[matrix-row-dimension]] and [[matrix-column-dimension]] are defined
as readers for the [[size]] slot. All of these symbols were exported
with the definition of the generic functions.

\subsection{Referencing Identity Matrices}
\label{sec:referencing-identity-matrices}

Reference to an element of an identity matrix returns either one or
zero. One is returned if the element is on the diagonal and zero
otherwise.
<<Method: Identity matrix element reference>>=
(defmethod mref ((matrix identity-matrix)
		 (row integer) (column integer))
  "Return the element of the matrix at row,column."
  (if (= row column)
      (aref (contents matrix) 1)
      (aref (contents matrix) 0)))

@ An identity matrix is not settable. [[mref]] was exported with the
definition of the generic function.

\subsection{Copying Identity Matrices}
\label{sec:copying-identity-matrices}

A copy of an identity matrix is returned from [[copy-matrix]].
<<Method: Copy an identity matrix>>=
(defmethod copy-matrix ((matrix identity-matrix))
  "Return a copy of the matrix."
  (let ((element-type (matrix-element-type matrix)))
    (make-instance
     'identity-matrix
     :size (size matrix)
     :contents (make-array 2 :element-type element-type
			   :initial-contents
			   (list (coerce 0 element-type)
				 (coerce 1 element-type))))))

@ [[copy-matrix]] was exported with the definition of the generic
function.

\subsection{Manipulating Subsets of Identity Matrices}
\label{sec:identity-matrix-subsets}

The submatrix of an identity matrix is another identity matrix if the
start and end row equal the start and end column, respectively.  If
the start row and column are not equal, the submatrix is a square
matrix if the range is square and a dense matrix otherwise.
<<Method: Submatrix of an identity matrix>>=
(defmethod submatrix ((matrix identity-matrix)
                      (row integer) (column integer)
                      &key row-end column-end)
  "Return a matrix created from the submatrix of matrix."
  (destructuring-bind (row column row-end column-end)
      (matrix-validated-range matrix row column row-end column-end)
    (let ((numrows (- row-end row))
          (numcols (- column-end column))
          (element-type (matrix-element-type matrix)))
      (cond
        ;; On the diagonal
        ((and (= row column) (= numrows numcols))
         (make-instance
          'identity-matrix
          :size numrows
          :contents (make-array 2 :element-type element-type
                                :initial-contents
                                (list (coerce 0 element-type)
                                      (coerce 1 element-type)))))
        ;; Intersects the diagonal
        ((and (<= row column-end) (<= column row-end))
         (multiple-value-bind (r0 c0 size)
             (cond
               ((< row column)
                (values (- column row) 0 (min numcols (- row-end column))))
               ((< column row)
                (values 0 (- row column) (min numrows (- column-end row))))
               (t (values 0 0 (min numrows numcols))))
           (let ((one (coerce 1 element-type))
                 (contents (make-array (list numrows numcols)
                                       :element-type element-type
                                       :initial-element (coerce 0 element-type))))
             (make-instance
              (if (= numrows numcols) 'square-matrix 'dense-matrix)
              :contents
              (dotimes (i0 size contents)
                (setf (aref contents (+ r0 i0) (+ c0 i0)) one))))))
        ;; A zero matrix
        (t (make-instance
            (if (= numrows numcols) 'square-matrix 'dense-matrix)
            :contents (make-array (list numrows numcols)
                                  :element-type element-type
                                  :initial-element (coerce 0 element-type))))))))

@ The identity matrix is immutable, so no settable or destructive
methods are defined.

\section{Permutation Matrix}
\label{sec:permutation-mat}

The permutation matrix is a square matrix where there is a single
value of one in each row and column with the remaining elements equal
to zero.
<<permutation-matrix.lisp>>=
<<In linear algebra package>>
<<Class: Permutation matrix>>
<<Function: Permutation matrix predicate>>
<<Before method: Verify element type not specified and rows equal columns>>
<<Method: Initialize the permutation matrix along the diagonal>>
<<Function: Initialize the permutation matrix with a nested sequence>>
<<Method: Initialize the permutation matrix with a nested sequence>>
<<Method: Initialize the permutation matrix with a 2D array>>
<<Method: Permutation matrix bounds predicate>>
<<Method: Permutation matrix element type>>
<<Method: Permutation matrix dimensions>>
<<Method: Permutation matrix row dimension>>
<<Method: Permutation matrix column dimension>>
<<Method: Permutation matrix element reference>>
<<Method: Copy a permutation matrix>>
<<Method: Subset of a permutation matrix>>
<<Method: Permutation matrix transpose>>
@ The permutation matrix depends on the linear algebra package,
fundamental operations and the matrix interface.
<<Permutation matrix dependencies>>=
(:file "permutation-matrix"
       :depends-on ("defpackage"
                    "fundamental-ops"
                    "matrix"))
@ The [[contents]] slot is a vector equal in length to the size of the
matrix. The vector is populated with integer values where the index of
the value corresponds to row and the value corresponds to the column
index.
<<Class: Permutation matrix>>=
(defclass permutation-matrix (matrix-object)
  ((contents
    :type     (array fixnum (*))
    :initarg  :contents
    :accessor contents))
  (:documentation
   "Permutation matrix object."))

@ [[permutation-matrix]] is an exported symbol.
<<Permutation matrix exports>>=
:permutation-matrix
@

\subsection{Initializing Permutation Matrices}
\label{sec:initializing-permutation-matrices}

The [[contents]] of a permutation matrix is a first rank array with a
length equal to the size of the matrix. It is invalid to initialize
the permutation matrix with a value. There are 2 tests that apply to
all permutation matrix input data regardless of type. A permutation
matrix is a square matrix, so rows must equal columns. The element
type cannot be specified. Those tests are expressed in a before method
of [[initialize-matrix]] specialized on [[permutation-matrix]].
<<Before method: Verify element type not specified and rows equal columns>>=
(defmethod initialize-matrix :before ((matrix permutation-matrix) data
				      (rows integer) (columns integer)
				      &optional element-type)
  "Verify that the element-type was not set and that rows equals columns."
  (declare (ignore matrix data))
  (unless (eq t element-type)
    (error "Cannot specify the element type of a permutation matrix."))
  (unless (= rows columns)
    (error "Number of rows must equal the number of columns.")))

@ A default permutation matrix is populated with ones on the diagonal,
equivalent to an identity matrix.
<<Method: Initialize the permutation matrix along the diagonal>>=
(defmethod initialize-matrix ((matrix permutation-matrix) (data (eql 0))
                              (rows integer) (columns integer)
                              &optional element-type)
  (declare (ignore element-type))
  (loop with contents =
        (setf (contents matrix)
              (make-array rows :element-type 'fixnum))
        for index below rows do
        (setf (aref contents index) index)
        finally (return matrix)))

@ The permutation matrix can be initialized with a nested sequence. As
before, the method for nested sequences must be specialized on lists
and vectors separately. Both methods call an internal function to
initialize the permutation matrix.
<<Function: Initialize the permutation matrix with a nested sequence>>=
;;; FIXME : Use the LOOP.
(defun %initialize-permutation-matrix-with-seq (matrix data size)
  (if (= size (length data))
      (let ((contents (setf (contents matrix)
                            (make-array size :element-type 'fixnum))))
        ;; Fill contents, there should be no duplicates.
        (dotimes (i0 size)
          (if (= size (length (elt data i0)))
              (setf (aref contents i0)
                    (or (position 1 (elt data i0))
                        (error "Invalid permutation data.")))
              (error "Columns unequal in length.")))
        ;; FIXME : Find a better way to identify duplicates.
        ;; If duplicates, not a permutation matrix.
        (unless (= size (length (remove-duplicates contents)))
          (error "Invalid permutation in data."))
        ;; Return the matrix
        matrix)
      (error "Invalid number of rows of data.")))

@ First, define the initialization for data with a list as the first
rank data structure.
<<Method: Initialize the permutation matrix with a nested sequence>>=
(defmethod initialize-matrix ((matrix permutation-matrix) (data list)
                              (rows integer) (columns integer)
                              &optional element-type)
  "Initialize the permutation matrix with a list."
  (declare (ignore columns element-type))
  (%initialize-permutation-matrix-with-seq matrix data rows))

@ Next, define the initialization for data with a vector as the first
rank data structure.
<<Method: Initialize the permutation matrix with a nested sequence>>=
(defmethod initialize-matrix ((matrix permutation-matrix) (data vector)
                              (rows integer) (columns integer)
                              &optional element-type)
  "Initialize the permutation matrix with a list."
  (declare (ignore columns element-type))
  (%initialize-permutation-matrix-with-seq matrix data rows))

@ Finally, the permutation matrix can be initialized with a 2D array.
<<Method: Initialize the permutation matrix with a 2D array>>=
(defmethod initialize-matrix ((matrix permutation-matrix) (data array)
                              (rows fixnum) (columns fixnum)
                              &optional element-type)
  "Initialize the permutation matrix with a 2D array."
  (declare (ignore element-type))
  (cond
    ((not (= rows (array-dimension data 0)))
     (error "Invalid number of rows of data."))
    ((not (= columns (array-dimension data 1)))
     (error "Invalid number of columns of data."))
    (t
     (let ((row -1))
       (map-into
        (setf (contents matrix) (make-array rows))
        (lambda ()
          (incf row)
          (do ((column 0 (1+ column)))
              ((cond
                 ((>= column columns)
                  (error "Invalid permutation data."))
                 ((= 1 (aref data row column))))
               column))))
       ;; FIXME : Find a better way to identify duplicates.
       (unless (= rows (length (remove-duplicates (contents matrix))))
         (error "Invalid permutation in data."))
       ;; Return the permutation matrix
       matrix))))

@ [[initialize-matrix]] was exported with the definition of the
generic function.

\subsection{Permutation Matrix Predicates}
\label{sec:permutation-matrix-predicates}

The function [[identity-matrix-p]] returns true if the object is a
matrix and false otherwise.
<<Function: Permutation matrix predicate>>=
(defun permutation-matrix-p (object)
  "Return true if object is a permutation-matrix."
  (typep object 'permutation-matrix))

@ The permutation matrix implmementation of [[matrix-in-bounds-p]]
checks the bounds against the length of the contents vector.
<<Method: Permutation matrix bounds predicate>>=
(defmethod matrix-in-bounds-p ((matrix permutation-matrix)
			       (row integer) (column integer))
  "Return true if row and column do not exceed the dimensions of matrix."
  (let ((size (length (contents matrix))))
    (and (<= 0 row)    (< row    size)
	 (<= 0 column) (< column size))))

@ [[permutation-matrix-p]] is an exported symbol.
[[matrix-in-bounds-p]] was exported with the definition of the generic
function.
<<Permutation matrix exports>>=
:permutation-matrix-p
@

\subsection{Inspecting Permutation Matrices}
\label{sec:inspecting-permuation-matrices}

The permutation matrix implementation of [[matrix-element-type]]
always returns [[fixnum]].
<<Method: Permutation matrix element type>>=
(defmethod matrix-element-type ((matrix permutation-matrix))
  "Element type of the permutation matrix."
  'fixnum)

@ The permutation matrix implementation of [[matrix-dimensions]]
returns the length of the contents vector twice.
<<Method: Permutation matrix dimensions>>=
(defmethod matrix-dimensions ((matrix permutation-matrix))
  "Return the number of rows and columns in matrix."
  (let ((size (length (contents matrix))))
    (list size size)))

@ The permutation matrix implementation of [[matrix-row-dimensions]]
returns the length of the contents vector.
<<Method: Permutation matrix row dimension>>=
(defmethod matrix-row-dimension ((matrix permutation-matrix))
  "Return the number of rows in matrix."
  (length (contents matrix)))

@ [[matrix-column-dimension]] simply returns the length of the
contents vector as well.
<<Method: Permutation matrix column dimension>>=
(defmethod matrix-column-dimension ((matrix permutation-matrix))
  "Return the number of columns in matrix."
  (length (contents matrix)))

@ All of these symbols were exported with the definition of the
generic functions.

\subsection{Referencing Permutation Matrices}
\label{sec:referencing-permutation-matrices}

The elements of a permutation matrix are either 1 or zero. A 1 is
returned if the value stored in the contents matrix at [[row]] is
equal to [[column]], 0 otherwise.
<<Method: Permutation matrix element reference>>=
(defmethod mref ((matrix permutation-matrix)
                 (row integer) (column integer))
  "Return 1 if a permutation and 0 otherwise."
  (if (= column (aref (contents matrix) row)) 1 0))

@ The [[(setf mref)]] function is used to swap the rows of a
permutation matrix. The only valid data value is one.
<<Method: Permutation matrix element reference>>=
(defmethod (setf mref) ((data (eql 1)) (matrix permutation-matrix)
                        (row integer) (column integer))
  "Swap rows of the permutation matrix."
  (let* ((contents (contents matrix))
	 (swap (position column contents)))
    (psetf
     (aref contents swap) (aref contents row)
     (aref contents row)  column)))

@ [[mref]] was exported with the definition of the generic function.

\subsection{Copying Permutation Matrices}
\label{sec:copying-permutation-matrices}

A new permutation matrix that is a copy of the supplied permutation
matrix is returned from [[copy-matrix]].
<<Method: Copy a permutation matrix>>=
(defmethod copy-matrix ((matrix permutation-matrix))
  "Return a copy of the permutation matrix."
  (make-instance
   'permutation-matrix
   :contents (copy-seq (contents matrix))))

@ [[copy-matrix]] was exported with the definition of the generic
function.

\subsection{Manipulating Subsets of Permutation Matrices}
\label{sec:permutation-matrix-subsets}

The subset of a permutation matrix is either a dense matrix or a
square matrix.
<<Method: Subset of a permutation matrix>>=
(defmethod submatrix ((matrix permutation-matrix)
                      (row integer) (column integer)
                      &key row-end column-end)
  (destructuring-bind (row column row-end column-end)
      (matrix-validated-range matrix row column row-end column-end)
    (let* ((numrows (- row-end row))
           (numcols (- column-end column))
           (permute  (contents matrix))
           (contents (make-array (list numrows numcols)
                                 :element-type 'fixnum
                                 :initial-element 0)))
      (make-instance
       (if (= numrows numcols) 'square-matrix 'dense-matrix)
       :contents
       (do ((i0 0   (1+ i0))
            (i1 row (1+ i1)))
           ((>= i0 numrows) contents)
         (when (< (1- column) (aref permute i1) column-end)
           (setf (aref contents i0 (- (aref permute i1) column)) 1)))))))

@ Setting or replacing the subset of a permutation matrix is an
invalid operation and not defined. [[submatrix]] was exported with the
definition of the generic function.

\subsection{Permutation Matrix Transpose}
\label{sec:permutation-matrix-transpose}

The [[transpose]] function is the only fundamental operation
implemented for the permutation matrix.
<<Method: Permutation matrix transpose>>=
(defmethod transpose ((matrix permutation-matrix) &key conjugate)
  "Transpose the permutation matrix."
  (declare (ignore conjugate))
  (let ((contents (contents matrix)))
    (make-instance
     'permutation-matrix
     :contents
     (loop with permuted =
           (make-array (length contents) :element-type 'fixnum)
           for column across contents
           as  row = 0 then (1+ row)
           do (setf (aref permuted column) row)
           finally (return permuted)))))

@ The destructive version, [[ntranspose]], requires an initialization
function to count the number of rows to skip and determine the first
row to transpose.
<<Method: Permutation matrix transpose>>=
(defun %init-ntranspose (contents)
  "Count the number of rows to skip and the first row."
  (loop with row0 = nil
        for row below (length contents)
        as column = (aref contents row)
        if (= row column) count row into skip
        else do (unless row0 (setf row0 row))
        finally (return (values row0 skip))))

(defmethod ntranspose ((matrix permutation-matrix) &key conjugate)
  "Destructively transpose the permutation matrix."
  (declare (ignore conjugate))
  (multiple-value-bind (row0 skip)
      (%init-ntranspose (contents matrix))
    (loop with contents = (contents matrix)
          repeat (- (length contents) skip)
          for row = row0 then column
          and column = (aref contents row0) then nextrow
          as nextrow = (aref contents column)
          do (setf (aref contents column) row)
          finally (return matrix))))

@ [[transpose]] and [[ntranspose]] were exported with the definition
of the generic function.

\chapter{Data Vectors}
\label{chap:data-vectors}

The linear algebra vector objects for column and row vectors are
defined in this chapter as subclasses of a data vector. Fundamental
operations described in Chapter~\ref{chap:fundamental-operations} that
are applicable to vectors are implemented.
<<data-vector.lisp>>=
<<In linear algebra package>>
<<Data vector classes>>
<<Data vector interface operations>>
<<Data vector iteration operations>>
<<Data vector transformations>>
<<Data vector fundamental operations>>
@ Definition of data vectors depends on the linear algebra package,
auxiliary routines, fundamental operations and the vector interface.
<<Data vector dependencies>>=
(:file "data-vector"
       :depends-on ("defpackage"
                    "auxiliary"
                    "fundamental-ops"
                    "vector"
                    "permutation-matrix"))
@

\section{Data Vector Classes}
\label{sec:data-vector-classes}

The data vector class is a superclass for two other classes, a row
vector and a colum vector.
<<Data vector classes>>=
;;; Data vector classes
<<Class: Data vector>>
<<Class: Row vector>>
<<Class: Column vector>>
@ The internal structure of the column and row vector is identical, so
they are defined as subclasses of the [[data-vector]] which is a
subclass of the [[vector-object]]. Furthermore, for many operations,
the distinction between a column and row vector is not meaningful. In
those cases, the operations are specialized on [[data-vector]]. The
[[data-vector]] also hides differences between a [[simple-vector]]
with no element type information and a 1D [[simple-array]] that has
element type information.
<<Class: Data vector>>=
(defclass data-vector (vector-object)
  ((contents
    :type (array * (*))
    :initarg :contents
    :accessor contents))
  (:documentation
   "A data vector."))

@ In linear algebra operations, the distinction between a column and
row vector is significant. The standard Common Lisp vector does not
provide this distinction, so [[row-vector]] and [[column-vector]]
classes are defined.
<<Class: Row vector>>=
(defclass row-vector (data-vector)
  ()
  (:documentation
   "A row vector."))

@
<<Class: Column vector>>=
(defclass column-vector (data-vector)
  ()
  (:documentation
   "A column vector."))

@ [[data-vector]], [[row-vector]] and [[column-vector]] are exported
symbols.
<<Data vector exports>>=
:data-vector :row-vector :column-vector
@ 

\section{Data Vector Interface Operations}
\label{sec:data-vector-interface-operations}

The vector interface operations for data vectors are implemented in
this section. The operations are specialized on the [[data-vector]]
object when possible. Otherwise, they are specialized separately on
the [[row-vector]] and [[column-vector]] objects.
<<Data vector interface operations>>=
;;; Data vector interface operations
<<Method: Initialize the data vector with a number>>
<<Method: Initialize the data vector with a sequence>>
<<Function: Create a row vector>>
<<Function: Create a column vector>>
<<Function: Row vector predicate>>
<<Function: Column vector predicate>>
<<Method: Data vector bounds predicate>>
<<Method: Data vector element type>>
<<Method: Data vector length>>
<<Method: Data vector element reference>>
<<Method: Copy the data vector>>
<<Method: Subset of a data vector>>
<<Method: Destructively replace a data vector subset>>
@ 

\subsection{Initializing Data Vectors}
\label{sec:initializing-data-vectors}

Two initialization functions are defined for data vectors. The first
function initializes the vector with a number.
<<Method: Initialize the data vector with a number>>=
(defmethod initialize-vector ((vector data-vector) (data number)
                              (size integer) &optional
                              (element-type 'number))
  "Initialize a data vector with a value."
  (setf (contents vector)
        (make-array size
                    :element-type element-type
                    :initial-element data))
  ;; Return the data vector
  vector)

@ The second function initializes the vector with a sequence.
<<Method: Initialize the data vector with a sequence>>=
(defmethod initialize-vector ((vector data-vector) (data sequence)
                              (size integer) &optional
                              (element-type 'number))
  "Initialize a data vector with a sequence."
  (setf (contents vector)
        (make-array size
                    :element-type element-type
                    :initial-contents data))
  ;; Return the data vector
  vector)

@

Two convenience functions are defined for creating vectors.
[[row-vector]] accepts an arbitrary number of numeric arguments and
returns an instance of a row vector initialized with those arguments.
<<Function: Create a row vector>>=
(defun row-vector (&rest numbers)
  "Create a row vector from the numbers."
  (make-vector (length numbers)
	       :vector-type 'row-vector
	       :initial-contents numbers))

@ Similarly, [[column-vector]] accepts an arbitrary number of numeric
arguments and returns an instance of column vector initialized with
those arguments.
<<Function: Create a column vector>>=
(defun column-vector (&rest numbers)
  "Create a column vector from the numbers."
  (make-vector (length numbers)
	       :vector-type 'column-vector
	       :initial-contents numbers))

@ [[row-vector]] and [[column-vector]] were exported with the
definition of the column and row vector objects.

\subsection{Data Vector Predicates}
\label{sec:data-vector-predicates}

Three predicates specific to data vectors are defined.
[[column-vector-p]] accepts a single argument and returns true if is
is a [[column-vector]].
<<Function: Column vector predicate>>=
(defun column-vector-p (object)
  "Return true if object is a column-vector, NIL otherwise."
  (typep object 'column-vector))

@ Similarly, [[row-vector-p]] accepts a single argument and returns
true if it is a [[row-vector]].
<<Function: Row vector predicate>>=
(defun row-vector-p (object)
  "Return true if object is a row-vector, NIL otherwise."
  (typep object 'row-vector))

@ Finally, the implementation of [[vector-in-bounds-p]] is specialized
on the [[data-vector]] object. It wraps [[array-in-bounds-p]],
returning true if the index does not exceed the bounds of the vector.
<<Method: Data vector bounds predicate>>=
(defmethod vector-in-bounds-p ((vector data-vector) (index integer))
  "Return true if index does not exceed the dimensions of vector."
  (array-in-bounds-p (contents vector) index))

@ [[vector-in-bounds-p]] was exported with the definition of the
generic function. [[column-vector-p]] and [[row-vector-p]] are
exported symbols.
<<Data vector exports>>=
:column-vector-p :row-vector-p
@

\subsection{Inspecting Data Vectors}
\label{sec:inspecting-data-vectors}

The [[vector-element-type]] function specialized on the data vector is
a wrapper for [[array-element-type]].
<<Method: Data vector element type>>=
(defmethod vector-element-type ((vector data-vector))
  "Return the element type of vector."
  (array-element-type (contents vector)))

@ The length of a vector is obtained with [[vector-length]].
<<Method: Data vector length>>=
(defmethod vector-length ((vector data-vector))
  "Return the length of the vector."
  (length (contents vector)))

@ [[vector-element-type]] and [[vector-length]] were exported with the
definition of the generic functions.

\subsection{Referencing Data Vectors}
\label{sec:referencing-data-vectors}

The [[vref]] function specialized for data vectors is a wrapper for
[[aref]].
<<Method: Data vector element reference>>=
(defmethod vref ((vector data-vector) (index integer))
  "Return the element of vector at index."
  (aref (contents vector) index))

@ [[vref]] is settable.
<<Method: Data vector element reference>>=
(defmethod (setf vref) ((data number) (vector data-vector) (index integer))
  "Set the element of vector at index to data."
  (setf (aref (contents vector) index) data))

@ [[vref]] was exported with the definition of the generic function.

\subsection{Copying Data Vectors}
\label{sec:copying-data-vectors}

The [[copy-data]] function specialized for data vectors is essentially
a wrapper for [[COPY-SEQ]].
<<Method: Copy the data vector>>=
(defmethod copy-vector ((vector data-vector))
  "Return a copy of the vector."
  (make-instance
   (class-of vector)
   :contents (copy-seq (contents vector))))

@ [[copy-vector]] was exported with the definition of the generic
function.

\subsection{Manipulating Subsets of Data Vectors}
\label{sec:data-vector-subsets}

Functions for manipulating subsets of vectors are specialized on
[[data-vector]]. The [[subvector]] of a data vector is essentially a
wrapper for [[subseq]].
<<Method: Subset of a data vector>>=
(defmethod subvector ((vector data-vector) start &optional end)
  "Return a new data vector that is a subset of vector."
  (make-instance
   (class-of vector)
   :contents (subseq (contents vector) start end)))

@ The [[subvector]] of a data vector is settable.
<<Method: Subset of a data vector>>=
(defmethod (setf subvector) ((subvector data-vector)
			     (vector data-vector)
			     start &optional end)
  "Set the subvector of the data vector."
  (setf (subseq (contents vector) start end)
        (contents subvector))
  ;; Return the subvector
  subvector)

@ Similarly, [[replace-vector]] specialized on a data vector is
essentially a wrapper for [[REPLACE]].
<<Method: Destructively replace a data vector subset>>=
(defmethod replace-vector ((vector1 data-vector) (vector2 data-vector)
			   &key (start1 0) end1 (start2 0) end2)
  "Destructively replace the elements of vector1 with vector2."
  (replace (contents vector1) (contents vector2)
           :start1 start1 :end1 end1 :start2 start2 :end2 end2)
  ;; Return vector1
  vector1)

@ [[subvector]] and [[replace-vector]] were exported with the
definition of the generic functions.

\note{In [[(setf subvector)]] and [[replace-vector]], it may be
  correct to constrain both arguments to the same type, either both
  [[column-vector]] or [[row-vector]]. Conversely, it may be useful to
  be able to specify the subvector using a sequence.}

\section{Data Vector Mapping Functions}
\label{sec:data-vector-mapping}

Implementation of the vector mapping functions for data vectors are
specialized on [[data-vector]].
<<Data vector iteration operations>>=
;;; Data vector iteration operations
<<Function: Map over the data vector>>
<<Method: Map over the data vector>>
<<Function: Map into the data vector>>
<<Method: Map into the data vector>>
@ To avoid redundant verification of the arguments, an internal
version, [[%map-data-vector]], is implemented with the essential
logic.
<<Function: Map over the data vector>>=
(defun %map-data-vector (result-type function first-vector
                         &rest more-vectors)
  "Non-validating version of map-vector."
  (make-instance result-type
		 :contents
		 (apply #'map
			(class-of (contents first-vector))
			function
			(contents first-vector)
			(mapcar #'contents more-vectors))))

@ For external use in [[map-vector]], the internal version is wrapped
by tests to validate the arguments.
<<Method: Map over the data vector>>=
(defmethod map-vector :before (result-type (function function)
                               (first-vector data-vector)
                               &rest more-vectors)
  "Verify the arguments to map-vector."
  (declare (ignore function))
  (unless (subtypep result-type 'data-vector)
    (error "~A is not a subtype of DATA-VECTOR." result-type))
  (unless (every (lambda (x) (typep x 'data-vector)) more-vectors)
    (error "All vectors must be data vectors.")))

(defmethod map-vector (result-type (function function)
                       (first-vector data-vector)
                       &rest more-vectors)
  "Calls function on successive sets of data vectors."
  (apply #'%map-data-vector
         result-type
         function
         first-vector
         more-vectors))

@ Similarly, the destructive mapping function is organized into an
internal version, [[%map-into-data-vector]],
<<Function: Map into the data vector>>=
(defun %map-into-data-vector (result-vector function &rest vectors)
  "Non-validating version of map-into-vector."
  (apply #'map-into
         (contents result-vector)
         function
         (mapcar #'contents vectors))
  ;; Return the result vector
  result-vector)

@ and an external version, [[map-into-vector]], that validates the
arguments.
<<Method: Map into the data vector>>=
(defmethod map-into-vector :before ((result-vector data-vector)
                                    (function function) &rest vectors)
  "Verify the arguments to map-into-vector."
  (declare (ignore result-vector function))
  (unless (every (lambda (x) (typep x 'data-vector)) vectors)
    (error "All vectors must be data vectors.")))

(defmethod map-into-vector ((result-vector data-vector)
                            (function function) &rest vectors)
  "Destructively modifies the result vector with the result of
applying the function to each element of the vectors."
  (apply #'%map-into-data-vector
         result-vector
         function
         vectors))

@ [[map-vector]] and [[map-into-vector]] were exported with the
definition of the generic functions.

\section{Data Vector Transformations}
\label{sec:data-vector-transformations}

The three vector transformations are defined as functions. Therefore,
the only operation that needs to be specialized on the data vector is
the application of the rotation.
<<Data vector transformations>>=
;;; Data vector transformations
<<Method: Apply rotation to the data vectors>>
<<Method: Destructively apply rotation to the data vectors>>
@ [[apply-rotation]] returns 2 new vectors that are the rotations of
[[vector1]] and [[vector2]].
<<Method: Apply rotation to the data vectors>>=
(defmethod apply-rotation :before ((vector1 data-vector) (vector2 data-vector) cc ss)
  "Verify the input to apply-rotation."
  (declare (ignore cc ss))
  (unless (= (vector-length vector1) (vector-length vector2))
    (error "VECTOR1 and VECTOR2 are not of equal length.")))

(defmethod apply-rotation ((vector1 data-vector) (vector2 data-vector) cc ss)
  "Return the plane rotations of vector1 and vector2 by cc and ss."
  (let ((rvec1 (make-vector (vector-length vector1)
                            :vector-type (class-of vector1)
                            :element-type (vector-element-type vector1)))
        (rvec2 (make-vector (vector-length vector2)
                            :vector-type (class-of vector2)
                            :element-type (vector-element-type vector2))))
    (dotimes (pos (vector-length vector1) (values rvec1 rvec2))
      (setf (vref rvec1 pos)
            (+ (* cc (vref vector1 pos))
               (* ss (vref vector2 pos))))
      (setf (vref rvec2 pos)
            (+ (* -1 (conjugate ss) (vref vector1 pos))
               (* cc (vref vector2 pos)))))))

@ The destructive version, [[napply-rotation]], stores the result in
[[vector1]] and [[vector2]].
<<Method: Destructively apply rotation to the data vectors>>=
(defmethod napply-rotation :before ((vector1 data-vector) (vector2 data-vector) cc ss)
  "Verify the input to napply-rotation."
  (declare (ignore cc ss))
  (unless (= (vector-length vector1) (vector-length vector2))
    (error "VECTOR1 and VECTOR2 are not of equal length.")))

(defmethod napply-rotation ((vector1 data-vector) (vector2 data-vector) cc ss)
  "Return the plane rotations of vector1 and vector2 by cc and ss."
  (dotimes (pos (vector-length vector1) (values vector1 vector2))
    (psetf (vref vector1 pos)
           (+ (* cc (vref vector1 pos))
              (* ss (vref vector2 pos)))
           (vref vector2 pos)
           (+ (* -1 (conjugate ss) (vref vector1 pos))
              (* cc (vref vector2 pos))))))

@ [[apply-rotation]] and [[napply-rotation]] were exported with the
definition of the generic functions.

\section{Data Vector Fundamental Operations}
\label{sec:data-vector-fundamental-operations}

All fundamental operations are specialized for the data vector class.
<<Data vector fundamental operations>>=
;;; Data vector fundamental operations
<<Method: Scaled sum of squares of the data vector>>
<<Method: Scaled sum of powers of p of the data vector>>
<<Function: Data vector Taxicab norm>>
<<Function: Data vector Euclidean norm>>
<<Function: Data vector P norm>>
<<Function: Data vector Infinity norm>>
<<Method: Data vector norm>>
<<Method: Data vector transpose>>
<<Method: Data vector permutation>>
<<Method: Scale the data vector>>
<<Method: Data vector binary addition>>
<<Method: Data vector binary subtraction>>
<<Method: Data vector dot product>>
@ 

\subsection{Scaled Sums of Data Vectors}
\label{sec:scaled-data-vector-sums}

[[sumsq]] is specialized on the [[data-vector]] object.
<<Method: Scaled sum of squares of the data vector>>=
(defmethod sumsq ((vector data-vector) &key (scale 0) (sumsq 1))
  "Return the scaling parameter and the sum of the squares of vector."
  (let ((abs-val nil))
    (dovector (elm vector (values scale sumsq))
      (when (< 0 (setf abs-val (abs elm)))
        (if (< scale abs-val)
            (setf sumsq (1+ (* sumsq (expt (/ scale abs-val) 2)))
                  scale abs-val)
            (setf sumsq (+ sumsq (expt (/ elm scale) 2))))))))

@ Similarly, [[sump]] is specialized on the [[data-vector]] object.
<<Method: Scaled sum of powers of p of the data vector>>=
(defmethod sump ((vector data-vector) (p number) &key (scale 0) (sump 1))
  "Return the scaling parameter and the sum of the P powers of vector."
  (let ((abs-val nil))
    (dovector (elm vector (values scale sump))
      (when (< 0 (setf abs-val (abs elm)))
        (if (< scale abs-val)
            (setf sump (1+ (* sump (expt (/ scale abs-val) p)))
                  scale abs-val)
            (setf sump (+ sump (expt (/ elm scale) p))))))))

@ [[sumsq]] and [[sump]] were exported with the definition of the
generic functions.

\subsection{Data Vector Norm}
\label{sec:data-vector-norm}

The vector norm returns the measure of the vector, specified by the
[[measure]] keyword. [[measure]] defaults to a value of 1, also known as
the Taxicab norm.

The [[norm]] function is a wrapper function that calls the appropriate
function for the value of [[measure]]. Three measures are specifically
implemented for vectors, the Taxicab norm([[measure]]$=1$), the
Euclidean norm([[measure]]$=2$) and the Infinity
norm([[measure]]$=\infty$). All other values of [[measure]] are
handled by a single function.
<<Method: Data vector norm>>=
(defmethod norm ((vector data-vector) &key (measure 1))
  "Return the p-norm of the vector."
  (case measure
    (1         (%data-vector-1-norm vector))
    (2         (%data-vector-2-norm vector))
    (:infinity (%data-vector-infinity-norm vector))
    (otherwise
     (if (and (numberp measure) (> measure 2))
         (%data-vector-p-norm vector measure)
         (error "Unrecognized norm, ~A." measure)))))

@ The vector specific [[norm]] function calls one of four functions
based on the value of [[measure]]. The four functions are the
[[%data-vector-1-norm]], [[%data-vector-2-norm]],
[[%data-vector-p-norm]] and [[%data-vector-infinity-norm]] routines.
The [[%data-vector-1-norm]] is called the ``Taxicab norm'' of a vector. It
is the sum of the absolute values of the vector.
<<Function: Data vector Taxicab norm>>=
(defun %data-vector-1-norm (vector)
  "Return the Taxicab norm of the data vector."
  (loop for element across (contents vector)
        sum (abs element)))

@ The [[%data-vector-2-norm]] is called the ``Euclidean norm'' of a
vector. It is the square root of the sum of the squares of the vector.
<<Function: Data vector Euclidean norm>>=
(defun %data-vector-2-norm (vector)
  "Return the Euclidean norm of the vector."
  (multiple-value-bind (scale sumsq)
      (sumsq (%map-data-vector 'column-vector #'abs vector))
    (* scale (sqrt sumsq))))

@ The [[%data-vector-p-norm]] is the general form of the vector norm.
It is the $P_{th}$ root of the sum of the $P$ powers of the vector.
<<Function: Data vector P norm>>=
(defun %data-vector-p-norm (vector p)
  "Return the p-norm of the vector."
  (multiple-value-bind (scale sump)
      (sump (%map-data-vector 'column-vector #'abs vector) p)
    (* scale (expt sump (/ p)))))

@ Lastly, the [[%data-vector-infinity-norm]] is the maximum absolute
value of the vector.
<<Function: Data vector Infinity norm>>=
(defun %data-vector-infinity-norm (vector)
  "Return the infinity, or maximum, norm of vector."
  (loop for element across (contents vector)
        maximize (abs element)))

@ None of the specific norm functions are exported symbols.

\subsection{Data Vector Transpose}
\label{sec:vector-transpose}

The [[transpose]] function is implemented separately for the
[[column-vector]] and [[row-vector]]. The function simply returns the
converse type of the argument, copying the contents. When set to true,
the optional [[conjugate]] variable returns the Hermitian transpose of
complex valued vectors and has no effect on real valued vectors.
<<Method: Data vector transpose>>=
(defmethod transpose ((vector column-vector) &key conjugate)
  "Return a row vector."
  (%map-data-vector 'row-vector
	            (if conjugate #'conjugate #'identity)
	            vector))

(defmethod transpose ((vector row-vector) &key conjugate)
  "Return a column vector."
  (%map-data-vector 'column-vector
	            (if conjugate #'conjugate #'identity)
	            vector))

@ The destructive vector transpose is performed using
[[CHANGE-CLASS]].
<<Method: Data vector transpose>>=
(defmethod ntranspose ((vector column-vector) &key conjugate)
  "Return a row vector destructively."
  (if conjugate
      (%map-into-data-vector
       (change-class vector 'row-vector) #'conjugate vector)
      (change-class vector 'row-vector)))

(defmethod ntranspose ((vector row-vector) &key conjugate)
  "Return a column vector destructively."
  (if conjugate
      (%map-into-data-vector
       (change-class vector 'column-vector) #'conjugate vector)
      (change-class vector 'column-vector)))

@ [[transpose]] and [[ntranspose]] were exported with the definition
of the generic function.

\subsection{Vector Permutation}
\label{sec:vector-permutation}

Data vector permutation, [[permute]], is implemented separately for
the [[column-vector]] and [[row-vector]]. Permutation of a row vector
is performed by pre-multiplying the permutation matrix with the row
vector.
<<Method: Data vector permutation>>=
(defmethod permute :before ((vector row-vector) (matrix permutation-matrix))
  "Verify that the dimensions are compatible."
  (unless (= (vector-length vector) (matrix-row-dimension matrix))
    (error "Vector and permutation matrix sizes incompatible.")))

(defmethod permute ((vector row-vector) (matrix permutation-matrix))
  "Return the permutation of the row vector."
  (make-instance
   'row-vector
   :contents
   (loop with permuted =
         (make-array (vector-length vector)
                     :element-type (vector-element-type vector))
         for column across (contents matrix)
         and row = 0 then (1+ row)
         do (setf (aref permuted column) (vref vector row))
         finally (return permuted))))

@ Permutation of a column vector is performed by multiplying the
column vector with the permutation matrix.
<<Method: Data vector permutation>>=
(defmethod permute :before ((matrix permutation-matrix) (vector column-vector))
  "Verify that the dimensions are compatible."
  (unless (= (vector-length vector) (matrix-column-dimension matrix))
    (error "Vector and permutation matrix sizes incompatible.")))

(defmethod permute ((matrix permutation-matrix) (vector column-vector))
  "Return the permutation of the column vector."
  (make-instance
   'row-vector
   :contents
   (loop with permuted =
         (make-array (vector-length vector)
                     :element-type (vector-element-type vector))
         for column across (contents matrix)
         and row = 0 then (1+ row)
         do (setf (aref permuted row) (vref vector column))
         finally (return permuted))))

@

Similarly, destructive data vector permutation is implemented
separately for the [[column-vector]] and [[row-vector]]. Destructive
permutation of a [[row-vector]] requires 2 temporary values to store
the next value to swap and the next column for the swap.
<<Method: Data vector permutation>>=
(defmethod npermute :before ((vector row-vector) (matrix permutation-matrix))
  "Verify that the dimensions are compatible."
  (unless (= (vector-length vector) (matrix-row-dimension matrix))
    (error "Vector and permutation matrix sizes incompatible.")))

(defmethod npermute ((vector row-vector) (matrix permutation-matrix))
  "Destructively permute the row vector."
  (multiple-value-bind (row0 skip)
      (%init-ntranspose (contents matrix))
    (loop with mat = (contents matrix)
          with vec = (contents vector)
          repeat (- (length mat) skip)
          for column-swap = (aref mat row0) then column-next
          and value-swap  = (aref vec row0) then value-next
          as column-next = (aref mat column-swap)
          as value-next  = (aref vec column-swap)
          do (setf (aref vec column-swap) value-swap)
          finally (return vector))))

@ The destructive permutation of a [[column-vector]] is simply
implemented using [[ROTATEF]].
<<Method: Data vector permutation>>=
(defmethod npermute :before ((matrix permutation-matrix) (vector column-vector))
  "Verify that the dimensions are compatible."
  (unless (= (vector-length vector) (matrix-column-dimension matrix))
    (error "Vector and permutation matrix sizes incompatible.")))

(defmethod npermute ((matrix permutation-matrix) (vector column-vector))
  "Destructively permute the column vector."
  (multiple-value-bind (row0 skip)
      (%init-ntranspose (contents matrix))
    (loop with mat = (contents matrix)
          with vec = (contents vector)
          repeat (- (length mat) skip 1)
          for row = row0 then column
          as column = (aref mat row)
          do (rotatef (aref vec row) (aref vec column))
          finally (return vector))))

@

\note{Use of [[ROTATEF]] in the destructive permutation of a
  [[column-vector]] needs to be reviewed to evaluate how much consing
  it generates.}

\subsection{Vector Scale}
\label{sec:vector-scale}

Scale the elements of the vector argument by the scalar argument. A
new vector is returned using the [[scale]] function.
<<Method: Scale the data vector>>=
(defmethod scale ((scalar number) (vector data-vector))
  "Return the vector scaled by scalar."
  (%map-data-vector (class-of vector)
	            (lambda (x) (* scalar x))
	            vector))

@ The vector argument is destructively modified using the [[nscale]]
function.
<<Method: Scale the data vector>>=
(defmethod nscale ((scalar number) (vector data-vector))
  "Return the vector destructively scaled by scalar."
  (%map-into-data-vector vector
		         (lambda (x) (* scalar x))
		         vector))

@ [[scale]] and [[nscale]] were exported with the generic functions.

\subsection{Vector Addition}
\label{sec:vector-addition}

[[add]] returns a new vector of the sum of [[vector1]] and [[vector2]].
<<Method: Data vector binary addition>>=
(defmethod add :before ((vector1 data-vector) (vector2 data-vector)
                        &key scalar1 scalar2)
  "Verify that the dimensions are equal."
  (declare (ignore scalar1 scalar2))
  (unless (= (vector-length vector1) (vector-length vector2))
    (error "VECTOR1 and VECTOR2 are not of equal length.")))

(defmethod add ((vector1 column-vector) (vector2 column-vector)
                &key scalar1 scalar2)
  "Return the addition of scalar1*vector1 with scalar2*vector2."
  (%map-data-vector (common-class-of vector1 vector2 'column-vector)
                    (scaled-binary-op #'+ scalar1 scalar2)
                    vector1 vector2))

(defmethod add ((vector1 row-vector) (vector2 row-vector)
                &key scalar1 scalar2)
  "Return the addition of scalar1*vector1 with scalar2*vector2."
  (%map-data-vector (common-class-of vector1 vector2 'row-vector)
                    (scaled-binary-op #'+ scalar1 scalar2)
                    vector1 vector2))

@ The destructive version, [[nadd]], returns the result in the first
argument.
<<Method: Data vector binary addition>>=
(defmethod nadd :before ((vector1 data-vector) (vector2 data-vector)
                         &key scalar1 scalar2)
  "Verify that the dimensions are equal."
  (declare (ignore scalar1 scalar2))
  (unless (= (vector-length vector1) (vector-length vector2))
    (error "VECTOR1 and VECTOR2 are not of equal length in NADD-SCALED.")))

(defmethod nadd ((vector1 column-vector) (vector2 column-vector)
                 &key scalar1 scalar2)
  "Return the addition of scalar2*vector2 to scalar1*vector1."
  (%map-into-data-vector vector1
                         (scaled-binary-op #'+ scalar1 scalar2)
                         vector1 vector2))

(defmethod nadd ((vector1 row-vector) (vector2 row-vector)
                 &key scalar1 scalar2)
  "Return the addition of scalar2*vector2 to scalar1*vector1."
  (%map-into-data-vector vector1
                         (scaled-binary-op #'+ scalar1 scalar2)
                         vector1 vector2))

@ [[add]] and [[nadd]] are exported with the definition of the generic
function.

\subsection{Vector Subtraction}
\label{sec:vector-subtraction}

[[subtract]] returns a new vector that is [[vector2]] subtracted from
[[vector1]].
<<Method: Data vector binary subtraction>>=
(defmethod subtract :before ((vector1 data-vector) (vector2 data-vector)
                             &key scalar1 scalar2)
  "Verify that the dimensions are equal."
  (declare (ignore scalar1 scalar2))
  (unless (= (vector-length vector1) (vector-length vector2))
    (error "VECTOR1 and VECTOR2 are not of equal length.")))

(defmethod subtract ((vector1 column-vector) (vector2 column-vector)
                     &key scalar1 scalar2)
  "Return the subraction of scalar2*vector2 from scalar1*vector1."
  (%map-data-vector (common-class-of vector1 vector2 'column-vector)
                    (scaled-binary-op #'- scalar1 scalar2)
                    vector1 vector2))

(defmethod subtract ((vector1 row-vector) (vector2 row-vector)
                     &key scalar1 scalar2)
  "Return the subraction of scalar2*vector2 from scalar1*vector1."
  (%map-data-vector (common-class-of vector1 vector2 'row-vector)
                    (scaled-binary-op #'- scalar1 scalar2)
                    vector1 vector2))

@ The destructive version, [[nsubtract]], returns the result in the
first argument.
<<Method: Data vector binary subtraction>>=
(defmethod nsubtract :before ((vector1 data-vector) (vector2 data-vector)
                              &key scalar1 scalar2)
  "Verify that the dimensions are equal."
  (declare (ignore scalar1 scalar2))
  (unless (= (vector-length vector1) (vector-length vector2))
    (error "VECTOR1 and VECTOR2 are not of equal length.")))

(defmethod nsubtract ((vector1 column-vector) (vector2 column-vector)
                      &key scalar1 scalar2)
  "Return the subraction of scalar2*vector2 from scalar1*vector1."
  (%map-into-data-vector vector1
                         (scaled-binary-op #'- scalar1 scalar2)
                         vector1 vector2))

(defmethod nsubtract ((vector1 row-vector) (vector2 row-vector)
                      &key scalar1 scalar2)
  "Return the subraction of scalar2*vector2 from scalar1*vector1."
  (%map-into-data-vector vector1
                         (scaled-binary-op #'- scalar1 scalar2)
                         vector1 vector2))

@ [[subtract]] and [[nsubtract]] are exported with the definitions of
the generic functions.

\subsection{Data Vector Dot Product}
\label{sec:data-vector-dot-product}

The dot product of data vectors necessitates a [[row-vector]] for the
first argument and a [[column-vector]] for the second.
<<Method: Data vector dot product>>=
(defmethod product :before ((vector1 row-vector) (vector2 column-vector)
                            &key scalar conjugate)
  "Verify that the dimensions are equal."
  (declare (ignore scalar conjugate))
  (unless (= (vector-length vector1) (vector-length vector2))
    (error "VECTOR1 and VECTOR2 are not of equal length.")))

(defmethod product ((vector1 row-vector) (vector2 column-vector)
                    &key (scalar nil scalarp) conjugate)
  "Return the dot product of vector1 and vector2."
  (loop with op = (if conjugate
                      (lambda (x y) (* (conjugate x) y))
                      #'*)
        for element1 across (contents vector1)
        and element2 across (contents vector2)
        sum (funcall op element1 element2) into result
        finally
        (return (if scalarp (* scalar result) result))))

@ [[product]] was exported with the definition of the generic function.

\note{Application of the conjugate should be restricted to complex
  valued vectors. The only issue with applying it to real valued
  vectors is that it is computationally inefficient. Benchmarking
  should determine whether or not this is a legitimate concern.}

\chapter{Dense Matrices}
\label{chap:dense-matrices}

A matrix is concise way to express a linear system. It organizes the
coefficients of the system into rows and columns. There is no
requirement that the number of rows equals the number of columns. When
the number of rows is less than the number of columns, the system is
under determined. When the number of rows exceeds the number of
columns, the system is over determined. The purpose of the dense
matrix object is to represent any matrix.
<<dense-matrix.lisp>>=
<<In linear algebra package>>
<<Class: Dense matrix>>
<<Dense matrix interface operations>>
<<Dense matrix fundamental operations>>
@ The dense matrix depends on the linear algebra package, fundamental
operations, the matrix interface and data vectors.
<<Dense matrix dependencies>>=
(:file "dense-matrix"
       :depends-on ("defpackage"
                    "fundamental-ops"
                    "matrix"
                    "data-vector"))
@ The dense matrix is a direct subclass of [[matrix-object]]. It has a
single slot, [[contents]], a rank 2 array where the matrix data is
stored. This should be an appropriate data type for storage of most
types of matrices, but can be overridden if another type of storage is
more appropriate.
<<Class: Dense matrix>>=
(defclass dense-matrix (matrix-object)
  ((contents
    :type     (array * (* *))
    :initarg  :contents
    :accessor contents))
  (:documentation
   "Dense matrix object."))

@ [[dense-matrix]] is an exported symbol.
<<Dense matrix exports>>=
:dense-matrix
@ 

\section{Dense Matrix Interface Operations}
\label{sec:dense-matrix-interface-operations}

The matrix interface operations for dense matrices are implemented in
this section. All operations are specialized on the [[dense-matrix]]
object.
<<Dense matrix interface operations>>=
;;; Dense matrix interface operations
<<Function: Dense matrix predicate>>
<<Method: Initialize the dense matrix with a value>>
<<Method: Initialize the dense matrix with a nested sequence>>
<<Before method: Verify the array data dimensions>>
<<Method: Initialize the dense matrix with a 2D array>>
<<Method: Dense matrix bounds predicate>>
<<Method: Dense matrix dimensions>>
<<Method: Dense matrix row dimension>>
<<Method: Dense matrix column dimension>>
<<Method: Dense matrix element type>>
<<Method: Dense matrix element reference>>
<<Method: Copy a dense matrix>>
<<Method: Subset of a dense matrix>>
<<Method: Destructively replace a subset of a dense matrix>>
@ 

\subsection{Initializing Dense Matrices}
\label{sec:initializing-dense-matrices}

The contents of a dense matrix is a second rank array with
dimensions of [[rows]] by [[columns]]. When an [[initial-element]] is
supplied to [[make-matrix]], it is simply passed to the construction
of the contents array. Otherwise, if no [[initial-contents]] are
supplied, a zero coerced to [[element-type]] is supplied as the
[[initial-element]].
<<Method: Initialize the dense matrix with a value>>=
(defmethod initialize-matrix ((matrix dense-matrix) (data number)
			      (rows integer) (columns integer)
			      &optional (element-type t))
  "Initialize the dense matrix with an initial element."
  (setf (contents matrix)
        (make-array (list rows columns)
                    :element-type element-type
                    :initial-element data))
  ;; Return the matrix
  matrix)

@ When a nested sequence is supplied as the [[initial-contents]], it
is simply passed to the construction of the contents array. The method
must be specialized on both [[LIST]] and [[VECTOR]] instead of
[[SEQUENCE]] because the system class [[VECTOR]] is a subclass of
[[ARRAY]] which is a subclass of [[SEQUENCE]].
<<Method: Initialize the dense matrix with a nested sequence>>=
(defmethod initialize-matrix ((matrix dense-matrix) (data list)
			      (rows integer) (columns integer)
			      &optional (element-type t))
  "Initialize the dense matrix with a nested sequence."
  (setf (contents matrix)
	(make-array (list rows columns)
		    :element-type element-type
		    :initial-contents data))
  ;; Return the matrix
  matrix)

(defmethod initialize-matrix ((matrix dense-matrix) (data vector)
			      (rows integer) (columns integer)
			      &optional (element-type t))
  "Initialize the dense matrix with a nested sequence."
  (setf (contents matrix)
	(make-array (list rows columns)
		    :element-type element-type
		    :initial-contents data))
  ;; Return the matrix
  matrix)

@ For initial contents specified by a 2D array, a before method is
required because the [[MAKE-ARRAY]] function is not used to initialize
the contents. The before method verifies that the dimensions of the
data array are compatible with the matrix. Each element of the data
array is also verified to be a subtype of [[element-type]].
<<Before method: Verify the array data dimensions>>=
(defmethod initialize-matrix :before ((matrix dense-matrix) (data array)
                                      (rows integer) (columns integer)
                                      &optional (element-type t))
  "Verify that the size of the data is valid."
  (when (vectorp data) (return-from initialize-matrix))
  (unless (= 2 (array-rank data))
    (error "Rank of array data is invalid."))
  (unless (= rows (array-dimension data 0))
    (error "Invalid number of rows of data."))
  (unless (= columns (array-dimension data 1))
    (error "Invalid number of columns of data."))
  (unless (subtypep (array-element-type data)
                    (upgraded-array-element-type element-type))
    (error "Data type, ~A, is not of type ~A."
           (array-element-type data) element-type)))

@ When a 2D array is supplied as the [[initial-contents]], the
contents slot of the dense matrix is set to a new, uninitialized,
array. Then, each element of the data array is copied to the new
contents array.
<<Method: Initialize the dense matrix with a 2D array>>=
(defmethod initialize-matrix ((matrix dense-matrix) (data array)
			      (rows integer) (columns integer)
			      &optional (element-type t))
  "Initialize the dense matrix with a 2D array."
  (let ((contents
	 (setf (contents matrix)
	       (make-array (list rows columns)
			   :element-type element-type))))
    (dotimes (i0 rows matrix)
      (dotimes (i1 columns)
	(setf (aref contents i0 i1) (aref data i0 i1))))))

@ [[initialize-matrix]] was exported with the definition of the generic
function.

\note{A good reason to implement a matrix condition system is that the
  [[MAKE-ARRAY]] function is relied upon to signal errors in the input
  data for nested sequences. The error messages will relate to array
  errors and may obsfucate the error and the solution.}

\subsection{Dense Matrix Predicates}
\label{sec:dense-matrix-predicates}

The function [[dense-matrix-p]] returns true if the object is a
matrix and false otherwise.
<<Function: Dense matrix predicate>>=
(defun dense-matrix-p (object)
  "Return true if object is a dense matrix."
  (typep object 'dense-matrix))

@ The dense matrix implementation of [[matrix-in-bounds-p]] is a
wrapper around [[array-in-bounds-p]].
<<Method: Dense matrix bounds predicate>>=
(defmethod matrix-in-bounds-p ((matrix dense-matrix)
			       (row integer) (column integer))
  "Return true if row and column do not exceed the dimensions of matrix."
  (array-in-bounds-p (contents matrix) row column))

@ [[dense-matrix-p]] is an exported symbol. [[matrix-in-bounds-p]]
was exported with the definition of the generic function.
<<Dense matrix exports>>=
:dense-matrix-p
@

\subsection{Inspecting Dense Matrices}
\label{sec:inspecting-dense-matrices}

The dense matrix implementation of [[matrix-element-type]] is a
wrapper around [[ARRAY-ELEMENT-TYPE]].
<<Method: Dense matrix element type>>=
(defmethod matrix-element-type ((matrix dense-matrix))
  "Return the element type of the matrix."
  (array-element-type (contents matrix)))

@ The dense matrix implementation of [[matrix-dimensions]] is a
wrapper around [[ARRAY-DIMENSIONS]].
<<Method: Dense matrix dimensions>>=
(defmethod matrix-dimensions ((matrix dense-matrix))
  "Return the number of rows and columns in matrix."
  (array-dimensions (contents matrix)))

@ The dense matrix implementation of [[matrix-row-dimension]] is a
wrapper around [[ARRAY-DIMENSION]] with the axis number set to zero.
<<Method: Dense matrix row dimension>>=
(defmethod matrix-row-dimension ((matrix dense-matrix))
  "Return the number of rows in matrix."
  (array-dimension (contents matrix) 0))

@ Similarly, the dense matrix implementation of
[[matrix-column-dimension]] is a wrapper around [[ARRAY-DIMENSION]]
with the axis number set to one.
<<Method: Dense matrix column dimension>>=
(defmethod matrix-column-dimension ((matrix dense-matrix))
  "Return the number of columns in matrix."
  (array-dimension (contents matrix) 1))

@ All of these symbols were exported with the definition of the
generic functions.

\subsection{Referencing Dense Matrices}
\label{sec:referencing-dense-matrices}

The dense matrix implementation of [[mref]] is a wrapper around
[[AREF]].
<<Method: Dense matrix element reference>>=
(defmethod mref ((matrix dense-matrix) (row integer) (column integer))
  "Return the element of matrix at row,column."
  (aref (contents matrix) row column))

@ A dense matrix is settable. The implementation is simply a wrapper
around [[(setf aref)]].
<<Method: Dense matrix element reference>>=
(defmethod (setf mref) ((data number) (matrix dense-matrix)
                        (row integer) (column integer))
  "Set the element of matrix at row,column."
  (setf (aref (contents matrix) row column) data))

@ [[mref]] was exported with the definition of the generic function.

\subsection{Copying Dense Matrices}
\label{sec:copying-dense-matrices}

A new dense matrix that is a copy of the supplied dense matrix is
returned from [[copy-matrix]].
<<Method: Copy a dense matrix>>=
(defmethod copy-matrix ((matrix dense-matrix))
  "Return a copy of the dense matrix."
  (let ((rows     (matrix-row-dimension matrix))
	(columns  (matrix-column-dimension matrix))
	(original (contents matrix))
	(contents (make-array (matrix-dimensions matrix)
			      :element-type
			      (matrix-element-type matrix))))
    (make-instance
     (class-of matrix)
     :contents
     (dotimes (i0 rows contents)
       (dotimes (i1 columns)
	 (setf (aref contents i0 i1) (aref original i0 i1)))))))

@ [[copy-matrix]] was exported with the definition of the generic
function.

\subsection{Manipulating Subsets of Dense Matrices}
\label{sec:dense-matrix-subsets}

The submatrix of a dense matrix is always a dense matrix.
<<Method: Subset of a dense matrix>>=
(defmethod submatrix ((matrix dense-matrix)
		      (row integer) (column integer)
                      &key row-end column-end)
  "Return a dense matrix created from the submatrix of a matrix."
  (destructuring-bind (row column row-end column-end)
      (matrix-validated-range matrix row column row-end column-end)
    (let* ((numrows (- row-end row))
	   (numcols (- column-end column))
	   (original (contents matrix))
	   (contents (make-array (list numrows numcols)
				 :element-type
				 (matrix-element-type matrix))))
      (make-instance
       'dense-matrix
       :contents
       (dotimes (i0 numrows contents)
	 (dotimes (i1 numcols)
	   (setf (aref contents i0 i1)
		 (aref original (+ row i0) (+ column i1)))))))))

@ The submatrix of a dense matrix is settable.
<<Method: Subset of a dense matrix>>=
(defmethod (setf submatrix) ((data dense-matrix) (matrix dense-matrix)
                             (row integer) (column integer)
                             &key row-end column-end)
  "Set the submatrix of matrix."
  (destructuring-bind (row column row-end column-end)
      (matrix-validated-range matrix row column row-end column-end)
    (let ((numrows (min (- row-end row)
                        (matrix-row-dimension data)))
          (numcols (min (- column-end column)
                        (matrix-column-dimension data)))
          (mat (contents matrix))
          (dat (contents data)))
      (do ((di0 0   (1+ di0))
           (mi0 row (1+ mi0)))
          ((>= di0 numrows) data)       ; Return the data
        (do ((di1 0      (1+ di1))
             (mi1 column (1+ mi1)))
            ((>= di1 numcols))
          (setf (aref mat mi0 mi1) (aref dat di0 di1)))))))

@ For the definition of a dense matrix, [[replace-matrix]] is
specialized on the first matrix being a [[dense-matrix]]. The second
matrix is specialized on the [[matrix-object]] superclass and
therefore can be any type of matrix.
<<Method: Destructively replace a subset of a dense matrix>>=
(defmethod replace-matrix ((matrix1 dense-matrix) (matrix2 dense-matrix)
                           &key (row1 0) row1-end (column1 0) column1-end
                           (row2 0) row2-end (column2 0) column2-end)
  "Replace the elements of matrix1 with matrix2."
  (destructuring-bind (row1 column1 row1-end column1-end)
      (matrix-validated-range matrix1 row1 column1 row1-end column1-end)
    (destructuring-bind (row2 column2 row2-end column2-end)
        (matrix-validated-range matrix2 row2 column2 row2-end column2-end)
      (let ((numrows (min (- row1-end row1) (- row2-end row2)))
            (numcols (min (- column1-end column1) (- column2-end column2)))
            (contents1 (contents matrix1))
            (contents2 (contents matrix2)))
        (do ((i0    0    (1+ i0))
             (m1-i0 row1 (1+ m1-i0))
             (m2-i0 row2 (1+ m2-i0)))
            ((>= i0 numrows) matrix1)   ; Return MATRIX1
          (do ((i1    0       (1+ i1))
               (m1-i1 column1 (1+ m1-i1))
               (m2-i1 column2 (1+ m2-i1)))
              ((>= i1 numcols))
            (setf (aref contents1 m1-i0 m1-i1)
                  (aref contents2 m2-i0 m2-i1))))))))

@ [[submatrix]] and [[replace-matrix]] were exported with the
definitions of the generic functions.

\section{Dense Matrix Fundamental Operations}
\label{sec:dense-matrix-fundamental-operations}

<<Dense matrix fundamental operations>>=
;;; Dense matrix fundamental operations
<<Method: Scaled sum of squares of the dense matrix>>
<<Method: Scaled sum of powers of p of the dense matrix>>
<<Function: Dense matrix 1 norm>>
<<Function: Dense matrix max norm>>
<<Function: Dense matrix Frobenius norm>>
<<Function: Dense matrix infinity norm>>
<<Method: Dense matrix norm>>
<<Method: Dense matrix transpose>>
<<Method: Dense matrix scale>>
<<Method: Dense matrix addition>>
<<Method: Row vector - dense matrix product>>
<<Method: Dense matrix - column vector product>>
<<Method: Dense matrix - matrix product>>
@

\subsection{Scaled Sums of Dense Matrices}
\label{sec:scaled-sums-of-dense-matrices}

[[sumsq]] is specialized on the [[dense-matrix]] object.
<<Method: Scaled sum of squares of the dense matrix>>=
(defmethod sumsq ((matrix dense-matrix) &key (scale 0) (sumsq 1))
  "Return the scaling parameter and the sum of the squares of the matrix."
  (destructuring-bind (numrows numcols) (matrix-dimensions matrix)
    (let ((mat (contents matrix))
          (abs-val 0))
      (dotimes (i0 numrows (values scale sumsq))
        (dotimes (i1 numcols)
          (when (< 0 (setf abs-val (abs (aref mat i0 i1))))
            (if (< scale abs-val)
                (setf sumsq (1+ (* sumsq (expt (/ scale abs-val) 2)))
                      scale abs-val)
                (incf sumsq (expt (/ abs-val scale) 2)))))))))

@ similarly, [[sump]] is specialized on the [[dense-matrix]] object.
<<Method: Scaled sum of powers of p of the dense matrix>>=
(defmethod sump ((matrix dense-matrix) (p number) &key (scale 0) (sump 1))
  "Return the scaling parameter and the sum of the P powers of the matrix."
  (unless (plusp p) (error "The power(~A) must be positive." p))
  (destructuring-bind (numrows numcols) (matrix-dimensions matrix)
    (let ((mat (contents matrix))
          (abs-val 0))
      (dotimes (i0 numrows (values scale sump))
        (dotimes (i1 numcols)
          (when (< 0 (setf abs-val (abs (aref mat i0 i1))))
            (if (< scale abs-val)
                (setf sump (1+ (* sump (expt (/ scale abs-val) p)))
                      scale abs-val)
                (incf sump (expt (/ (aref mat i0 i1) scale) p)))))))))

@

\note{At the minimum, the test for a positive power P in [[sump]]
  should be put in a [[:BEFORE]] method specialized on
  [[dense-matrix]]. It's possible it should be applied to a
  [[:BEFORE]] method for both [[data-vector]] and [[dense-matrix]]
  [[sump]].}

\subsection{Dense Matrix Norm}
\label{sec:dense-matrix-norm}

the [[norm]] function for dense matrices is a wrapper function that
calls the appropriate function for the value of [[measure]]. Four
measures are implemented for dense matrices, the 1-norm, the max norm,
the Frobenius norm and the infinity norm.
<<Method: Dense matrix norm>>=
(defmethod norm ((matrix dense-matrix) &key (measure 1))
  "Return the norm of the matrix."
  (case measure
    (1          (%dense-matrix-1-norm matrix))
    (:max       (%dense-matrix-max-norm matrix))
    (:frobenius (%dense-matrix-frobenius-norm matrix))
    (:infinity  (%dense-matrix-infinity-norm matrix))
    (otherwise  (error "Unrecognized norm, ~A." measure))))

@
<<Function: Dense matrix 1 norm>>=
(defun %dense-matrix-1-norm (matrix)
  "Return the 1 norm of the matrix."
  (destructuring-bind (numrows numcols) (matrix-dimensions matrix)
    (let ((mat (contents matrix))
          (zero (coerce 0 (matrix-element-type matrix)))
          (norm 0)
          (sum 0))
      (dotimes (i1 numcols norm)
        (setf sum zero)
        (dotimes (i0 numrows)
          (incf sum (abs (aref mat i0 i1))))
        (setf norm (max sum norm))))))

@
<<Function: Dense matrix max norm>>=
(defun %dense-matrix-max-norm (matrix)
  "Return the max norm of the matrix."
  (destructuring-bind (numrows numcols) (matrix-dimensions matrix)
    (let ((mat (contents matrix))
          (norm 0))
      (dotimes (i0 numrows norm)
        (dotimes (i1 numcols)
          (setf norm (max norm (abs (aref mat i0 i1)))))))))

@
<<Function: Dense matrix Frobenius norm>>=
(defun %dense-matrix-frobenius-norm (matrix)
  "Return the Frobenius norm of the matrix."
  (multiple-value-bind (scale sumsq) (sumsq matrix)
    (* scale (sqrt sumsq))))

@
<<Function: Dense matrix infinity norm>>=
(defun %dense-matrix-infinity-norm (matrix)
  "Return the infinity norm of the matrix."
  (destructuring-bind (numrows numcols) (matrix-dimensions matrix)
    (let ((mat (contents matrix))
          (zero (coerce 0 (matrix-element-type matrix)))
          (norm 0)
          (sum 0))
      (dotimes (i0 numrows norm)
        (setf sum zero)
        (dotimes (i1 numcols)
          (incf sum (abs (aref mat i0 i1))))
        (setf norm (max sum norm))))))

@

\subsection{Dense Matrix Transpose}
\label{sec:dense-matrix-transpose}

The [[transpose]] function for a dense matrix returns a dense
matrix. When set to true, the [[conjugate]] keyword returns the
Hermitian transpose of the complex valued matrices and does nothing
for real valued vectors.
<<Method: Dense matrix transpose>>=
(defmethod transpose ((matrix dense-matrix) &key conjugate)
  "Return the transpose of the matrix."
  (make-instance
   (class-of matrix)
   :contents
   (destructuring-bind (numrows numcols)
       (matrix-dimensions matrix)
     (let ((op (if conjugate #'conjugate #'identity))
           (contents  (contents matrix))
           (tcontents (make-array
                       (list numcols numrows)
                       :element-type
                       (matrix-element-type matrix))))
       (dotimes (i0 numrows tcontents)
         (dotimes (i1 numcols)
           (setf (aref tcontents i1 i0)
                 (funcall op (aref contents i0 i1)))))))))

@ The destructive version, [[ntranspose]], is limited to dense
matrices with an equal number of rows and columns.
<<Method: Dense matrix transpose>>=
(defmethod ntranspose ((matrix dense-matrix) &key conjugate)
  "Replace the contents of the dense matrix with the transpose."
  (destructuring-bind (numrows numcols) (matrix-dimensions matrix)
    (if (= numrows numcols)
        (let ((op (if conjugate #'conjugate #'identity))
              (contents (contents matrix)))
          (dotimes (i0 numrows matrix)
            ;; FIXME : Conjugate on the diagonal may not be correct.
            (setf (aref contents i0 i0) (funcall op (aref contents i0 i0)))
            (do ((i1 (1+ i0) (1+ i1)))
                ((>= i1 numcols)) 
              (psetf
               (aref contents i0 i1) (funcall op (aref contents i1 i0))
               (aref contents i1 i0) (funcall op (aref contents i0 i1))))))
        (error "Rows and columns unequal."))))

@

\subsection{Dense Matrix Scale}
\label{sec:dense-matrix-scale}

Scale the elements of the [[dense-matrix]] by the scalar argument. A
new vector is returned using the [[scale]] function.
<<Method: Dense matrix scale>>=
(defmethod scale ((scalar number) (matrix dense-matrix))
  "Scale each element of the dense matrix."
  (make-instance
   (class-of matrix)
   :contents
   (destructuring-bind (numrows numcols)
       (matrix-dimensions matrix)
     (let ((contents (contents matrix))
           (scaled (make-array (list numrows numcols)
                               :element-type
                               (matrix-element-type matrix))))
       (dotimes (i0 numrows scaled)
         (dotimes (i1 numcols)
           (setf (aref scaled i0 i1)
                 (* scalar (aref contents i0 i1)))))))))

@ The dense matrix is destructively modified with [[nscale]].
<<Method: Dense matrix scale>>=
(defmethod nscale ((scalar number) (matrix dense-matrix))
  "Scale each element of the dense matrix."
  (destructuring-bind (numrows numcols)
      (matrix-dimensions matrix)
    (let ((contents (contents matrix)))
      (dotimes (i0 numrows matrix)
        (dotimes (i1 numcols)
          (setf (aref contents i0 i1)
                (* scalar (aref contents i0 i1))))))))

@

\subsection{Dense Matrix Addition}
\label{sec:dense-matrix-addition}

[[add]] returns a new matrix with the sum of [[matrix1]] and [[matrix2]].
<<Method: Dense matrix addition>>=

@

\subsection{Dense Matrix Product}
\label{sec:dense-matrix-product}

The fundamental operation [[product]] is specialized on
[[dense-matrix]] for 2 matrix-vector operations and 1 matrix-matrix
operation. The first matrix-vector operation is the product of a dense
matrix pre-multiplied by a row vector.
<<Method: Row vector - dense matrix product>>=
(defmethod product :before ((vector row-vector) (matrix dense-matrix)
                            &key scalar)
  "Verify the inputs."
  (declare (ignore scalar))
  (unless (= (vector-length vector) (matrix-row-dimension matrix))
    (error "Row vector(~D) is incompatible with matrix~A."
           (vector-length vector) (matrix-dimensions matrix))))

(defmethod product ((vector row-vector) (matrix dense-matrix)
                    &key scalar)
  "Return a row vector generated by the pre-multiplication of a dense
matrix by a row vector."
  (destructuring-bind (numrows numcols) (matrix-dimensions matrix)
    (let ((vec (contents vector))
          (mat (contents matrix))
          (zero (coerce 0 (vector-element-type vector)))
          (val  nil)
          (newvec (make-array
                   numcols
                   :element-type
                   (vector-element-type vector))))
      (make-instance
       'row-vector
       :contents
       (dotimes (i1 numcols newvec)
         (setf val zero)
         (dotimes (i0 numrows)
           (incf val (* (aref vec i0) (aref mat i0 i1))))
         (if scalar
             (setf (aref newvec i1) (* scalar val))
             (setf (aref newvec i1) val)))))))

@ The second matrix-vector operation is the product of a dense matrix
with a column vector.
<<Method: Dense matrix - column vector product>>=
(defmethod product :before ((matrix dense-matrix) (vector column-vector)
                            &key scalar)
  "Verify the input."
  (declare (ignore scalar))
  (unless (= (vector-length vector) (matrix-column-dimension matrix))
    (error "Column vector(~D) is incompatible with matrix~A."
           (vector-length vector) (matrix-dimensions matrix))))

(defmethod product ((matrix dense-matrix) (vector column-vector)
                    &key scalar)
  "Return a column vector generated by the multiplication of the dense
matrix with a column vector."
  (destructuring-bind (numrows numcols) (matrix-dimensions matrix)
    (let ((vec (contents vector))
          (mat (contents matrix))
          (zero (coerce 0 (vector-element-type vector)))
          (val nil)
          (newvec (make-array
                   numrows
                   :element-type
                   (vector-element-type vector))))
      (make-instance
       'column-vector
       :contents
       (dotimes (i0 numrows newvec)
         (setf val zero)
         (dotimes (i1 numcols)
           (incf val (* (aref mat i0 i1) (aref vec i1))))
         (if scalar
             (setf (aref newvec i0) (* scalar val))
             (setf (aref newvec i0) val)))))))

@ The single matrix-matrix operation is the matrix product of 2 dense
matrices.
<<Method: Dense matrix - matrix product>>=
(defmethod product :before ((matrix1 dense-matrix) (matrix2 dense-matrix)
                            &key scalar)
  "Verify the input."
  (declare (ignore scalar))
  (unless (= (matrix-column-dimension matrix1) (matrix-row-dimension matrix2))
    (error "The matrix dimensions, ~A and ~A, are not compatible."
           (matrix-dimensions matrix1) (matrix-dimensions matrix2))))

(defmethod product ((matrix1 dense-matrix) (matrix2 dense-matrix)
                    &key scalar)
  "Return the product of the dense matrices."
  (destructuring-bind (numrow1 numcol1) (matrix-dimensions matrix1)
    (let* ((mat1 (contents matrix1))
           (mat2 (contents matrix2))
           (zero (coerce 0 (matrix-element-type matrix1)))
           (val nil)
           (numcol2 (matrix-column-dimension matrix2))
           (newmat (make-array (list numrow1 numcol2)
                               :element-type
                               (matrix-element-type matrix1))))
      (make-instance
       (common-class-of matrix1 matrix2 'dense-matrix)
       :contents
       (dotimes (i0 numrow1 newmat)
         (dotimes (i2 numcol2)
           (setf val zero)
           (dotimes (i1 numcol1)
             (incf val (* (aref mat1 i0 i1) (aref mat2 i1 i2))))
           (if scalar
               (setf (aref newmat i0 i2) (* scalar val))
               (setf (aref newmat i0 i2) val))))))))

@ 

\chapter{Square Matrices}
\label{chap:square-matrices}

A square matrix is defined as a matrix with the number of columns
equal to the number of rows. It is implemented as a subclass of the
dense matrix.
<<square-matrix.lisp>>=
<<In linear algebra package>>
<<Class: Square matrix>>
<<Square matrix interface operations>>
@ A square matrix deponds on the linear algebra package, fundamental
operations, the matrix interface and the dense matrix.
<<Square matrix dependencies>>=
(:file "square-matrix"
       :depends-on ("defpackage"
                    "fundamental-ops"
                    "matrix"
                    "dense-matrix"))
@ The square matrix is a direct subclass of [[dense-matrix]] with no
modifications to the slots.
<<Class: Square matrix>>=
(defclass square-matrix (dense-matrix)
  ()
  (:documentation
   "Square matrix object."))

@ [[square-matrix]] is an exported symbol.
<<Square matrix exports>>=
:square-matrix
@ 

\section{Square Matrix Interface Operations}
\label{sec:square-matrix-interface-operations}

The square matrix differs from the dense matrix only by the
requirement that the number of rows and columns are equal.
Consequently, only a total of 3 functions and methods are required.
<<Square matrix interface operations>>=
;;; Square matrix interface operations
<<Function: Square matrix predicate>>
<<Before method: Verify that the input data is square>>
<<Method: Subset of a square matrix>>
@

\subsection{Initializing Square Matrices}
\label{sec:initializing-square-matrices}

All initialization methods applicable to a dense matrix are
applicable to a square matrix. The only additional constraint on the
square matrix is that the number of rows is equal to the number of
columns. This test is independent of the data type and implemented in
a before method.
<<Before method: Verify that the input data is square>>=
(defmethod initialize-matrix :before ((matrix square-matrix) data
				      (rows integer) (columns integer)
				      &optional element-type)
  "Verify that the number of rows and colums are equal."
  (declare (ignore matrix data element-type))
  (unless (= rows columns)
    (error "Number of rows must equal the number of columns.")))

@ [[initialize-matrix]] was exported with the definition of the
generic function.

\subsection{Square Matrix Predicates}
\label{sec:square-matrix-predicates}

The function [[square-matrix-p]] returns true if the object is a
matrix and false otherwise. The [[matrix-in-bounds-p]] predicate
specialized for dense matrices is applicable to square matrices, so
there is no version specialized on the square matrix class.
<<Function: Square matrix predicate>>=
(defun square-matrix-p (object)
  "Return true if OBJECT is a square matrix."
  (typep object 'square-matrix))

@ [[square-matrix-p]] is an exported symbol.
<<Square matrix exports>>=
:square-matrix-p
@

\subsection{Inspecting Square Matrices}
\label{sec:inspecting-square-matrices}

All of the functions for inspecting matrices, [[matrix-element-type]],
[[matrix-dimensions]], [[matrix-row-dimension]] and
[[matrix-column-dimension]] are applicable to square matrices.
Therefore, none of the matrix inspection functions are specialized for
the square matrix class.

\subsection{Referencing Square Matrices}
\label{sec:referencing-square-matrices}

The matrix reference function, [[mref]], specialized for the dense
matrix is applicable to the square matrix. A square matrix is settable
and the [[(setf mref)]] function specialized for the dense matrix is
also applicable. Therefore, [[mref]] is not specialized for a square
matrix.

\subsection{Copying Square Matrices}
\label{sec:copying-square-matrices}

The [[copy-matrix]] method specialized for the dense matrix is
applicable to a square matrix.

\subsection{Manipulating Subsets of Square Matrices}
\label{sec:square-matrix-subsets}

The [[submatrix]] function specialized on the square matrix returns a
square matrix if the number of rows of the subset equals the number of
columns. Otherwise it returns a dense matrix.
<<Method: Subset of a square matrix>>=
(defmethod submatrix ((matrix square-matrix)
		      (row integer) (column integer)
                      &key row-end column-end)
  "Return a matrix created from the submatrix of matrix."
  (destructuring-bind (row column row-end column-end)
      (matrix-validated-range matrix row column row-end column-end)
    (let* ((numrows (- row-end row))
	   (numcols (- column-end column))
	   (original (contents matrix))
	   (contents (make-array (list numrows numcols)
				 :element-type
				 (matrix-element-type matrix))))
      (make-instance
       (if (= numrows numcols) 'square-matrix 'dense-matrix)
       :contents
       (dotimes (i0 numrows contents)
	 (dotimes (i1 numcols)
	   (setf (aref contents i0 i1)
		 (aref original (+ row i0) (+ column i1)))))))))

@ The submatrix of a square matrix is settable regardless of the data
matrix type. Therefore, both the [[(setf submatrix)]] and
[[replace-matrix]] functions specialized on the dense matrix are
applicable to the square matrix. [[submatrix]] and [[replace-matrix]]
were exported with the definitions of the generic functions.

\chapter{Hermitian Matrices}
\label{chap:hermitian-matrices}

A Hermitian matrix is a square matrix with complex elements off the
diagonal and real elements on the diagonal. The transpose of the
matrix is equal to the conjugate of the matrix elements.
<<hermitian-matrix.lisp>>=
<<In linear algebra package>>
<<Class: Hermitian matrix>>
<<Hermitian matrix interface operations>>
@ The hermitian matrix depends on the linear algebra package,
auxiliary functions, fundamental operations, the matrix interface and
the square matrix.
<<Hermitian matrix dependencies>>=
(:file "hermitian-matrix"
       :depends-on ("defpackage"
                    "auxiliary"
                    "fundamental-ops"
                    "matrix"
                    "square-matrix"))
@ The symmetric matrix is a direct subclass of [[square-matrix]] with
no modifications to the slots.
<<Class: Hermitian matrix>>=
(defclass hermitian-matrix (square-matrix)
  ()
  (:documentation
   "Hermitian matrix object."))

@ [[hermitian-matrix]] is an exported symbol.
<<Hermitian matrix exports>>=
:hermitian-matrix
@ 

\note{The Hermitian matrix object is not completely validated and
  needs more review.}

\section{Hermitian Matrix Interface Operations}
\label{sec:hermitian-matrix-interface-operations}

The matrix interface operations for Hermitian matrices are implemented
in this section. All operations are specialized on the
[[hermitian-matrix]] object.
<<Hermitian matrix interface operations>>=
;;; Hermitian matrix interface operations
<<Function: Hermitian matrix predicate>>
<<Function: Verify that the nested sequence is Hermitian>>
<<Method: Initialize the Hermitian matrix with a complex is an error>>
<<Method: Initialize the Hermitian matrix with a nested sequence>>
<<Method: Initialize the Hermitian matrix with a 2D array>>
<<Method: Hermitian matrix element reference>>
<<Function: Subset of a Hermitian matrix>>
<<Method: Subset of a Hermitian matrix>>
<<Function: Destructively replace a subset of a Hermitian matrix>>
<<Method: Destructively replace a subset of a Hermitian matrix>>
@ 

\subsection{Initializing Hermitian Matrices}
\label{sec:initializing-hermitian-matrices}

When initializing a Hermitian matrix, the data is verified to be
Hermitian while the contents of the matrix are being populated. It is
an error to initialize a Hermitian matrix with a complex value.
<<Method: Initialize the Hermitian matrix with a complex is an error>>=
(defmethod initialize-matrix ((matrix hermitian-matrix) (data complex)
                              (rows integer) (columns integer)
                              &optional (element-type 'complex))
  "It is an error to initialize a Hermitian matrix with a complex
element."
  (declare (ignore data rows columns element-type))
  (error "The initial element for a ~A must be real." (type-of matrix)))

@ The contents of a Hermitian matrix initialized with a nested
sequence are verified to be Hermitian using an internal function.
<<Function: Verify that the nested sequence is Hermitian>>=
(defun %initialize-hermitian-matrix-with-seq (matrix data
                                              rows columns
                                              element-type)
  "Initialize and validate a Hermitian matrix with a sequence."
  (let ((contents (setf (contents matrix)
                        (make-array (list rows columns)
                                    :element-type element-type
                                    :initial-contents data))))
    (dotimes (i0 rows matrix)
      (if (zerop (imagpart (aref contents i0 i0)))
          (dotimes (i1 i0)
            (unless (complex-equal
                     (aref contents i0 i1)
                     (conjugate
                      (aref contents i1 i0)))
              (error "The data is not Hermitian.")))
          (error "The data is not Hermitian.")))))

@ Two methods are required to process nested sequences, the first
specialized for lists as the first rank data structure.
<<Method: Initialize the Hermitian matrix with a nested sequence>>=
(defmethod initialize-matrix ((matrix hermitian-matrix) (data list)
                              (rows integer) (columns integer)
                              &optional (element-type 'complex))
  "Initialize the Hermitian matrix with a nested sequence."
  (%initialize-hermitian-matrix-with-seq matrix data
                                         rows columns
                                         element-type))

@ The second method for nested sequences is specialized on vectors as
the first rank data structures.
<<Method: Initialize the Hermitian matrix with a nested sequence>>=
(defmethod initialize-matrix ((matrix hermitian-matrix) (data vector)
                              (rows integer) (columns integer)
                              &optional (element-type 'complex))
  "Initialize the Hermitian matrix with a nested sequence."
  (%initialize-hermitian-matrix-with-seq matrix data
                                         rows columns
                                         element-type))

@ The final Hermitian matrix initialization method is specialized for
2D arrays.
<<Method: Initialize the Hermitian matrix with a 2D array>>=
(defmethod initialize-matrix ((matrix hermitian-matrix) (data array)
                              (rows integer) (columns integer)
                              &optional (element-type 'complex))
  "Initialize the Hermitian matrix with a 2D array."
  (let ((contents (setf (contents matrix)
                        (make-array (list rows columns)
                                    :element-type element-type))))
    (dotimes (i0 rows matrix)
      (if (zerop
           (imagpart
            (setf (aref contents i0 i0) (aref data i0 i0))))
          (dotimes (i1 i0)
            (unless (complex-equal
                     (setf (aref contents i0 i1)
                           (aref data i0 i1))
                     (conjugate
                      (setf (aref contents i1 i0)
                            (aref data i1 i0))))
              (error "The data is not Hermitian.")))
          (error "The data is not Hermitian.")))))

@ [[initialize-matrix]] was exported with the definition of the generic
function.

\subsection{Hermitian Matrix Predicates}
\label{sec:hermitian-matrix-predicates}

The function [[hermitian-matrix-p]] returns true if the object is a
hermitian matrix and false otherwise.
<<Function: Hermitian matrix predicate>>=
(defun hermitian-matrix-p (object)
  "Return true if object is a hermitian-matrix, NIL otherwise."
  (typep object 'hermitian-matrix))

@ [[hermitian-matrix-p]] is an exported symbol.
<<Hermitian matrix exports>>=
:hermitian-matrix-p
@

\subsection{Inspecting Hermitian Matrices}
\label{sec:inspecting-hermitian-matrices}

All of the functions for inspecting matrices, [[matrix-element-type]],
[[matrix-dimensions]], [[matrix-row-dimension]] and
[[matrix-column-dimension]] are applicable to Hermitian matrices.
Therefore, none of the matrix inspection functions are specialized for
the Hermitian matrix class.

\subsection{Referencing Hermitian Matrices}
\label{sec:referencing-hermitian-matrices}

The matrix reference function, [[mref]], specialized for the dense
matrix is applicable to the hermitian matrix. A Hermitian matrix is
settable with the constraint that the transpose element must also be
set. Therefore, [[(setf mref)]] is specialized for a Hermitian matrix.
<<Method: Hermitian matrix element reference>>=
(defmethod (setf mref) ((data number) (matrix hermitian-matrix)
                        (row integer) (column integer))
  "Set the element at row,column of matrix to data."
  (if (= row column)
      (unless (zerop
               (imagpart
                (setf (aref (contents matrix) row column) data)))
        (error "Diagonal Hermitian matrix elements must have a zero ~
                imaginary component."))
      (setf (aref (contents matrix) row column) data
            (aref (contents matrix) column row) (conjugate data))))

@ [[mref]] was exported with the definition of the generic function.

\subsection{Copying Hermitian Matrices}
\label{sec:copying-hermitian-matrices}

The [[copy-matrix]] function specialized on [[square-matrix]] applies
to Hermitian matrices as well. Therefore, [[copy-matrix]] is not
specialized for the symmetric matrix class.

\subsection{Manipulating Subsets of Hermitian Matrices}
\label{sec:hermitian-matrix-subsets}

As with the symmetric matrix, the [[submatrix]] function specialized
on the Hermitian matrix returns one of a Hermitian matrix, a square
matrix or a dense matrix depending on the specified range. If the
start row equals the start column and the end row equals the end
column, a Hermitian matrix is returned. If the number of rows equals
the number of columns, but the start and end rows do not equal the
start and end columns, respectively, a square matrix is returned.
Otherwise, a dense matrix is returned.
<<Method: Subset of a Hermitian matrix>>=
(defmethod submatrix ((matrix hermitian-matrix)
                      (row integer) (column integer)
                      &key row-end column-end)
  "Return a matrix created from the submatrix of matrix."
  (destructuring-bind (row column row-end column-end)
      (matrix-validated-range matrix row column row-end column-end)
    (let* ((numrows (- row-end row))
           (numcols (- column-end column))
           (original (contents matrix))
           (contents (make-array (list numrows numcols)
                                 :element-type
                                 (matrix-element-type matrix))))
      (make-instance
       (cond ((and (= row column) (= numrows numcols))
              'hermitian-matrix)
             ((= numrows numcols)
              'square-matrix)
             (t 'dense-matrix))
       :contents
       (dotimes (i0 numrows contents)
         (dotimes (i1 numcols)
           (setf (aref contents i0 i1)
                 (aref original (+ row i0) (+ column i1)))))))))

@ The submatrix of a Hermitian matrix is settable for only 2
conditions. The first condition requires Hermitian data and the start
and end row to equal the start and end column, respectively.
<<Function: Subset of a Hermitian matrix>>=
(defun %setf-hermitian-submatrix-on-diagonal (matrix data row numrows)
  (let ((mat (contents matrix))
        (dat (contents data)))
    (do ((di0 0   (1+ di0))
         (mi0 row (1+ mi0)))
        ((>= di0 numrows) data)         ; Return the data
      (setf (aref mat mi0 mi0) (aref dat di0 di0))
      (do ((di1 (1+ di0)      (1+ di1))
           (mi1 (+ 1 row di0) (1+ mi1)))
          ((>= di1 numrows))
        (setf (aref mat mi0 mi1) (aref dat di0 di1)
              (aref mat mi1 mi0) (aref dat di1 di0))))))

@ The second condition is when the subset does not intersect the
diagonal. This is equivalent to saying the start column is less than
the end row or that the end column is less than the start row. In
addition, the data must be complex.
<<Function: Subset of a Hermitian matrix>>=
(defun %setf-hermitian-submatrix-off-diagonal (matrix data
                                               row column
                                               numrows numcols)
  (let ((mat (contents matrix))
        (dat (contents data)))
    (do ((di0 0   (1+ di0))
         (mi0 row (1+ mi0)))
        ((>= di0 numrows) data)         ; Return the data
      (do ((di1 0      (1+ di1))
           (mi1 column (1+ mi1)))
          ((>= di1 numcols))
        (setf (aref mat mi0 mi1) (aref dat di0 di1)
              (aref mat mi1 mi0) (conjugate (aref dat di0 di1)))))))

@ When the data is Hermitian, both conditions must be considered.
<<Method: Subset of a Hermitian matrix>>=
(defmethod (setf submatrix) ((data hermitian-matrix)
                             (matrix hermitian-matrix)
                             (row integer) (column integer)
                             &key row-end column-end)
  "Set a submatrix of the matrix."
  (destructuring-bind (row column row-end column-end)
      (matrix-validated-range matrix row column row-end column-end)
    (let ((numrows (min (- row-end row)
                        (matrix-row-dimension data)))
          (numcols (min (- column-end column)
                        (matrix-column-dimension data))))
      (cond
        ((and (= row column) (= numrows numcols))
         (%setf-hermitian-submatrix-on-diagonal matrix data
                                                row numrows))
        ((or (< (+ row numrows -1) column)
             (< (+ column numcols -1) row))
         (%setf-hermitian-submatrix-off-diagonal matrix data
                                                 row column
                                                 numrows numcols))
        (t
         (error "Range(~D:~D,~D:~D) results in a non-Hermitian matrix."
                row row-end column column-end))))))

@ When the data is any other type of matrix and the elements are
complex, only the second condition needs to be considered. The subset
is set if it does not intersect the diagonal.
<<Method: Subset of a Hermitian matrix>>=
(defmethod (setf submatrix) ((data dense-matrix)
                             (matrix hermitian-matrix)
                             (row integer) (column integer)
                             &key row-end column-end)
  "Set a submatrix of the matrix."
  (destructuring-bind (row column row-end column-end)
      (matrix-validated-range matrix row column row-end column-end)
    (let ((numrows (min (- row-end row)
                        (matrix-row-dimension data)))
          (numcols (min (- column-end column)
                        (matrix-column-dimension data))))
      (if (or (< (+ row numrows -1) column)
              (< (+ column numcols -1) row))
          (%setf-hermitian-submatrix-off-diagonal matrix data
                                                  row column
                                                  numrows numcols)
          (error "Range(~D:~D,~D:~D) results in a non-Hermitian matrix."
                 row row-end column column-end)))))

@ Destructively replacing the subset of a Hermitian matrix is subject
to one of 2 conditions. The first condition is that the start and end
row of each matrix equals the start and end column, respectively.
<<Function: Destructively replace a subset of a Hermitian matrix>>=
(defun %replace-hermitian-matrix-on-diagonal (matrix1 matrix2
                                              row1 column1
                                              row2 column2
                                              numrows numcols)
  "Destructively replace a subset on the diagonal of matrix1 with
matrix2."
  (let ((contents1 (contents matrix1))
        (contents2 (contents matrix2)))
    (do ((   i0 0    (1+ i0))
         (m1-i0 row1 (1+ m1-i0))
         (m2-i0 row2 (1+ m2-i0)))
        ((>= i0 numrows) matrix1)       ; Return matrix1
      (setf (aref contents1 m1-i0 m1-i0) (aref contents2 m2-i0 m2-i0))
      (do ((   i1 (1+ i0)          (1+ i1))
           (m1-i1 (+ 1 column1 i0) (1+ m1-i1))
           (m2-i1 (+ 1 column2 i0) (1+ m2-i1)))
          ((>= i1 numcols))
        (setf (aref contents1 m1-i0 m1-i1) (aref contents2 m2-i0 m2-i1)
              (aref contents1 m1-i1 m1-i0) (aref contents2 m2-i1 m2-i0))))))

@ The other condition is that the subset does not intersect the
diagonal.
<<Function: Destructively replace a subset of a Hermitian matrix>>=
(defun %replace-hermitian-matrix-off-diagonal (matrix1 matrix2
                                               row1 column1
                                               row2 column2
                                               numrows numcols)
  "Destructively replace a subset off the diagonal of matrix1 with
matrix2."
  (let ((contents1 (contents matrix1))
        (contents2 (contents matrix2)))
    (do ((   i0 0    (1+ i0))
         (m1-i0 row1 (1+ m1-i0))
         (m2-i0 row2 (1+ m2-i0)))
        ((>= i0 numrows) matrix1)       ; Return matrix1
      (do ((   i1 0       (1+ i1))
           (m1-i1 column1 (1+ m1-i1))
           (m2-i1 column2 (1+ m2-i1)))
          ((>= i1 numcols))
        (setf (aref contents1 m1-i0 m1-i1) (aref contents2 m2-i0 m2-i1)
              (aref contents1 m1-i1 m1-i0) (conjugate
                                            (aref contents2 m2-i0 m2-i1)))))))

@ Similarly, when both matrices are Hermitian, both conditions must be
considered.
<<Method: Destructively replace a subset of a Hermitian matrix>>=
(defmethod replace-matrix ((matrix1 hermitian-matrix) (matrix2 hermitian-matrix)
                           &key (row1 0) row1-end (column1 0) column1-end
                           (row2 0) row2-end (column2 0) column2-end)
  "Replace the elements of matrix1 with matrix2."
  (destructuring-bind (row1 column1 row1-end column1-end)
      (matrix-validated-range matrix1 row1 column1 row1-end column1-end)
    (destructuring-bind (row2 column2 row2-end column2-end)
        (matrix-validated-range matrix2 row2 column2 row2-end column2-end)
      (let ((numrows (min (- row1-end row1) (- row2-end row2)))
            (numcols (min (- column1-end column1) (- column2-end column2))))
        (cond
          ((and (= row1 column1) (= row2 column2) (= numrows numcols))
           (%replace-hermitian-matrix-on-diagonal matrix1 matrix2
                                                  row1 column1
                                                  row2 column2
                                                  numrows numcols))
          ((or (< (+ row1 numrows -1) column1)
               (< (+ column1 numcols -1) row1))
           (%replace-hermitian-matrix-off-diagonal matrix1 matrix2
                                                   row1 column1
                                                   row2 column2
                                                   numrows numcols))
          (t
           (error "Range(~D:~D,~D:~D) results in a non-Hermitian matrix."
                  row1 (+ row1 numrows -1) column1 (+ column1 numcols -1))))))))

@ When the only the matrix that is being destructively modified is
Hermitian only the second condition must be considered.
<<Method: Destructively replace a subset of a Hermitian matrix>>=
(defmethod replace-matrix ((matrix1 hermitian-matrix) (matrix2 dense-matrix)
                           &key (row1 0) row1-end (column1 0) column1-end
                           (row2 0) row2-end (column2 0) column2-end)
  "Replace the elements of matrix1 with matrix2."
  (destructuring-bind (row1 column1 row1-end column1-end)
      (matrix-validated-range matrix1 row1 column1 row1-end column1-end)
    (destructuring-bind (row2 column2 row2-end column2-end)
        (matrix-validated-range matrix2 row2 column2 row2-end column2-end)
      (let ((numrows (min (- row1-end row1) (- row2-end row2)))
            (numcols (min (- column1-end column1) (- column2-end column2))))
        (if (or (< (+ row1 numrows -1) column1) (< (+ column1 numcols -1) row1))
            (%replace-hermitian-matrix-off-diagonal matrix1 matrix2
                                                    row1 column1
                                                    row2 column2
                                                    numrows numcols)
            (error "Range(~D:~D,~D:~D) results in a non-Hermitian matrix."
                   row1 (+ row1 numrows -1) column1 (+ column1 numcols -1)))))))

@ [[submatrix]] and [[replace-matrix]] were exported with the
definitions of the generic functions.

\note{The situation where the data replacing the subset of a Hermitian
  matrix intersects the diagonal but still results in a Hermitian
  matrix is not considered. It should be added.}

\chapter{Symmetric Matrices}
\label{chap:symmetric-matrices}

A symmetric matrix is a square matrix where the transpose of the
matrix is equal to the original matrix. It is implemented as
specialization of the Hermitian matrix.
<<symmetric-matrix.lisp>>=
<<In linear algebra package>>
<<Class: Symmetric matrix>>
<<Symmetric matrix interface operations>>
@ The symmetric matrix depends on the linear algebra package,
auxiliary functions, fundamental operations, the matrix interface and
the square matrix.
<<Symmetric matrix dependencies>>=
(:file "symmetric-matrix"
       :depends-on ("defpackage"
                    "auxiliary"
                    "fundamental-ops"
                    "matrix"
                    "square-matrix"))
@ The symmetric matrix is a direct subclass of [[hermitian-matrix]]
with no modifications to the slots.
<<Class: Symmetric matrix>>=
(defclass symmetric-matrix (hermitian-matrix)
  ()
  (:documentation
   "Symmetric matrix object."))

@ [[symmetric-matrix]] is an exported symbol.
<<Symmetric matrix exports>>=
:symmetric-matrix
@ 

\section{Symmetric Matrix Interface Operations}
\label{sec:symmetric-matrix-interface-operations}

The matrix interface operations for symmetric matrices are implemented
in this section. All operations are specialized on the
[[symmetric-matrix]] object.
<<Symmetric matrix interface operations>>=
;;; Symmetric matrix interface opterations
<<Function: Symmetric matrix predicate>>
<<Function: Verify that the nested sequence is symmetric>>
<<Method: Initialize a symmetric matrix with a nested sequence>>
<<Method: Initialize a symmetric matrix with a 2D array>>
<<Method: Symmetric matrix element reference>>
<<Function: Subset of a symmetric matrix>>
<<Method: Subset of a symmetric matrix>>
<<Function: Destructively replace a subset of a symmetric matrix>>
<<Method: Destructively replace a subset of a symmetric matrix>>
@ 

\note{The symmetric matrix is generally considered only for real
  elements. Whether or not this should be enforced needs to be
  reviewed.}

\subsection{Initializing Symmetric Matrices}
\label{sec:initializing-symmetric-matrices}

When initializing a symmetric matrix with a sequence, the data is
verified to be symmetric. This is performed with an internal function.
<<Function: Verify that the nested sequence is symmetric>>=
(defun %initialize-symmetric-matrix-with-seq (matrix data
                                              rows columns
                                              element-type)
  "Initialize and validate a symmetric matrix with a sequence."
  (let ((contents (setf (contents matrix)
                        (make-array (list rows columns)
                                    :element-type element-type
                                    :initial-contents data))))
    (dotimes (i0 rows matrix)
      (dotimes (i1 i0)
        (unless (number-equal
                 (aref contents i0 i1)
                 (aref contents i1 i0))
          (error "The data is not symmetric."))))))

@ Two methods are required to process nested sequences. Each wraps the
internal function to verify symmetry. The first is specialized for
lists as the first rank data structure.
<<Method: Initialize a symmetric matrix with a nested sequence>>=
(defmethod initialize-matrix ((matrix symmetric-matrix) (data list)
                              (rows integer) (columns integer)
                              &optional (element-type t))
  "Initialize a symmetric matrix."
  (%initialize-symmetric-matrix-with-seq matrix data
                                         rows columns
                                         element-type))

@ The second method for nested sequences is specialized on vectors as
the first rank data structure.
<<Method: Initialize a symmetric matrix with a nested sequence>>=
(defmethod initialize-matrix ((matrix symmetric-matrix) (data vector)
                              (rows integer) (columns integer)
                              &optional (element-type t))
  "Initialize a symmetric matrix."
  (%initialize-symmetric-matrix-with-seq matrix data
                                         rows columns
                                         element-type))

@ The final symmetric matrix initialization method is specialized for
arrays.
<<Method: Initialize a symmetric matrix with a 2D array>>=
(defmethod initialize-matrix ((matrix symmetric-matrix) (data array)
                              (rows integer) (columns integer)
                              &optional (element-type t))
  "Initialize a symmetric matrix."
  (let ((contents (setf (contents matrix)
                        (make-array (list rows columns)
                                    :element-type element-type))))
    (dotimes (i0 rows matrix)
      (setf (aref contents i0 i0) (aref data i0 i0))
      (dotimes (i1 i0)
        (unless (number-equal
                 (setf (aref contents i0 i1)
                       (aref data i0 i1))
                 (setf (aref contents i1 i0)
                       (aref data i1 i0)))
          (error "The data is not symmetric."))))))

@ [[initialize-matrix]] was exported with the definition of the
generic function.

\subsection{Symmetric Matrix Predicates}
\label{sec:symmetric-matrix-predicates}

The function [[symmetric-matrix-p]] returns true if the object is a
symmetric matrix and false otherwise.
<<Function: Symmetric matrix predicate>>=
(defun symmetric-matrix-p (object)
  "Return true if object is a symmetric-matrix, NIL otherwise."
  (typep object 'symmetric-matrix))

@ [[symmetric-matrix-p]] is an exported symbol.
<<Symmetric matrix exports>>=
:symmetric-matrix-p
@

\subsection{Inspecting Symmetric Matrices}
\label{sec:inspecting-symmetric-matrices}

All of the functions for inspecting matrices, [[matrix-element-type]],
[[matrix-dimensions]], [[matrix-row-dimension]] and
[[matrix-column-dimension]] are applicable to symmetric matrices.
Therefore, none of the matrix inspection functions are specialized for
the symmetric matrix class.

\subsection{Referencing Symmetric Matrices}
\label{sec:referencing-symmetric-matrices}

The matrix reference function, [[mref]], specialized for the dense
matrix is applicable to the symmetric matrix. A symmetric matrix is
settable with the constraint that the transpose element must also be
set. Therefore, [[(setf mref)]] is specialized for a symmetric matrix.
<<Method: Symmetric matrix element reference>>=
(defmethod (setf mref) ((data number) (matrix symmetric-matrix)
                        (row integer) (column integer))
  "Set the element of matrix at row,column."
  (setf (aref (contents matrix) row column) data
	(aref (contents matrix) column row) data))

@ [[mref]] was exported with the definition of the generic function.

\subsection{Copying Symmetric Matrices}
\label{sec:copying-symmetric-matrices}

The [[copy-matrix]] function specialized on [[square-matrix]] applies
to symmetric matrices as well. Therefore, [[copy-matrix]] is not
specialized for the symmetric matrix class.

\subsection{Manipulating Subsets of Symmetric Matrices}
\label{sec:symmetric-matrix-subsets}

The [[submatrix]] function specialized on the symmetric matrix returns
either a symmetric matrix, a square matrix or a dense matrix
depending on the specified range. If the start row equals the start
column and the end row equals the end column, a symmetric matrix is
returned. If the number of rows equals the number of columns, but the
start and end rows do not equal the start and end columns,
respectively, a square matrix is returned. Otherwise, a dense matrix
is returned.
<<Method: Subset of a symmetric matrix>>=
(defmethod submatrix ((matrix symmetric-matrix)
		      (row integer) (column integer)
                      &key row-end column-end)
  "Return a matrix created from the submatrix of matrix."
  (destructuring-bind (row column row-end column-end)
      (matrix-validated-range matrix row column row-end column-end)
    (let* ((numrows (- row-end row))
	   (numcols (- column-end column))
	   (original (contents matrix))
	   (contents (make-array (list numrows numcols)
				 :element-type
				 (matrix-element-type matrix))))
      (make-instance
       (cond ((and (= row column) (= numrows numcols))
	      'symmetric-matrix)
	     ((= numrows numcols)
	      'square-matrix)
	     (t 'dense-matrix))
       :contents
       (dotimes (i0 numrows contents)
	 (dotimes (i1 numcols)
	   (setf (aref contents i0 i1)
		 (aref original (+ row i0) (+ column i1)))))))))

@ The submatrix of a symmetric matrix is settable for only 2
conditions. The first condition is the start and end row equals the
start and end column, respectively.
<<Function: Subset of a symmetric matrix>>=
(defun %setf-symmetric-submatrix-on-diagonal (matrix data row numrows)
  (let ((mat (contents matrix))
        (dat (contents data)))
    (do ((di0 0   (1+ di0))
         (mi0 row (1+ mi0)))
        ((>= di0 numrows) data)         ; Return the data
      (setf (aref mat mi0 mi0) (aref dat di0 di0))
      (do ((di1 (1+ di0)      (1+ di1))
           (mi1 (+ 1 row di0) (1+ mi1)))
          ((>= di1 numrows))
        (setf (aref mat mi0 mi1) (aref dat di0 di1)
              (aref mat mi1 mi0) (aref dat di1 di0))))))

@ The second condition is when the subset does not intersect the
diagonal. This is equivalent to saying the start column is less than
the end row or that the end column is less than the start row.
<<Function: Subset of a symmetric matrix>>=
(defun %setf-symmetric-submatrix-off-diagonal (matrix data
                                               row column
                                               numrows numcols)
  (let ((mat (contents matrix))
        (dat (contents data)))
    (do ((di0 0   (1+ di0))
         (mi0 row (1+ mi0)))
        ((>= di0 numrows) data)         ; Return the data
      (do ((di1 0      (1+ di1))
           (mi1 column (1+ mi1)))
          ((>= di1 numcols))
        (setf (aref mat mi0 mi1) (aref dat di0 di1)
              (aref mat mi1 mi0) (aref dat di0 di1))))))

@ When the data is symmetric, both conditions must be considered.
<<Method: Subset of a symmetric matrix>>=
(defmethod (setf submatrix) ((data symmetric-matrix)
                             (matrix symmetric-matrix)
                             (row integer) (column integer)
                             &key row-end column-end)
  "Set a submatrix of the matrix."
  (destructuring-bind (row column row-end column-end)
      (matrix-validated-range matrix row column row-end column-end)
    (let ((numrows (min (- row-end row)
                        (matrix-row-dimension data)))
          (numcols (min (- column-end column)
                        (matrix-column-dimension data))))
      (cond
        ((and (= row column) (= numrows numcols))
         (%setf-symmetric-submatrix-on-diagonal matrix data
                                                row numrows))
        ((or (<= (+ row numrows -1) column)
             (<= (+ column numcols -1) row))
         (%setf-symmetric-submatrix-off-diagonal matrix data
                                                 row column
                                                 numrows numcols))
        (t
         (error "Range(~D:~D,~D:~D) results in an asymmetric matrix."
                row row-end column column-end))))))

@ When the data is any other type of matrix, only the second condition
needs to be considered.
<<Method: Subset of a symmetric matrix>>=
(defmethod (setf submatrix) ((data dense-matrix)
                             (matrix symmetric-matrix)
                             (row integer) (column integer)
                             &key row-end column-end)
  "Set a submatrix of MATRIX."
  (destructuring-bind (row column row-end column-end)
      (matrix-validated-range matrix row column row-end column-end)
    (let ((numrows (min (- row-end row)
                        (matrix-row-dimension data)))
          (numcols (min (- column-end column)
                        (matrix-column-dimension data))))
      (if (or (<= (+ row numrows -1) column)
              (<= (+ column numcols -1) row))
          (%setf-symmetric-submatrix-off-diagonal matrix data
                                                  row column
                                                  numrows numcols)
          (error "Range(~D:~D,~D:~D) results in an asymmetric matrix."
                 row row-end column column-end)))))

@ Destructively replacing the subset of a symmetric matrix is subject
to the same 2 conditions as setting the subset. The first condition is
that the start row and column are equal for both matrices and that the
number of rows equals the number of columns.
<<Function: Destructively replace a subset of a symmetric matrix>>=
(defun %replace-symmetric-matrix-on-diagonal (matrix1 matrix2
                                              row1 column1
                                              row2 column2
                                              numrows numcols)
  "Destructively replace a subset on the diagonal of matrix1 with
matrix2."
  (let ((contents1 (contents matrix1))
        (contents2 (contents matrix2)))
    (do ((   i0 0    (1+ i0))
         (m1-i0 row1 (1+ m1-i0))
         (m2-i0 row2 (1+ m2-i0)))
        ((>= i0 numrows) matrix1)       ; Return matrix1
      (setf (aref contents1 m1-i0 m1-i0) (aref contents2 m2-i0 m2-i0))
      (do ((   i1 (1+ i0)             (1+ i1))
           (m1-i1 (+ 1 column1 i0) (1+ m1-i1))
           (m2-i1 (+ 1 column2 i0) (1+ m2-i1)))
          ((>= i1 numcols))
        (setf (aref contents1 m1-i0 m1-i1) (aref contents2 m2-i0 m2-i1)
              (aref contents1 m1-i1 m1-i0) (aref contents2 m2-i1 m2-i0))))))

@ The second condition occurs when the subset does not intersect the
diagonal of the first matrix.
<<Function: Destructively replace a subset of a symmetric matrix>>=
(defun %replace-symmetric-matrix-off-diagonal (matrix1 matrix2
                                               row1 column1
                                               row2 column2
                                               numrows numcols)
  "Destructively replace a subset off the diagonal of matrix1 with
matrix2."
  (let ((contents1 (contents matrix1))
        (contents2 (contents matrix2)))
    (do ((   i0 0    (1+ i0))
         (m1-i0 row1 (1+ m1-i0))
         (m2-i0 row2 (1+ m2-i0)))
        ((>= i0 numrows) matrix1)       ; Return matrix1
      (do ((   i1 0       (1+ i1))
           (m1-i1 column1 (1+ m1-i1))
           (m2-i1 column2 (1+ m2-i1)))
          ((>= i1 numcols))
        (setf (aref contents1 m1-i0 m1-i1) (aref contents2 m2-i0 m2-i1)
              (aref contents1 m1-i1 m1-i0) (aref contents2 m2-i0 m2-i1))))))

@ When both matrices are symmetric, both conditions must be
considered.
<<Method: Destructively replace a subset of a symmetric matrix>>=
(defmethod replace-matrix ((matrix1 symmetric-matrix) (matrix2 symmetric-matrix)
                           &key (row1 0) row1-end (column1 0) column1-end
                           (row2 0) row2-end (column2 0) column2-end)
  "Replace the elements of MATRIX1 with MATRIX2."
  (destructuring-bind (row1 column1 row1-end column1-end)
      (matrix-validated-range matrix1 row1 column1 row1-end column1-end)
    (destructuring-bind (row2 column2 row2-end column2-end)
        (matrix-validated-range matrix2 row2 column2 row2-end column2-end)
      (let ((numrows (min (- row1-end row1) (- row2-end row2)))
            (numcols (min (- column1-end column1) (- column2-end column2))))
        (cond
          ((and (= row1 column1) (= row2 column2) (= numrows numcols))
           (%replace-symmetric-matrix-on-diagonal matrix1 matrix2
                                                  row1 column1
                                                  row2 column2
                                                  numrows numcols))
          ((or (<= (+ row1 numrows -1) column1)
               (<= (+ column1 numcols -1) row1))
           (%replace-symmetric-matrix-off-diagonal matrix1 matrix2
                                                   row1 column1
                                                   row2 column2
                                                   numrows numcols))
          (t
           (error "Range(~D:~D,~D:~D) results in an asymmetric matrix."
                  row1 (+ row1 numrows -1) column1 (+ column1 numcols -1))))))))

@ When the only the matrix that is being destructively modified is
symmetric, only the second condition must be considered.
<<Method: Destructively replace a subset of a symmetric matrix>>=
(defmethod replace-matrix ((matrix1 symmetric-matrix) (matrix2 dense-matrix)
                           &key (row1 0) row1-end (column1 0) column1-end
                           (row2 0) row2-end (column2 0) column2-end)
  "Replace the elements of MATRIX1 with MATRIX2."
  (destructuring-bind (row1 column1 row1-end column1-end)
      (matrix-validated-range matrix1 row1 column1 row1-end column1-end)
    (destructuring-bind (row2 column2 row2-end column2-end)
        (matrix-validated-range matrix2 row2 column2 row2-end column2-end)
      (let ((numrows (min (- row1-end row1) (- row2-end row2)))
            (numcols (min (- column1-end column1) (- column2-end column2))))
        (if (or (<= (+ row1 numrows -1) column1)
                (<= (+ column1 numcols -1) row1))
            (%replace-symmetric-matrix-off-diagonal matrix1 matrix2
                                                    row1 column1
                                                    row2 column2
                                                    numrows numcols)
            (error "Range(~D:~D,~D:~D) results in an asymmetric matrix."
                   row1 (+ row1 numrows -1) column1 (+ column1 numcols -1)))))))

@ [[submatrix]] and [[replace-matrix]] were exported with the
definitions of the generic functions.

\chapter{Triangular Matrices}
\label{chap:triangular-matrices}

A triangular matrix is a square matrix with non-zero elements on only
one side of the diagonal.
<<triangular-matrix.lisp>>=
<<In linear algebra package>>
<<Class: Triangular matrices>>
<<Triangular matrix interface operations>>
@ The triangular matrix depends on the linear algebra package,
fundamental operations, the matrix interface and the square matrix.
<<Triangular matrix dependencies>>=
(:file "triangular-matrix"
       :depends-on ("defpackage"
                    "fundamental-ops"
                    "matrix"
                    "square-matrix"))
@ Both types of triangular matrices are direct subclasses of
[[square-matrix]] with no modifications to the slots.
<<Class: Triangular matrices>>=
(defclass upper-triangular-matrix (square-matrix)
  ()
  (:documentation
   "Upper triangular matrix object."))

(defclass lower-triangular-matrix (square-matrix)
  ()
  (:documentation
   "Lower triangular matrix object."))

@ [[upper-triangular-matrix]] and [[lower-triangular-matrix]] are
exported symbols.
<<Triangular matrix exports>>=
:upper-triangular-matrix :lower-triangular-matrix
@ 

\section{Triangular Matrix Interface Operations}
\label{sec:triangular-matrix-interface-operations}

The matrix interface operations for triangular matrices are
implemented in this section. Each operation is implemented separately
for upper and lower triangular objects.
<<Triangular matrix interface operations>>=
;;; Triangular matrix interface operations
<<Function: Triangular matrix predicates>>
<<Function: Verify that the nested sequence is triangular>>
<<Method: Initialize the triangular matrix with a value>>
<<Method: Initialize the triangular matrix with a nested sequence>>
<<Method: Initialize the triangular matrix with a 2D array>>
<<Method: Triangular matrix element reference>>
<<Method: Copy a triangular matrix>>
<<Function: Subset of a triangular matrix>>
<<Method: Subset of a triangular matrix>>
<<Function: Destructively replace a subset of a triangular matrix>>
<<Method: Destructively replace a subset of a triangular matrix>>
@ 

\subsection{Initializing Triangular Matrices}
\label{sec:initializing-triangular-matrices}

The contents of a triangular matrix is a second rank array with all
elements equal to zero on the appropriate side of the diagonal. When
initializing a triangular matrix, the data is verified to be zero on
the appropriate side of the diagonal. When an [[initial-element]] is
supplied to [[make-matrix]], it is used to fill all of the elements on
the proper side of the diagonal.
<<Method: Initialize the triangular matrix with a value>>=
(defmethod initialize-matrix ((matrix upper-triangular-matrix) (data number)
			      (rows fixnum) (columns fixnum)
			      &optional (element-type t))
  "Initialize the upper triangular matrix with an initial element."
  (let ((contents (setf (contents matrix)
			(make-array (list rows columns)
				    :element-type element-type
				    :initial-element (coerce 0 element-type)))))
    (dotimes (i1 columns matrix)
      (setf (aref contents i1 i1) data)
      (dotimes (i0 i1)
	(setf (aref contents i0 i1) data)))))

(defmethod initialize-matrix ((matrix lower-triangular-matrix) (data number)
			      (rows fixnum) (columns fixnum)
			      &optional (element-type t))
  "Initialize the lower triangular matrix with an initial element."
  (let ((contents (setf (contents matrix)
			(make-array (list rows columns)
				    :element-type element-type
				    :initial-element (coerce 0 element-type)))))
    (dotimes (i0 rows matrix)
      (setf (aref contents i0 i0) data)
      (dotimes (i1 i0)
	(setf (aref contents i0 i1) data)))))

@ When initialized with a nested sequence, the contents of the
triangular matrix are verified to be triangular using an internal
function.
<<Function: Verify that the nested sequence is triangular>>=
(defun %initialize-upper-triangular-matrix-with-seq (matrix data
                                                     rows columns
                                                     element-type)
  (let ((contents (setf (contents matrix)
                        (make-array (list rows columns)
                                    :element-type element-type
                                    :initial-contents data))))
    (dotimes (i0 rows matrix)
      (dotimes (i1 i0)
        (unless (zerop (aref contents i0 i1))
          (error "Data is not upper triangular."))))))

(defun %initialize-lower-triangular-matrix-with-seq (matrix data
                                                     rows columns
                                                     element-type)
  (let ((contents (setf (contents matrix)
                        (make-array (list rows columns)
                                    :element-type element-type
                                    :initial-contents data))))
    (dotimes (i1 columns matrix)
      (dotimes (i0 i1)
        (unless (zerop (aref contents i0 i1))
          (error "Data is not lower triangular."))))))

@ Two methods are required to process nested sequences, the first
specialized for lists as the first rank data structure.
<<Method: Initialize the triangular matrix with a nested sequence>>=
(defmethod initialize-matrix ((matrix upper-triangular-matrix) (data list)
                              (rows integer) (columns integer)
                              &optional (element-type t))
  "Initialize the upper triangular matrix with a nested sequence."
  (%initialize-upper-triangular-matrix-with-seq matrix data
                                                rows columns
                                                element-type))

(defmethod initialize-matrix ((matrix lower-triangular-matrix) (data list)
                              (rows integer) (columns integer)
                              &optional (element-type t))
  "Initialize the lower triangular matrix with a nested sequence."
  (%initialize-lower-triangular-matrix-with-seq matrix data
                                                rows columns
                                                element-type))

@ The second method for nested sequences is specialized on vectors as
the first rank data structure.
<<Method: Initialize the triangular matrix with a nested sequence>>=
(defmethod initialize-matrix ((matrix upper-triangular-matrix) (data vector)
                              (rows integer) (columns integer)
                              &optional (element-type t))
  "Initialize the upper triangular matrix with a nested sequence."
  (%initialize-upper-triangular-matrix-with-seq matrix data
                                                rows columns
                                                element-type))

(defmethod initialize-matrix ((matrix lower-triangular-matrix) (data vector)
                              (rows integer) (columns integer)
                              &optional (element-type t))
  "Initialize the lower triangular matrix with a nested sequence."
  (%initialize-lower-triangular-matrix-with-seq matrix data
                                                rows columns
                                                element-type))

@ Finally, a triangular matrix can also be initialized with a 2D array.
<<Method: Initialize the triangular matrix with a 2D array>>=
(defmethod initialize-matrix ((matrix upper-triangular-matrix) (data array)
                              (rows integer) (columns integer)
                              &optional (element-type t))
  "Initialize the upper triangular matrix with a 2D array."
  (let ((contents (setf (contents matrix)
                        (make-array (list rows columns)
                                    :element-type element-type
                                    :initial-element (coerce 0 element-type)))))
    (dotimes (i1 columns matrix)
      (setf (aref contents i1 i1) (aref data i1 i1))
      (dotimes (i0 i1)
        (if (zerop (aref data i1 i0))
            (setf (aref contents i0 i1) (aref data i0 i1))
            (error "Data is not upper triangular."))))))

(defmethod initialize-matrix ((matrix lower-triangular-matrix) (data array)
                              (rows integer) (columns integer)
                              &optional (element-type t))
  "Initialize the lower triangular matrix with a 2D array."
  (let ((contents (setf (contents matrix)
                        (make-array (list rows columns)
                                    :element-type element-type
                                    :initial-element (coerce 0 element-type)))))
    (dotimes (i0 rows matrix)
      (setf (aref contents i0 i0) (aref data i0 i0))
      (dotimes (i1 i0)
        (if (zerop (aref data i1 i0))
            (setf (aref contents i0 i1) (aref data i0 i1))
            (error "Data is not lower triangular."))))))

@ [[initialize-matrix]] was exported with the definition of the
generic function.

\subsection{Triangular Matrix Predicates}
\label{sec:triangular-matrix-predicates}

The function [[upper-triangular-matrix-p]] returns true if the object
is an upper triangular matrix and false otherwise.
<<Function: Triangular matrix predicates>>=
(defun upper-triangular-matrix-p (object)
  "Return true if object is an upper triangular matrix."
  (typep object 'upper-triangular-matrix))

@ And [[lower-triangular-martrix-p]] returns true if the object is a
lower triangular matrix and false otherwise.
<<Function: Triangular matrix predicates>>=
(defun lower-triangular-matrix-p (object)
  "Return true if object is a lower triangular matrix."
  (typep object 'lower-triangular-matrix))

@ [[upper-triangular-matrix-p]] and [[lower-triangular-matrix-p]] are
exported symbols.
<<Triangular matrix exports>>=
:upper-triangular-matrix-p :lower-triangular-matrix-p
@

\subsection{Inspecting Triangular Matrices}
\label{sec:inspecting-triangular-matrices}

All of the functions for inspecting matrices, [[matrix-element-type]],
[[matrix-dimensions]], [[matrix-row-dimension]] and
[[matrix-column-dimension]] are applicable to triangular matrices.
Therefore, none of the matrix inspection functions are specialized for
the triangular matrix classes.

\subsection{Referencing Triangular Matrices}
\label{sec:referencing-triangular-matrices}

The matrix reference function, [[mref]], specialized for the dense
matrix is applicable to the triangular matrices. A triangular matrix
is settable with the constraint that the zero elements cannot be set.
Therefore, [[(setf mref)]] is specialized for the triangular matrices.
The row index must be less than or equal to the column index to set an
upper triangular matrix.
<<Method: Triangular matrix element reference>>=
(defmethod (setf mref) ((data number) (matrix upper-triangular-matrix)
                        (row fixnum) (column fixnum))
  "Set the element of matrix at row,column to data."
  (if (<= row column)
      (setf (aref (contents matrix) row column) data)
      (error "Elements below the diagonal must equal zero.")))

@ The column index must be less than or equal to the row index to set
a lower triangular matrix.
<<Method: Triangular matrix element reference>>=
(defmethod (setf mref) ((data number) (matrix lower-triangular-matrix)
                        (row fixnum) (column fixnum))
  "Set the element of matrix at row,column to data."
  (if (<= column row)
      (setf (aref (contents matrix) row column) data)
      (error "Elements above the diagonal must equal zero.")))

@ [[mref]] was exported with the definition of the generic function.

\subsection{Copying Triangular Matrices}
\label{sec:copying-triangular-matrices}

The [[copy-matrix]] function is specialized for triangular matrices to
reduce the number of elements set by only updating the triangle.
<<Method: Copy a triangular matrix>>=
(defmethod copy-matrix ((matrix upper-triangular-matrix))
  "Return a copy of the matrix."
  (let ((columns  (matrix-column-dimension matrix))
	(original (contents matrix))
	(contents (make-array (matrix-dimensions matrix)
			      :element-type
			      (matrix-element-type matrix))))
    (make-instance
     'upper-triangular-matrix
     :contents
     (dotimes (i1 columns contents)
       (setf (aref contents i1 i1) (aref original i1 i1))
       (dotimes (i0 i1)
	 (setf (aref contents i0 i1) (aref original i0 i1)))))))

(defmethod copy-matrix ((matrix lower-triangular-matrix))
  "Return a copy of the matrix."
  (let ((rows     (matrix-row-dimension matrix))
	(original (contents matrix))
	(contents (make-array (matrix-dimensions matrix)
			      :element-type
			      (matrix-element-type matrix))))
    (make-instance
     'lower-triangular-matrix
     :contents
     (dotimes (i0 rows contents)
       (setf (aref contents i0 i0) (aref original i0 i0))
       (dotimes (i1 i0)
	 (setf (aref contents i0 i1) (aref original i0 i1)))))))

@ [[copy-matrix]] was exported with the definition of the generic
function.

\subsection{Manipulating Subsets of Triangular Matrices}
\label{sec:triangular-matrix-subsets}

The type of the subset of a triangular matrix depends on the ranges of
the subset. If the start and end row equals the start and end column,
respectively, a new triangular matrix is returned. If the number of
rows equals the number of columns, but the start and end rows do not
equal the start and end columns, respectively, a square matrix is
returned. Otherwise a dense matrix is returned.
<<Method: Subset of a triangular matrix>>=
(defmethod submatrix ((matrix upper-triangular-matrix)
                      (row integer) (column integer)
                      &key row-end column-end)
  "Return a matrix created from the submatrix of matrix."
  (destructuring-bind (row column row-end column-end)
      (matrix-validated-range matrix row column row-end column-end)
    (let* ((numrows (- row-end row))
           (numcols (- column-end column))
           (original (contents matrix))
           (contents (make-array (list numrows numcols)
                                 :element-type
                                 (matrix-element-type matrix))))
      (make-instance
       (cond ((and (= row column) (= numrows numcols))
              'upper-triangular-matrix)
             ((= numrows numcols)
              'square-matrix)
             (t 'dense-matrix))
       :contents
       (dotimes (i0 numrows contents)
         (dotimes (i1 numcols)
           (setf (aref contents i0 i1)
                 (aref original (+ row i0) (+ column i1)))))))))

(defmethod submatrix ((matrix lower-triangular-matrix)
                      (row integer) (column integer)
                      &key row-end column-end)
  "Return a matrix created from the submatrix of matrix."
  (destructuring-bind (row column row-end column-end)
      (matrix-validated-range matrix row column row-end column-end)
    (let* ((numrows (- row-end row))
           (numcols (- column-end column))
           (original (contents matrix))
           (contents (make-array (list numrows numcols)
                                 :element-type
                                 (matrix-element-type matrix))))
      (make-instance
       (cond ((and (= row column) (= numrows numcols))
              'lower-triangular-matrix)
             ((= numrows numcols)
              'square-matrix)
             (t 'dense-matrix))
       :contents
       (dotimes (i0 numrows contents)
         (dotimes (i1 numcols)
           (setf (aref contents i0 i1)
                 (aref original (+ row i0) (+ column i1)))))))))

@

The submatrix of a triangular matrix is settable for only 2
conditions. The first condition is the start and end row equals the
start and end column, respectively.
<<Function: Subset of a triangular matrix>>=
(defun %setf-upper-triangular-submatrix-on-diagonal (matrix data row numrows)
  (let ((mat (contents matrix))
        (dat (contents data)))
    (do ((di0 0   (1+ di0))
         (mi0 row (1+ mi0)))
        ((>= di0 numrows) data)         ; Return the data
      (do ((di1 di0         (1+ di1))
           (mi1 (+ row di0) (1+ mi1)))
          ((>= di1 numrows))
        (setf (aref mat mi0 mi1) (aref dat di0 di1))))))

(defun %setf-lower-triangular-submatrix-on-diagonal (matrix data row numrows)
  (let ((mat (contents matrix))
        (dat (contents data)))
    (do ((di1 0   (1+ di1))
         (mi1 row (1+ mi1)))
        ((>= di1 numrows) data)         ; Return the data
      (do ((di0 di1         (1+ di0))
           (mi0 (+ row di1) (1+ mi0)))
          ((>= di0 numrows))
        (setf (aref mat mi0 mi1) (aref dat di0 di1))))))

@ The second condition is the range of the subset does not interset
the diagonal. For an upper triangular matrix, this is equivalent to
saying the start column is greater than the end row. For a lower
triangular matrix, it is equivalent to saying the end column is less
than the start row.
<<Function: Subset of a triangular matrix>>=
(defun %setf-upper-triangular-submatrix-above-diagonal (matrix data
                                                        row column
                                                        numrows numcols)
  (let ((mat (contents matrix))
        (dat (contents data)))
    (do ((di0 0   (1+ di0))
         (mi0 row (1+ mi0)))
        ((>= di0 numrows) data)         ; Return the data
      (do ((di1 0      (1+ di1))
           (mi1 column (1+ mi1)))
          ((>= di1 numcols))
        (setf (aref mat mi0 mi1) (aref dat di0 di1))))))

(defun %setf-lower-triangular-submatrix-below-diagonal (matrix data
                                                        row column
                                                        numrows numcols)
  (let ((mat (contents matrix))
        (dat (contents data)))
    (do ((di1 0      (1+ di1))
         (mi1 column (1+ mi1)))
        ((>= di1 numcols) data)         ; Return the data
      (do ((di0 0   (1+ di0))
           (mi0 row (1+ mi0)))
          ((>= di0 numrows))
        (setf (aref mat mi0 mi1) (aref dat di0 di1))))))

@ When the data is triangular, both conditions must be considered.
<<Method: Subset of a triangular matrix>>=
(defmethod (setf submatrix) ((data upper-triangular-matrix)
                             (matrix upper-triangular-matrix)
                             (row integer) (column integer)
                             &key row-end column-end)
  "Set a submatrix of matrix with data."
  (destructuring-bind (row column row-end column-end)
      (matrix-validated-range matrix row column row-end column-end)
    (let ((numrows (min (- row-end row)
                        (matrix-row-dimension data)))
          (numcols (min (- column-end column)
                        (matrix-column-dimension data))))
      (cond
        ((and (= row column) (= numrows numcols))
         (%setf-upper-triangular-submatrix-on-diagonal matrix data
                                                       row numrows))
        ((<= (+ row numrows -1) column)
         (%setf-upper-triangular-submatrix-above-diagonal matrix data
                                                          row column
                                                          numrows numcols))
        (t
         (error "Range(~D:~D,~D:~D) results in a non upper triangular matrix."
                row row-end column column-end))))))

(defmethod (setf submatrix) ((data lower-triangular-matrix)
                             (matrix lower-triangular-matrix)
                             (row integer) (column integer)
                             &key row-end column-end)
  "Set a submatrix of matrix with data."
  (destructuring-bind (row column row-end column-end)
      (matrix-validated-range matrix row column row-end column-end)
    (let ((numrows (min (- row-end row)
                        (matrix-row-dimension data)))
          (numcols (min (- column-end column)
                        (matrix-column-dimension data))))
      (cond
        ((and (= row column) (= numrows numcols))
         (%setf-lower-triangular-submatrix-on-diagonal matrix data
                                                       row numrows))
        ((<= (+ column numcols -1) row)
         (%setf-lower-triangular-submatrix-below-diagonal matrix data
                                                          row column
                                                          numrows numcols))
        (t
         (error "Range(~D:~D,~D:~D) results in a non lower triangular matrix."
                row row-end column column-end))))))

@ When the data is any other type of matrix, only the second condition
needs to be considered.
<<Method: Subset of a triangular matrix>>=
(defmethod (setf submatrix) ((data dense-matrix)
                             (matrix upper-triangular-matrix)
                             (row integer) (column integer)
                             &key row-end column-end)
  "Set the submatrix of matrix with data."
  (destructuring-bind (row column row-end column-end)
      (matrix-validated-range matrix row column row-end column-end)
    (let ((numrows (min (- row-end row)
                        (matrix-row-dimension data)))
          (numcols (min (- column-end column)
                        (matrix-column-dimension data))))
      (if (<= (+ row numrows -1) column)
          (%setf-upper-triangular-submatrix-above-diagonal matrix data
                                                           row column
                                                           numrows numcols)
          (error "Range(~D:~D,~D:~D) results in a non upper triangular matrix."
                 row row-end column column-end)))))

(defmethod (setf submatrix) ((data dense-matrix)
                             (matrix lower-triangular-matrix)
                             (row integer) (column integer)
                             &key row-end column-end)
  "Set the submatrix of matrix with data."
  (destructuring-bind (row column row-end column-end)
      (matrix-validated-range matrix row column row-end column-end)
    (let ((numrows (min (- row-end row)
                        (matrix-row-dimension data)))
          (numcols (min (- column-end column)
                        (matrix-column-dimension data))))
      (if (<= (+ column numcols -1) row)
          (%setf-lower-triangular-submatrix-below-diagonal matrix data
                                                           row column
                                                           numrows numcols)
          (error "Range(~D:~D,~D:~D) results in a non lower triangular matrix."
                 row row-end column column-end)))))

@

Destructively replacing the subset of a triangular matrix is subject
to the same 2 conditions as setting the subset.
<<Function: Destructively replace a subset of a triangular matrix>>=
(defun %replace-upper-triangular-matrix-on-diagonal (matrix1 matrix2
                                                     row1 column1
                                                     row2 column2
                                                     numrows numcols)
  "Destructively replace a subset on the diagonal of matrix1 with
matrix2."
  (let ((contents1 (contents matrix1))
        (contents2 (contents matrix2)))
    (do ((   i0 0    (1+ i0))
         (m1-i0 row1 (1+ m1-i0))
         (m2-i0 row2 (1+ m2-i0)))
        ((>= i0 numrows) matrix1)       ; Return matrix1
      (do ((   i1 i0             (1+ i1))
           (m1-i1 (+ column1 i0) (1+ m1-i1))
           (m2-i1 (+ column2 i0) (1+ m2-i1)))
          ((>= i1 numcols))
        (setf (aref contents1 m1-i0 m1-i1) (aref contents2 m2-i0 m2-i1))))))

(defun %replace-lower-triangular-matrix-on-diagonal (matrix1 matrix2
                                                     row1 column1
                                                     row2 column2
                                                     numrows numcols)
  "Destructively replace a subset on the diagonal of matrix1 with
matrix2."
  (let ((contents1 (contents matrix1))
        (contents2 (contents matrix2)))
    (do ((   i1 0       (1+ i1))
         (m1-i1 column1 (1+ m1-i1))
         (m2-i1 column2 (1+ m2-i1)))
        ((>= i1 numcols) matrix1)       ; Return matrix1
      (do ((   i0 i1          (1+ i0))
           (m1-i0 (+ row1 i1) (1+ m1-i0))
           (m2-i0 (+ row2 i1) (1+ m2-i0)))
          ((>= i0 numrows))
        (setf (aref contents1 m1-i0 m1-i1) (aref contents2 m2-i0 m2-i1))))))

(defun %replace-upper-triangular-matrix-above-diagonal (matrix1 matrix2
                                                        row1 column1
                                                        row2 column2
                                                        numrows numcols)
  "Destructively replace a subset off the diagonal of matrix1 with
matrix2."
  (let ((contents1 (contents matrix1))
        (contents2 (contents matrix2)))
    (do ((   i0 0    (1+ i0))
         (m1-i0 row1 (1+ m1-i0))
         (m2-i0 row2 (1+ m2-i0)))
        ((>= i0 numrows) matrix1)       ; Return matrix1
      (do ((   i1 0       (1+ i1))
           (m1-i1 column1 (1+ m1-i1))
           (m2-i1 column2 (1+ m2-i1)))
          ((>= i1 numcols))
        (setf (aref contents1 m1-i0 m1-i1) (aref contents2 m2-i0 m2-i1))))))

(defun %replace-lower-triangular-matrix-below-diagonal (matrix1 matrix2
                                                        row1 column1
                                                        row2 column2
                                                        numrows numcols)
  "Destructively replace a subset off the diagonal of matrix1 with
matrix2."
  (let ((contents1 (contents matrix1))
        (contents2 (contents matrix2)))
    (do ((   i0 0    (1+ i0))
         (m1-i0 row1 (1+ m1-i0))
         (m2-i0 row2 (1+ m2-i0)))
        ((>= i0 numrows) matrix1)       ; Return matrix1
      (do ((   i1 0       (1+ i1))
           (m1-i1 column1 (1+ m1-i1))
           (m2-i1 column2 (1+ m2-i1)))
          ((>= i1 numcols))
        (setf (aref contents1 m1-i0 m1-i1) (aref contents2 m2-i0 m2-i1))))))

@ Similarly, when both matrices are triangular, both conditions must
be considered.
<<Method: Destructively replace a subset of a triangular matrix>>=
(defmethod replace-matrix ((matrix1 upper-triangular-matrix)
                           (matrix2 upper-triangular-matrix)
                           &key (row1 0) row1-end (column1 0) column1-end
                           (row2 0) row2-end (column2 0) column2-end)
  "Replace the elements of matrix1 with matrix2."
  (destructuring-bind (row1 column1 row1-end column1-end)
      (matrix-validated-range matrix1 row1 column1 row1-end column1-end)
    (destructuring-bind (row2 column2 row2-end column2-end)
        (matrix-validated-range matrix2 row2 column2 row2-end column2-end)
      (let ((numrows (min (- row1-end row1) (- row2-end row2)))
            (numcols (min (- column1-end column1) (- column2-end column2))))
        (cond
          ((and (= row1 column1) (= row2 column2) (= numrows numcols))
           (%replace-upper-triangular-matrix-on-diagonal matrix1 matrix2
                                                         row1 column1
                                                         row2 column2
                                                         numrows numcols))
          ((<= (+ row1 numrows -1) column1)
           (%replace-upper-triangular-matrix-above-diagonal matrix1 matrix2
                                                            row1 column1
                                                            row2 column2
                                                            numrows numcols))
          (t
           (error "Range(~D:~D,~D:~D) results in a non upper triangular matrix."
                  row1 (+ row1 numrows -1) column1 (+ column1 numcols -1))))))))

(defmethod replace-matrix ((matrix1 lower-triangular-matrix)
                           (matrix2 lower-triangular-matrix)
                           &key (row1 0) row1-end (column1 0) column1-end
                           (row2 0) row2-end (column2 0) column2-end)
  "Replace the elements of matrix1 with matrix2."
  (destructuring-bind (row1 column1 row1-end column1-end)
      (matrix-validated-range matrix1 row1 column1 row1-end column1-end)
    (destructuring-bind (row2 column2 row2-end column2-end)
        (matrix-validated-range matrix2 row2 column2 row2-end column2-end)
      (let ((numrows (min (- row1-end row1) (- row2-end row2)))
            (numcols (min (- column1-end column1) (- column2-end column2))))
        (cond
          ((and (= row1 column1) (= row2 column2) (= numrows numcols))
           (%replace-lower-triangular-matrix-on-diagonal matrix1 matrix2
                                                         row1 column1
                                                         row2 column2
                                                         numrows numcols))
          ((<= (+ column1 numcols -1) row1)
           (%replace-lower-triangular-matrix-below-diagonal matrix1 matrix2
                                                            row1 column1
                                                            row2 column2
                                                            numrows numcols))
          (t
           (error "Range(~D:~D,~D:~D) results in a non lower triangular matrix."
                  row1 (+ row1 numrows -1) column1 (+ column1 numcols -1))))))))

@ When only the matrix being destructively modified is triangular,
only the second condition must be considered.
<<Method: Destructively replace a subset of a triangular matrix>>=
(defmethod replace-matrix ((matrix1 upper-triangular-matrix)
                           (matrix2 dense-matrix)
                           &key (row1 0) row1-end (column1 0) column1-end
                           (row2 0) row2-end (column2 0) column2-end)
  "Replace the elements of matrix1 with matrix2."
  (destructuring-bind (row1 column1 row1-end column1-end)
      (matrix-validated-range matrix1 row1 column1 row1-end column1-end)
    (destructuring-bind (row2 column2 row2-end column2-end)
        (matrix-validated-range matrix2 row2 column2 row2-end column2-end)
      (let ((numrows (min (- row1-end row1) (- row2-end row2)))
            (numcols (min (- column1-end column1) (- column2-end column2))))
        (if (<= (+ row1 numrows -1) column1)
            (%replace-upper-triangular-matrix-above-diagonal matrix1 matrix2
                                                             row1 column1
                                                             row2 column2
                                                             numrows numcols)
            (error "Range(~D:~D,~D:~D) results in a non upper triangular matrix."
                   row1 (+ row1 numrows -1) column1 (+ column1 numcols -1)))))))

(defmethod replace-matrix ((matrix1 lower-triangular-matrix)
                           (matrix2 dense-matrix)
                           &key (row1 0) row1-end (column1 0) column1-end
                           (row2 0) row2-end (column2 0) column2-end)
  "Replace the elements of matrix1 with matrix2."
  (destructuring-bind (row1 column1 row1-end column1-end)
      (matrix-validated-range matrix1 row1 column1 row1-end column1-end)
    (destructuring-bind (row2 column2 row2-end column2-end)
        (matrix-validated-range matrix2 row2 column2 row2-end column2-end)
      (let ((numrows (min (- row1-end row1) (- row2-end row2)))
            (numcols (min (- column1-end column1) (- column2-end column2))))
        (if (<= (+ column1 numcols -1) row1)
            (%replace-lower-triangular-matrix-below-diagonal matrix1 matrix2
                                                             row1 column1
                                                             row2 column2
                                                             numrows numcols)
            (error "Range(~D:~D,~D:~D) results in a non lower triangular matrix."
                   row1 (+ row1 numrows -1) column1 (+ column1 numcols -1)))))))

@ [[submatrix]] and [[replace-matrix]] were exported with the
definitions of the generic functions.

% Bibliography
\bibliography{bibliography}
\bibliographystyle{plain}

\appendix

\chapter{Auxiliary Functions and Macros}
\label{chap:auxiliary}

The auxiliary functions to support the linear algebra routines are
presented in this appendix. None of these routines are exported from
the linear algebra package.
<<auxiliary.lisp>>=
<<In linear algebra package>>
<<Function: Square root of the sum of 2 arguments squared>>
<<Function: Square root of the sum of 3 arguments squared>>
<<Function: Binary operation with scaled arguments>>
<<Function: Common class of 2 objects>>
<<Function: Complex equality>>
<<Function: Numeric equality dispatch>>
@ The auxiliary functions only depend on the definition of the linear
algebra package.
<<Auxiliary dependencies>>=
(:file "auxiliary"
       :depends-on ("defpackage"))
@

\section{Square Root of the Sum of 2 or 3 Squares}
\label{sec:lapy}

The function [[sumsq]], page\ref{sec:sumsq}, is used to calculate the
square root of the sum of the squares of an arbitrary number of values
stored in a vector. In the BLAS library, there are 2 utility functions
that perform this calculation for 2 or 3 squares. The [[lapy2]]
function returns the square root of the sum of 2 squares.
\begin{equation}
  \label{eq:lapy2}
  \result \leftarrow \sqrt{|x|^2 + |y|^2}
\end{equation}
<<Function: Square root of the sum of 2 arguments squared>>=
(defun lapy2 (x y)
  "Return the square root of |x|^2 + |y|^2."
  (let* ((abs-x (abs x))
	 (abs-y (abs y))
	 (w (max abs-x abs-y)))
    (* w (sqrt (+ 1 (expt (/ (min abs-x abs-y) w) 2))))))

@ Similarly, the [[lapy3]] function returns the square root of the sum
of 3 squares.
\begin{equation}
  \label{eq:lapy3}
  \result \leftarrow \sqrt{|x|^2 + |y|^2 + |z|^2}
\end{equation}
<<Function: Square root of the sum of 3 arguments squared>>=
(defun lapy3 (x y z)
  "Return the square root of |x|^2 + |y|^2 + |z|^2."
  (let* ((abs-x (abs x))
	 (abs-y (abs y))
	 (abs-z (abs z))
	 (w (max abs-x abs-y abs-z)))
    (* w (sqrt (+ (expt (/ abs-x w) 2)
		  (expt (/ abs-y w) 2)
		  (expt (/ abs-z w) 2))))))

@ [[lapy2]] and [[lapy3]] are not exported symbols. [[lapy2]] is used
in the [[householder-reflection]] function. [[lapy3]] is not used, but
it is anticipated that it will be useful for coordinate vector
implementations. At some point, these functions need to be given a
``lispy'' name and exported.

\section{Binary Operation with Scaled Arguments}
\label{sec:scaled-binary-op}

There are many situations where the arguments to a binary operation
such as an addition or subtraction are optionally scaled. Rather than
defining multiplication by 1 when the arguments are not scaled, this
function returns the appropriate binary operation.
<<Function: Binary operation with scaled arguments>>=
(defun scaled-binary-op (op scalar1 scalar2)
  "Return the correct scaled binary operation."
  (cond
    ((and (null scalar1) (null scalar2)) op)
    ((null scalar1)
     (lambda (n1 n2) (funcall op n1 (* scalar2 n2))))
    ((null scalar2)
     (lambda (n1 n2) (funcall op (* scalar1 n1) n2)))
    (t (lambda (n1 n2)
	 (funcall op (* scalar1 n1) (* scalar2 n2))))))

@ [[scaled-binary-op]] is not an exported symbol.

\section{Common Class of Two Objects}
\label{sec:common-class-of}

One of the motivations for defining the linear algebra objects using
the CLOS was to allow subclasses to be developed that rely on the
methods of the superclass. For binary operations such as addition,
subtraction and product, it is desirable that the result of the
operation be as specific as possible. The function,
[[common-class-of]], performs 3 rudimentary tests to ascertain the
most specific class for the result. The first test checks if the
objects are instances of the same class. The next 2 tests check if one
of the objects is a subtype of the other. If none of the tests are
successful, a default class is returned if it was specified, otherwise
an error is raised.
<<Function: Common class of 2 objects>>=
(defun common-class-of (object1 object2 &optional
                        (default-class nil default-class-p))
  "Return the common class of the 2 objects or default-class."
  (let ((class1 (class-of object1))
        (class2 (class-of object2)))
    (cond
      ((eq class1 class2) class1)
      ((subtypep class1 class2) class2)
      ((subtypep class2 class1) class1)
      (t (if default-class-p
             (find-class default-class)
             (error "No common or default class."))))))

@ [[common-class-of]] is not an exported symbol.

\section{Numeric Equality}
\label{sec:numeric-equality}

Two equality functions are required for the linear algebra library.
Both functions rely on the Floating Point package for comparing
floating point numbers. The first equality function,
[[complex-equal]], verifies that the numbers being compared are
complex and then dispatches the comparison to [[float-equal]] for
complex numbers with floating point components and to [[=]] for
complex numbers with rational components.
<<Function: Complex equality>>=
;;; (COMPLEX-EQUAL number1 number2) => true or false
(defun complex-equal (complex1 complex2 &optional (epsilon *epsilon*))
  "Return true if both numbers are complex and equal."
  (cond
    ((or (typep complex1 '(complex float))
         (typep complex2 '(complex float)))
     (float-equal complex1 complex2 epsilon))
    ((or (typep complex1 '(complex integer))
         (typep complex2 '(complex integer)))
     (= complex1 complex2))
    (t (error "Arguments are not complex."))))

@ The second equality function, [[number-equal]], accepts any type of
numeric argument and dispatches the equality to [[float-equal]] for
floating point numbers and to [[=]] for rational numbers.
<<Function: Numeric equality dispatch>>=
;;; (NUMBER-EQUAL number1 number2) => true or false
(defun number-equal (number1 number2 &optional (epsilon *epsilon*))
  "Return true if the numbers are equal using the appropriate
comparison."
  (cond
    ((or (floatp number1) (floatp number2))
     (float-equal number1 number2 epsilon))
    ((and (rationalp number1) (rationalp number2))
     (= number1 number2))
    ((or (typep number1 '(complex float))
         (typep number2 '(complex float)))
     (float-equal number1 number2 epsilon))
    ((and (typep number1 '(complex rational))
          (typep number2 '(complex rational)))
     (= number1 number2))
    (t (error "Non-numeric arguments."))))

@ Neither of the equality functions are exported.

\chapter{System and Package Definition}
\label{chap:package}

Numerical linear algebra in Common Lisp is distributed under the BSD
copyright.
<<BSD Copyright>>=
#|

 Linear Algebra in Common Lisp

 Copyright (c) 2010, Thomas M. Hermann
 All rights reserved.

 Redistribution and  use  in  source  and  binary  forms, with or without
 modification, are permitted  provided  that the following conditions are
 met:

   o  Redistributions of  source  code  must  retain  the above copyright
      notice, this list of conditions and the following disclaimer.
   o  Redistributions in binary  form  must reproduce the above copyright
      notice, this list of  conditions  and  the  following disclaimer in
      the  documentation  and/or   other   materials  provided  with  the
      distribution.
   o  The names of the contributors may not be used to endorse or promote
      products derived from this software without  specific prior written
      permission.

 THIS SOFTWARE IS  PROVIDED  BY  THE  COPYRIGHT  HOLDERS AND CONTRIBUTORS
 "AS IS"  AND  ANY  EXPRESS  OR  IMPLIED  WARRANTIES, INCLUDING,  BUT NOT
 LIMITED TO, THE IMPLIED WARRANTIES  OF MERCHANTABILITY AND FITNESS FOR A
 PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER
 OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 EXEMPLARY, OR  CONSEQUENTIAL  DAMAGES  (INCLUDING,  BUT  NOT LIMITED TO,
 PROCUREMENT OF  SUBSTITUTE  GOODS  OR  SERVICES;  LOSS  OF USE, DATA, OR
 PROFITS; OR BUSINESS INTERRUPTION)  HOWEVER  CAUSED AND ON ANY THEORY OF
 LIABILITY, WHETHER  IN  CONTRACT,  STRICT  LIABILITY, OR TORT (INCLUDING
 NEGLIGENCE OR  OTHERWISE)  ARISING  IN  ANY  WAY  OUT OF THE USE OF THIS
 SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

|#

@ 

<<defpackage.lisp>>=
<<BSD Copyright>>
(common-lisp:defpackage :linear-algebra
  (:use :common-lisp :floating-point)
  (:export
   ;; Fundamental operations
   <<Fundamental operation exports>>
   ;; Vector exports
   <<Vector exports>>
   ;; Matrix interface
   <<Matrix exports>>
   ;; Identity matrix
   <<Identity matrix exports>>
   ;; Permutation matrix
   <<Permutation matrix exports>>
   ;; Data vector exports
   <<Data vector exports>>
   ;; Dense matrix
   <<Dense matrix exports>>
   ;; Square matrix
   <<Square matrix exports>>
   ;; Hermitian matrix
   <<Hermitian matrix exports>>
   ;; Symmetric matrix
   <<Symmetric matrix exports>>
   ;; Triangular matrix
   <<Triangular matrix exports>>))
@

<<linear-algebra.asd>>=
;;;; -*- Mode: Lisp; Syntax: ANSI-Common-Lisp -*-
<<BSD Copyright>>

(common-lisp:defpackage #:linear-algebra-system
  (:use :common-lisp :asdf))

(common-lisp:in-package #:linear-algebra-system)

(defsystem :linear-algebra
  :description "Linear Algebra in Common Lisp."
  :version "Draft"
  :author "Thomas M. Hermann <tmh.public@gmail.com>"
  :license "BSD"
  :depends-on ("floating-point")
  :components
  ((:module
    linear-algebra
    :components
    ((:file "defpackage")
     <<Auxiliary dependencies>>
     <<Fundamental operation dependencies>>
     <<Vector dependencies>>
     <<Matrix dependencies>>
     <<Identity matrix dependencies>>
     <<Permutation matrix dependencies>>
     <<Data vector dependencies>>
     <<Dense matrix dependencies>>
     <<Square matrix dependencies>>
     <<Hermitian matrix dependencies>>
     <<Symmetric matrix dependencies>>
     <<Triangular matrix dependencies>>))))
@

\end{document}
